

Microchip Technology PIC18 LITE Macro Assembler V1.33 build 59893 
                                                                                               Sun Feb 07 21:37:08 2016

Microchip Technology Omniscient Code Generator (Lite mode) build 59893
     1                           	processor	18F2550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1
    34                           	psect	text23,global,reloc=2,class=CODE,delta=1
    35                           	psect	text24,global,reloc=2,class=CODE,delta=1
    36                           	psect	text25,global,reloc=2,class=CODE,delta=1
    37                           	psect	text26,global,reloc=2,class=CODE,delta=1
    38                           	psect	text27,global,reloc=2,class=CODE,delta=1
    39                           	psect	text28,global,reloc=2,class=CODE,delta=1
    40                           	psect	text29,global,reloc=2,class=CODE,delta=1
    41                           	psect	text30,global,reloc=2,class=CODE,delta=1
    42                           	psect	text31,global,reloc=2,class=CODE,delta=1
    43                           	psect	text32,global,reloc=2,class=CODE,delta=1
    44                           	psect	text33,global,reloc=2,class=CODE,delta=1
    45                           	psect	text34,global,reloc=2,class=CODE,delta=1
    46                           	psect	text35,global,reloc=2,class=CODE,delta=1
    47                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    48                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    49  0000                     
    50                           	psect	idataBANK0
    51  0027B2                     __pidataBANK0:
    52                           	opt stack 0
    53                           
    54                           ;initializer for znaki_pl_i_stopien@F5124
    55  0027B2  0C                 	db	12
    56  0027B3  12                 	db	18
    57  0027B4  12                 	db	18
    58  0027B5  0C                 	db	12
    59  0027B6  00                 	db	0
    60  0027B7  00                 	db	0
    61  0027B8  00                 	db	0
    62  0027B9  00                 	db	0
    63                           
    64                           ;initializer for znaki_pl_i_stopien@F5126
    65  0027BA  00                 	db	0
    66  0027BB  00                 	db	0
    67  0027BC  0E                 	db	14
    68  0027BD  01                 	db	1
    69  0027BE  0F                 	db	15
    70  0027BF  11                 	db	17
    71  0027C0  0F                 	db	15
    72  0027C1  02                 	db	2
    73                           
    74                           ;initializer for znaki_pl_i_stopien@F5128
    75  0027C2  00                 	db	0
    76  0027C3  00                 	db	0
    77  0027C4  0E                 	db	14
    78  0027C5  11                 	db	17
    79  0027C6  1F                 	db	31
    80  0027C7  10                 	db	16
    81  0027C8  0E                 	db	14
    82  0027C9  02                 	db	2
    83                           
    84                           ;initializer for znaki_pl_i_stopien@F5130
    85  0027CA  02                 	db	2
    86  0027CB  04                 	db	4
    87  0027CC  0E                 	db	14
    88  0027CD  10                 	db	16
    89  0027CE  10                 	db	16
    90  0027CF  11                 	db	17
    91  0027D0  0E                 	db	14
    92  0027D1  00                 	db	0
    93                           
    94                           ;initializer for znaki_pl_i_stopien@F5132
    95  0027D2  0C                 	db	12
    96  0027D3  04                 	db	4
    97  0027D4  06                 	db	6
    98  0027D5  0C                 	db	12
    99  0027D6  04                 	db	4
   100  0027D7  04                 	db	4
   101  0027D8  0E                 	db	14
   102  0027D9  00                 	db	0
   103                           
   104                           ;initializer for znaki_pl_i_stopien@F5134
   105  0027DA  02                 	db	2
   106  0027DB  04                 	db	4
   107  0027DC  16                 	db	22
   108  0027DD  19                 	db	25
   109  0027DE  11                 	db	17
   110  0027DF  11                 	db	17
   111  0027E0  11                 	db	17
   112  0027E1  00                 	db	0
   113                           
   114                           ;initializer for znaki_pl_i_stopien@F5136
   115  0027E2  02                 	db	2
   116  0027E3  04                 	db	4
   117  0027E4  0E                 	db	14
   118  0027E5  11                 	db	17
   119  0027E6  11                 	db	17
   120  0027E7  11                 	db	17
   121  0027E8  0E                 	db	14
   122  0027E9  00                 	db	0
   123                           
   124                           ;initializer for znaki_pl_i_stopien@F5138
   125  0027EA  02                 	db	2
   126  0027EB  04                 	db	4
   127  0027EC  0E                 	db	14
   128  0027ED  10                 	db	16
   129  0027EE  0E                 	db	14
   130  0027EF  01                 	db	1
   131  0027F0  1E                 	db	30
   132  0027F1  00                 	db	0
   133                           
   134                           	psect	smallconst
   135  000800                     __psmallconst:
   136                           	opt stack 0
   137  000800  00                 	db	0
   138  000801                     _dpowers:
   139                           	opt stack 0
   140  000801  0001               	dw	1
   141  000803  0000               	dw	0
   142  000805  000A               	dw	10
   143  000807  0000               	dw	0
   144  000809  0064               	dw	100
   145  00080B  0000               	dw	0
   146  00080D  03E8               	dw	1000
   147  00080F  0000               	dw	0
   148  000811  2710               	dw	10000
   149  000813  0000               	dw	0
   150  000815  86A0               	dw	34464
   151  000817  0001               	dw	1
   152  000819  4240               	dw	16960
   153  00081B  000F               	dw	15
   154  00081D  9680               	dw	38528
   155  00081F  0098               	dw	152
   156  000821  E100               	dw	57600
   157  000823  05F5               	dw	1525
   158  000825  CA00               	dw	51712
   159  000827  3B9A               	dw	15258
   160  000829                     __end_of_dpowers:
   161                           	opt stack 0
   162  000829                     __npowers_:
   163                           	opt stack 0
   164  000829  00                 	db	0
   165  00082A  80                 	db	128
   166  00082B  3F                 	db	63
   167  00082C  CD                 	db	205
   168  00082D  CC                 	db	204
   169  00082E  3D                 	db	61
   170  00082F  D7                 	db	215
   171  000830  23                 	db	35
   172  000831  3C                 	db	60
   173  000832  12                 	db	18
   174  000833  83                 	db	131
   175  000834  3A                 	db	58
   176  000835  B7                 	db	183
   177  000836  D1                 	db	209
   178  000837  38                 	db	56
   179  000838  C6                 	db	198
   180  000839  27                 	db	39
   181  00083A  37                 	db	55
   182  00083B  38                 	db	56
   183  00083C  86                 	db	134
   184  00083D  35                 	db	53
   185  00083E  C0                 	db	192
   186  00083F  D6                 	db	214
   187  000840  33                 	db	51
   188  000841  CC                 	db	204
   189  000842  2B                 	db	43
   190  000843  32                 	db	50
   191  000844  70                 	db	112
   192  000845  89                 	db	137
   193  000846  30                 	db	48
   194  000847  E7                 	db	231
   195  000848  DB                 	db	219
   196  000849  2E                 	db	46
   197  00084A  E5                 	db	229
   198  00084B  3C                 	db	60
   199  00084C  1E                 	db	30
   200  00084D  42                 	db	66
   201  00084E  A2                 	db	162
   202  00084F  0D                 	db	13
   203  000850                     __end_of__npowers_:
   204                           	opt stack 0
   205  000850                     __powers_:
   206                           	opt stack 0
   207  000850  00                 	db	0
   208  000851  80                 	db	128
   209  000852  3F                 	db	63
   210  000853  00                 	db	0
   211  000854  20                 	db	32
   212  000855  41                 	db	65
   213  000856  00                 	db	0
   214  000857  C8                 	db	200
   215  000858  42                 	db	66
   216  000859  00                 	db	0
   217  00085A  7A                 	db	122
   218  00085B  44                 	db	68
   219  00085C  40                 	db	64
   220  00085D  1C                 	db	28
   221  00085E  46                 	db	70
   222  00085F  50                 	db	80
   223  000860  C3                 	db	195
   224  000861  47                 	db	71
   225  000862  24                 	db	36
   226  000863  74                 	db	116
   227  000864  49                 	db	73
   228  000865  97                 	db	151
   229  000866  18                 	db	24
   230  000867  4B                 	db	75
   231  000868  BC                 	db	188
   232  000869  BE                 	db	190
   233  00086A  4C                 	db	76
   234  00086B  6B                 	db	107
   235  00086C  6E                 	db	110
   236  00086D  4E                 	db	78
   237  00086E  03                 	db	3
   238  00086F  15                 	db	21
   239  000870  50                 	db	80
   240  000871  79                 	db	121
   241  000872  AD                 	db	173
   242  000873  60                 	db	96
   243  000874  F3                 	db	243
   244  000875  49                 	db	73
   245  000876  71                 	db	113
   246  000877                     __end_of__powers_:
   247                           	opt stack 0
   248  0000                     _LATBbits	set	3978
   249  0000                     _PIR1bits	set	3998
   250  0000                     _SSPADD	set	4040
   251  0000                     _SSPBUF	set	4041
   252  0000                     _SSPCON1	set	4038
   253  0000                     _SSPCON1bits	set	4038
   254  0000                     _SSPCON2	set	4037
   255  0000                     _SSPCON2bits	set	4037
   256  0000                     _SSPSTAT	set	4039
   257  0000                     _SSPSTATbits	set	4039
   258  0000                     _TRISBbits	set	3987
   259  000877                     __stringdata:
   260                           	opt stack 0
   261  000877                     STR_6:
   262  000877  20                 	db	32
   263  000878  20                 	db	32
   264  000879  20                 	db	32
   265  00087A  20                 	db	32
   266  00087B  20                 	db	32
   267  00087C  20                 	db	32
   268  00087D  20                 	db	32
   269  00087E  20                 	db	32
   270  00087F  20                 	db	32
   271  000880  20                 	db	32
   272  000881  20                 	db	32
   273  000882  20                 	db	32
   274  000883  20                 	db	32
   275  000884  00                 	db	0
   276  000885                     STR_1:
   277  000885  25                 	db	37
   278  000886  2E                 	db	46
   279  000887  32                 	db	50	;'2'
   280  000888  66                 	db	102	;'f'
   281  000889  00                 	db	0
   282  00088A                     STR_7:
   283  00088A  58                 	db	88	;'X'
   284  00088B  3D                 	db	61	;'='
   285  00088C  20                 	db	32
   286  00088D  00                 	db	0
   287  00088E                     STR_8:
   288  00088E  59                 	db	89	;'Y'
   289  00088F  3D                 	db	61	;'='
   290  000890  20                 	db	32
   291  000891  00                 	db	0
   292  000892                     STR_9:
   293  000892  5A                 	db	90	;'Z'
   294  000893  3D                 	db	61	;'='
   295  000894  20                 	db	32
   296  000895  00                 	db	0
   297  000896                     __end_of__stringdata:
   298                           	opt stack 0
   299                           
   300                           ; #config settings
   301  000896  00                 	db	0	; dummy byte at the end
   302  0000                     
   303                           	psect	cinit
   304  0028C0                     __pcinit:
   305                           	opt stack 0
   306  0028C0                     start_initialization:
   307                           	opt stack 0
   308  0028C0                     __initialization:
   309                           	opt stack 0
   310                           
   311                           ; Initialize objects allocated to BANK0 (64 bytes)
   312                           ; load TBLPTR registers with __pidataBANK0
   313  0028C0  0EB2               	movlw	low __pidataBANK0
   314  0028C2  6EF6               	movwf	tblptrl,c
   315  0028C4  0E27               	movlw	high __pidataBANK0
   316  0028C6  6EF7               	movwf	tblptrh,c
   317  0028C8  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   318  0028CA  6EF8               	movwf	tblptru,c
   319  0028CC  EE00  F060         	lfsr	0,__pdataBANK0
   320  0028D0  EE10 F040          	lfsr	1,64
   321  0028D4                     copy_data0:
   322  0028D4  0009               	tblrd		*+
   323  0028D6  CFF5 FFEE          	movff	tablat,postinc0
   324  0028DA  50E5               	movf	postdec1,w,c
   325  0028DC  50E1               	movf	fsr1l,w,c
   326  0028DE  E1FA               	bnz	copy_data0
   327  0028E0                     end_of_initialization:
   328                           	opt stack 0
   329  0028E0                     __end_of__initialization:
   330                           	opt stack 0
   331  0028E0  0E00               	movlw	low (__Lmediumconst shr (0+16))
   332  0028E2  6EF8               	movwf	tblptru,c
   333  0028E4  0100               	movlb	0
   334  0028E6  EF32  F00C         	goto	_main	;jump to C main() function
   335                           tblptru	equ	0xFF8
   336                           tblptrh	equ	0xFF7
   337                           tblptrl	equ	0xFF6
   338                           tablat	equ	0xFF5
   339                           postinc0	equ	0xFEE
   340                           postdec1	equ	0xFE5
   341                           fsr1l	equ	0xFE1
   342                           
   343                           	psect	dataBANK0
   344  000060                     __pdataBANK0:
   345                           	opt stack 0
   346  000060                     znaki_pl_i_stopien@F5124:
   347                           	opt stack 0
   348  000060                     	ds	8
   349  000068                     znaki_pl_i_stopien@F5126:
   350                           	opt stack 0
   351  000068                     	ds	8
   352  000070                     znaki_pl_i_stopien@F5128:
   353                           	opt stack 0
   354  000070                     	ds	8
   355  000078                     znaki_pl_i_stopien@F5130:
   356                           	opt stack 0
   357  000078                     	ds	8
   358  000080                     znaki_pl_i_stopien@F5132:
   359                           	opt stack 0
   360  000080                     	ds	8
   361  000088                     znaki_pl_i_stopien@F5134:
   362                           	opt stack 0
   363  000088                     	ds	8
   364  000090                     znaki_pl_i_stopien@F5136:
   365                           	opt stack 0
   366  000090                     	ds	8
   367  000098                     znaki_pl_i_stopien@F5138:
   368                           	opt stack 0
   369  000098                     	ds	8
   370                           tblptru	equ	0xFF8
   371                           tblptrh	equ	0xFF7
   372                           tblptrl	equ	0xFF6
   373                           tablat	equ	0xFF5
   374                           postinc0	equ	0xFEE
   375                           postdec1	equ	0xFE5
   376                           fsr1l	equ	0xFE1
   377                           
   378                           	psect	cstackBANK0
   379  0000A0                     __pcstackBANK0:
   380                           	opt stack 0
   381  0000A0                     _sprintf$1422:
   382                           	opt stack 0
   383                           
   384                           ; 3 bytes @ 0x0
   385  0000A0                     	ds	3
   386  0000A3                     _sprintf$371:
   387                           	opt stack 0
   388                           
   389                           ; 4 bytes @ 0x3
   390  0000A3                     	ds	4
   391  0000A7                     sprintf@ap:
   392                           	opt stack 0
   393                           
   394                           ; 2 bytes @ 0x7
   395  0000A7                     	ds	2
   396  0000A9                     sprintf@vd:
   397                           	opt stack 0
   398                           
   399                           ; 4 bytes @ 0x9
   400  0000A9                     	ds	4
   401  0000AD                     sprintf@vd_373:
   402                           	opt stack 0
   403                           
   404                           ; 4 bytes @ 0xD
   405  0000AD                     	ds	4
   406  0000B1                     sprintf@flag:
   407                           	opt stack 0
   408                           
   409                           ; 2 bytes @ 0x11
   410  0000B1                     	ds	2
   411  0000B3                     sprintf@integ:
   412                           	opt stack 0
   413                           
   414                           ; 3 bytes @ 0x13
   415  0000B3                     	ds	3
   416  0000B6                     sprintf@_val:
   417                           	opt stack 0
   418                           
   419                           ; 5 bytes @ 0x16
   420  0000B6                     	ds	5
   421  0000BB                     sprintf@exp:
   422                           	opt stack 0
   423                           
   424                           ; 2 bytes @ 0x1B
   425  0000BB                     	ds	2
   426  0000BD                     sprintf@prec:
   427                           	opt stack 0
   428                           
   429                           ; 2 bytes @ 0x1D
   430  0000BD                     	ds	2
   431  0000BF                     sprintf@fval:
   432                           	opt stack 0
   433                           
   434                           ; 3 bytes @ 0x1F
   435  0000BF                     	ds	3
   436  0000C2                     sprintf@c:
   437                           	opt stack 0
   438                           
   439                           ; 1 bytes @ 0x22
   440  0000C2                     	ds	1
   441  0000C3                     getX@x:
   442                           	opt stack 0
   443  0000C3                     getY@y:
   444                           	opt stack 0
   445  0000C3                     getZ@z:
   446                           	opt stack 0
   447                           
   448                           ; 10 bytes @ 0x23
   449  0000C3                     	ds	10
   450  0000CD                     getX@xf:
   451                           	opt stack 0
   452  0000CD                     getY@yf:
   453                           	opt stack 0
   454  0000CD                     getZ@zf:
   455                           	opt stack 0
   456                           
   457                           ; 3 bytes @ 0x2D
   458  0000CD                     	ds	3
   459  0000D0                     getX@X:
   460                           	opt stack 0
   461  0000D0                     getY@Y:
   462                           	opt stack 0
   463  0000D0                     getZ@Z:
   464                           	opt stack 0
   465                           
   466                           ; 2 bytes @ 0x30
   467  0000D0                     	ds	2
   468  0000D2                     getX@data:
   469                           	opt stack 0
   470  0000D2                     getY@data:
   471                           	opt stack 0
   472  0000D2                     getZ@data:
   473                           	opt stack 0
   474                           
   475                           ; 2 bytes @ 0x32
   476  0000D2                     	ds	2
   477  0000D4                     main@i:
   478                           	opt stack 0
   479                           
   480                           ; 2 bytes @ 0x34
   481  0000D4                     	ds	2
   482  0000D6                     main@i_311:
   483                           	opt stack 0
   484                           
   485                           ; 1 bytes @ 0x36
   486  0000D6                     	ds	1
   487                           tblptru	equ	0xFF8
   488                           tblptrh	equ	0xFF7
   489                           tblptrl	equ	0xFF6
   490                           tablat	equ	0xFF5
   491                           postinc0	equ	0xFEE
   492                           postdec1	equ	0xFE5
   493                           fsr1l	equ	0xFE1
   494                           
   495                           	psect	cstackCOMRAM
   496  000001                     __pcstackCOMRAM:
   497                           	opt stack 0
   498  000001                     ??_IdleI2C:
   499  000001                     ??_ReadI2C:
   500  000001                     ??_isdigit:
   501  000001                     ??_Init_lcd:
   502  000001                     ??_LcdCmd:
   503  000001                     ??_LcdData:
   504  000001                     ?___awmod:
   505                           	opt stack 0
   506  000001                     ?___ftpack:
   507                           	opt stack 0
   508  000001                     ?___ftneg:
   509                           	opt stack 0
   510  000001                     ?__tdiv_to_l_:
   511                           	opt stack 0
   512  000001                     ?__div_to_l_:
   513                           	opt stack 0
   514  000001                     ?___lldiv:
   515                           	opt stack 0
   516  000001                     ?___llmod:
   517                           	opt stack 0
   518  000001                     OpenI2C@slew:
   519                           	opt stack 0
   520  000001                     ___awmod@dividend:
   521                           	opt stack 0
   522  000001                     __div_to_l_@f1:
   523                           	opt stack 0
   524  000001                     ___ftpack@arg:
   525                           	opt stack 0
   526  000001                     __tdiv_to_l_@f1:
   527                           	opt stack 0
   528  000001                     ___ftge@ff1:
   529                           	opt stack 0
   530  000001                     ___ftneg@f1:
   531                           	opt stack 0
   532  000001                     ___lldiv@dividend:
   533                           	opt stack 0
   534  000001                     ___llmod@dividend:
   535                           	opt stack 0
   536                           
   537                           ; 4 bytes @ 0x0
   538  000001                     	ds	1
   539  000002                     ??_WriteI2C:
   540  000002                     OpenI2C@sync_mode:
   541                           	opt stack 0
   542  000002                     _isdigit$1166:
   543                           	opt stack 0
   544                           
   545                           ; 1 bytes @ 0x1
   546  000002                     	ds	1
   547  000003                     LcdCmd@command:
   548                           	opt stack 0
   549  000003                     LcdData@data:
   550                           	opt stack 0
   551  000003                     WriteI2C@data_out:
   552                           	opt stack 0
   553  000003                     isdigit@c:
   554                           	opt stack 0
   555  000003                     ___awmod@divisor:
   556                           	opt stack 0
   557                           
   558                           ; 2 bytes @ 0x2
   559  000003                     	ds	1
   560  000004                     ___ftpack@exp:
   561                           	opt stack 0
   562  000004                     adxl345Write@add:
   563                           	opt stack 0
   564  000004                     adxl345Read@add:
   565                           	opt stack 0
   566  000004                     __div_to_l_@f2:
   567                           	opt stack 0
   568  000004                     __tdiv_to_l_@f2:
   569                           	opt stack 0
   570  000004                     ___ftge@ff2:
   571                           	opt stack 0
   572                           
   573                           ; 3 bytes @ 0x3
   574  000004                     	ds	1
   575  000005                     ___awmod@counter:
   576                           	opt stack 0
   577  000005                     ___ftpack@sign:
   578                           	opt stack 0
   579  000005                     ___lldiv@divisor:
   580                           	opt stack 0
   581  000005                     ___llmod@divisor:
   582                           	opt stack 0
   583                           
   584                           ; 4 bytes @ 0x4
   585  000005                     	ds	1
   586  000006                     ??___ftpack:
   587  000006                     adxl345Read@retval:
   588                           	opt stack 0
   589  000006                     ___awmod@sign:
   590                           	opt stack 0
   591  000006                     adxl345Write@data:
   592                           	opt stack 0
   593                           
   594                           ; 2 bytes @ 0x5
   595  000006                     	ds	1
   596  000007                     ??__tdiv_to_l_:
   597  000007                     ??__div_to_l_:
   598  000007                     ??___ftge:
   599  000007                     ?___awdiv:
   600                           	opt stack 0
   601  000007                     ___awdiv@dividend:
   602                           	opt stack 0
   603                           
   604                           ; 2 bytes @ 0x6
   605  000007                     	ds	1
   606  000008                     setRange@range:
   607                           	opt stack 0
   608                           
   609                           ; 1 bytes @ 0x7
   610  000008                     	ds	1
   611  000009                     ?___awtoft:
   612                           	opt stack 0
   613  000009                     ?___lltoft:
   614                           	opt stack 0
   615  000009                     setRange@format:
   616                           	opt stack 0
   617  000009                     ___llmod@counter:
   618                           	opt stack 0
   619  000009                     ___awdiv@divisor:
   620                           	opt stack 0
   621  000009                     ___awtoft@c:
   622                           	opt stack 0
   623  000009                     ___lldiv@quotient:
   624                           	opt stack 0
   625  000009                     ___lltoft@c:
   626                           	opt stack 0
   627                           
   628                           ; 4 bytes @ 0x8
   629  000009                     	ds	1
   630  00000A                     Init_adxl345@y_offset:
   631                           	opt stack 0
   632  00000A                     __tdiv_to_l_@quot:
   633                           	opt stack 0
   634                           
   635                           ; 4 bytes @ 0x9
   636  00000A                     	ds	1
   637  00000B                     Init_adxl345@z_offset:
   638                           	opt stack 0
   639  00000B                     ___awdiv@counter:
   640                           	opt stack 0
   641  00000B                     __div_to_l_@quot:
   642                           	opt stack 0
   643                           
   644                           ; 4 bytes @ 0xA
   645  00000B                     	ds	1
   646  00000C                     Init_adxl345@range:
   647                           	opt stack 0
   648  00000C                     ___awdiv@sign:
   649                           	opt stack 0
   650  00000C                     ___awtoft@sign:
   651                           	opt stack 0
   652                           
   653                           ; 1 bytes @ 0xB
   654  00000C                     	ds	1
   655  00000D                     ??___lltoft:
   656  00000D                     Init_adxl345@data_rate:
   657                           	opt stack 0
   658  00000D                     ___lldiv@counter:
   659                           	opt stack 0
   660  00000D                     ___awdiv@quotient:
   661                           	opt stack 0
   662                           
   663                           ; 2 bytes @ 0xC
   664  00000D                     	ds	1
   665  00000E                     ??_Init_adxl345:
   666  00000E                     __tdiv_to_l_@cntr:
   667                           	opt stack 0
   668                           
   669                           ; 1 bytes @ 0xD
   670  00000E                     	ds	1
   671  00000F                     ?___wmul:
   672                           	opt stack 0
   673  00000F                     Init_adxl345@x_offset:
   674                           	opt stack 0
   675  00000F                     __div_to_l_@cntr:
   676                           	opt stack 0
   677  00000F                     __tdiv_to_l_@exp1:
   678                           	opt stack 0
   679  00000F                     ___wmul@multiplier:
   680                           	opt stack 0
   681                           
   682                           ; 2 bytes @ 0xE
   683  00000F                     	ds	1
   684  000010                     __div_to_l_@exp1:
   685                           	opt stack 0
   686                           
   687                           ; 1 bytes @ 0xF
   688  000010                     	ds	1
   689  000011                     ___lltoft@exp:
   690                           	opt stack 0
   691  000011                     ___wmul@multiplicand:
   692                           	opt stack 0
   693                           
   694                           ; 2 bytes @ 0x10
   695  000011                     	ds	2
   696  000013                     ___wmul@product:
   697                           	opt stack 0
   698                           
   699                           ; 2 bytes @ 0x12
   700  000013                     	ds	2
   701  000015                     ?___ftmul:
   702                           	opt stack 0
   703  000015                     ___ftmul@f1:
   704                           	opt stack 0
   705                           
   706                           ; 3 bytes @ 0x14
   707  000015                     	ds	3
   708  000018                     ___ftmul@f2:
   709                           	opt stack 0
   710                           
   711                           ; 3 bytes @ 0x17
   712  000018                     	ds	3
   713  00001B                     ??___ftmul:
   714                           
   715                           ; 0 bytes @ 0x1A
   716  00001B                     	ds	3
   717  00001E                     ___ftmul@exp:
   718                           	opt stack 0
   719                           
   720                           ; 1 bytes @ 0x1D
   721  00001E                     	ds	1
   722  00001F                     ___ftmul@f3_as_product:
   723                           	opt stack 0
   724                           
   725                           ; 3 bytes @ 0x1E
   726  00001F                     	ds	3
   727  000022                     ___ftmul@cntr:
   728                           	opt stack 0
   729                           
   730                           ; 1 bytes @ 0x21
   731  000022                     	ds	1
   732  000023                     ___ftmul@sign:
   733                           	opt stack 0
   734                           
   735                           ; 1 bytes @ 0x22
   736  000023                     	ds	1
   737  000024                     ?_fround:
   738                           	opt stack 0
   739  000024                     ?_scale:
   740                           	opt stack 0
   741                           
   742                           ; 3 bytes @ 0x23
   743  000024                     	ds	3
   744  000027                     _fround$1420:
   745                           	opt stack 0
   746  000027                     _scale$1421:
   747                           	opt stack 0
   748                           
   749                           ; 3 bytes @ 0x26
   750  000027                     	ds	3
   751  00002A                     scale@scl:
   752                           	opt stack 0
   753  00002A                     _fround$1419:
   754                           	opt stack 0
   755                           
   756                           ; 3 bytes @ 0x29
   757  00002A                     	ds	1
   758  00002B                     ?___fttol:
   759                           	opt stack 0
   760  00002B                     ___fttol@f1:
   761                           	opt stack 0
   762                           
   763                           ; 3 bytes @ 0x2A
   764  00002B                     	ds	2
   765  00002D                     fround@prec:
   766                           	opt stack 0
   767                           
   768                           ; 1 bytes @ 0x2C
   769  00002D                     	ds	1
   770  00002E                     ?___ftadd:
   771                           	opt stack 0
   772  00002E                     ___ftadd@f1:
   773                           	opt stack 0
   774                           
   775                           ; 3 bytes @ 0x2D
   776  00002E                     	ds	1
   777  00002F                     ??___fttol:
   778                           
   779                           ; 0 bytes @ 0x2E
   780  00002F                     	ds	2
   781  000031                     ___ftadd@f2:
   782                           	opt stack 0
   783                           
   784                           ; 3 bytes @ 0x30
   785  000031                     	ds	3
   786  000034                     ??___ftadd:
   787  000034                     ___fttol@sign1:
   788                           	opt stack 0
   789                           
   790                           ; 1 bytes @ 0x33
   791  000034                     	ds	1
   792  000035                     ___fttol@lval:
   793                           	opt stack 0
   794                           
   795                           ; 4 bytes @ 0x34
   796  000035                     	ds	2
   797  000037                     ___ftadd@sign:
   798                           	opt stack 0
   799                           
   800                           ; 1 bytes @ 0x36
   801  000037                     	ds	1
   802  000038                     ___ftadd@exp2:
   803                           	opt stack 0
   804                           
   805                           ; 1 bytes @ 0x37
   806  000038                     	ds	1
   807  000039                     ___ftadd@exp1:
   808                           	opt stack 0
   809  000039                     ___fttol@exp1:
   810                           	opt stack 0
   811                           
   812                           ; 1 bytes @ 0x38
   813  000039                     	ds	1
   814  00003A                     ?___ftsub:
   815                           	opt stack 0
   816  00003A                     ___ftsub@f1:
   817                           	opt stack 0
   818                           
   819                           ; 3 bytes @ 0x39
   820  00003A                     	ds	3
   821  00003D                     ___ftsub@f2:
   822                           	opt stack 0
   823                           
   824                           ; 3 bytes @ 0x3C
   825  00003D                     	ds	3
   826  000040                     ?_sprintf:
   827                           	opt stack 0
   828  000040                     sprintf@sp:
   829                           	opt stack 0
   830                           
   831                           ; 2 bytes @ 0x3F
   832  000040                     	ds	2
   833  000042                     sprintf@f:
   834                           	opt stack 0
   835                           
   836                           ; 2 bytes @ 0x41
   837  000042                     	ds	5
   838  000047                     ??_sprintf:
   839                           
   840                           ; 0 bytes @ 0x46
   841  000047                     	ds	6
   842  00004D                     ?_getX:
   843                           	opt stack 0
   844  00004D                     ?_getY:
   845                           	opt stack 0
   846  00004D                     ?_getZ:
   847                           	opt stack 0
   848                           
   849                           ; 2 bytes @ 0x4C
   850  00004D                     	ds	2
   851  00004F                     ??_getX:
   852  00004F                     ??_getY:
   853  00004F                     ??_getZ:
   854                           
   855                           ; 0 bytes @ 0x4E
   856  00004F                     	ds	2
   857  000051                     LcdText@y:
   858                           	opt stack 0
   859                           
   860                           ; 1 bytes @ 0x50
   861  000051                     	ds	1
   862  000052                     LcdText@text:
   863                           	opt stack 0
   864                           
   865                           ; 2 bytes @ 0x51
   866  000052                     	ds	2
   867  000054                     ??_LcdText:
   868                           
   869                           ; 0 bytes @ 0x53
   870  000054                     	ds	3
   871  000057                     LcdText@x:
   872                           	opt stack 0
   873                           
   874                           ; 1 bytes @ 0x56
   875  000057                     	ds	1
   876  000058                     LcdText@i:
   877                           	opt stack 0
   878                           
   879                           ; 2 bytes @ 0x57
   880  000058                     	ds	2
   881  00005A                     
   882                           ; 2 bytes @ 0x59
   883  00005A                     	ds	2
   884  00005C                     
   885                           ; 3 bytes @ 0x5B
   886  00005C                     	ds	3
   887  00005F                     ??_main:
   888                           
   889                           ; 0 bytes @ 0x5E
   890  00005F                     	ds	1
   891                           tblptru	equ	0xFF8
   892                           tblptrh	equ	0xFF7
   893                           tblptrl	equ	0xFF6
   894                           tablat	equ	0xFF5
   895                           postinc0	equ	0xFEE
   896                           postdec1	equ	0xFE5
   897                           fsr1l	equ	0xFE1
   898                           
   899 ;;
   900 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   901 ;;
   902 ;; *************** function _main *****************
   903 ;; Defined at:
   904 ;;		line 11 in file "main.c"
   905 ;; Parameters:    Size  Location     Type
   906 ;;  argc            2   89[COMRAM] int 
   907 ;;  argv            3   91[COMRAM] PTR PTR unsigned char 
   908 ;; Auto vars:     Size  Location     Type
   909 ;;  i               1   54[BANK0 ] unsigned char 
   910 ;;  i               2   52[BANK0 ] int 
   911 ;; Return value:  Size  Location     Type
   912 ;;                  2   89[COMRAM] int 
   913 ;; Registers used:
   914 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   915 ;; Tracked objects:
   916 ;;		On entry : 0/0
   917 ;;		On exit  : 0/0
   918 ;;		Unchanged: 0/0
   919 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   920 ;;      Params:         5       0       0       0       0       0       0       0       0
   921 ;;      Locals:         0       3       0       0       0       0       0       0       0
   922 ;;      Temps:          1       0       0       0       0       0       0       0       0
   923 ;;      Totals:         6       3       0       0       0       0       0       0       0
   924 ;;Total ram usage:        9 bytes
   925 ;; Hardware stack levels required when called:    5
   926 ;; This function calls:
   927 ;;		_Init_adxl345
   928 ;;		_Init_lcd
   929 ;;		_LcdCmd
   930 ;;		_LcdText
   931 ;;		_OpenI2C
   932 ;;		_getX
   933 ;;		_getY
   934 ;;		_getZ
   935 ;; This function is called by:
   936 ;;		Startup code after reset
   937 ;; This function uses a non-reentrant model
   938 ;;
   939                           
   940                           	psect	text0
   941  001864                     __ptext0:
   942                           	opt stack 0
   943  001864                     _main:
   944                           	opt stack 26
   945                           
   946                           ;main.c: 13: for (int i=0; i>10; i++) {
   947                           
   948                           ;incstack = 0
   949  001864  0E00               	movlw	0
   950  001866  0100               	movlb	0	; () banked
   951  001868  6FD5               	movwf	(main@i+1)& (0+255),b
   952  00186A  0E00               	movlw	0
   953  00186C  0100               	movlb	0	; () banked
   954  00186E  6FD4               	movwf	main@i& (0+255),b
   955  001870                     
   956                           ; BSR set to: 0
   957  001870  0100               	movlb	0	; () banked
   958  001872  51D5               	movf	(main@i+1)& (0+255),w,b
   959  001874  0A80               	xorlw	128
   960  001876  6EF3               	movwf	prodl,c
   961  001878  0E80               	movlw	128
   962  00187A  5CF3               	subwf	prodl,w,c
   963  00187C  0E0B               	movlw	11
   964  00187E  B4D8               	btfsc	status,2,c
   965  001880  5DD4               	subwf	main@i& (0+255),w,b
   966  001882  A0D8               	btfss	status,0,c
   967  001884  D00C               	goto	l3215
   968                           
   969                           ; BSR set to: 0
   970                           ;main.c: 14: _delay((unsigned long)((30)*(20000000/4000.0)));
   971                           
   972                           ; BSR set to: 0
   973                           
   974                           ; BSR set to: 0
   975  001886  0EC3               	movlw	195
   976  001888  6E5F               	movwf	??_main& (0+255),c
   977  00188A  0ECD               	movlw	205
   978  00188C                     u3737:
   979  00188C  2EE8               	decfsz	wreg,f,c
   980  00188E  D7FE               	goto	u3737
   981  001890  2E5F               	decfsz	??_main& (0+255),f,c
   982  001892  D7FC               	goto	u3737
   983  001894  F000               	nop	
   984  001896  0100               	movlb	0	; () banked
   985  001898  4BD4               	infsnz	main@i& (0+255),f,b
   986  00189A  2BD5               	incf	(main@i+1)& (0+255),f,b
   987  00189C  D7E9               	goto	L1
   988  00189E                     l3215:
   989                           
   990                           ; BSR set to: 0
   991                           ;main.c: 15: }
   992                           ;main.c: 16: OpenI2C(0b00001000, 0b10000000);
   993  00189E  0E80               	movlw	128
   994  0018A0  6E01               	movwf	OpenI2C@slew,c
   995  0018A2  0E08               	movlw	8
   996  0018A4  ECBF  F014         	call	_OpenI2C
   997                           
   998                           ;main.c: 18: SSPADD = 49;
   999  0018A8  0E31               	movlw	49
  1000  0018AA  6EC8               	movwf	4040,c	;volatile
  1001                           
  1002                           ;main.c: 20: Init_lcd();
  1003  0018AC  EC14  F014         	call	_Init_lcd	;wreg free
  1004                           
  1005                           ;main.c: 21: LcdCmd(12);
  1006  0018B0  0E0C               	movlw	12
  1007  0018B2  ECF7  F00D         	call	_LcdCmd
  1008                           
  1009                           ;main.c: 22: LcdCmd(40);
  1010  0018B6  0E28               	movlw	40
  1011  0018B8  ECF7  F00D         	call	_LcdCmd
  1012                           
  1013                           ;main.c: 24: Init_adxl345(-5, -3, 1, 0b11, 0b00001010);
  1014  0018BC  0EFD               	movlw	253
  1015  0018BE  6E0A               	movwf	Init_adxl345@y_offset,c
  1016  0018C0  0E01               	movlw	1
  1017  0018C2  6E0B               	movwf	Init_adxl345@z_offset,c
  1018  0018C4  0E03               	movlw	3
  1019  0018C6  6E0C               	movwf	Init_adxl345@range,c
  1020  0018C8  0E0A               	movlw	10
  1021  0018CA  6E0D               	movwf	Init_adxl345@data_rate,c
  1022  0018CC  0EFB               	movlw	251
  1023  0018CE  ECD7  F00F         	call	_Init_adxl345
  1024  0018D2                     l3227:
  1025                           
  1026                           ;main.c: 31: LcdText(3, 1, "       ");
  1027  0018D2  0E01               	movlw	1
  1028  0018D4  6E51               	movwf	LcdText@y,c
  1029  0018D6  0E08               	movlw	high (STR_6+6)
  1030  0018D8  6E53               	movwf	LcdText@text+1,c
  1031  0018DA  0E7D               	movlw	low (STR_6+6)
  1032  0018DC  6E52               	movwf	LcdText@text,c
  1033  0018DE  0E03               	movlw	3
  1034  0018E0  EC3A  F010         	call	_LcdText
  1035                           
  1036                           ;main.c: 32: LcdText(12, 0, "    ");
  1037  0018E4  0E00               	movlw	0
  1038  0018E6  6E51               	movwf	LcdText@y,c
  1039  0018E8  0E08               	movlw	high (STR_6+9)
  1040  0018EA  6E53               	movwf	LcdText@text+1,c
  1041  0018EC  0E80               	movlw	low (STR_6+9)
  1042  0018EE  6E52               	movwf	LcdText@text,c
  1043  0018F0  0E0C               	movlw	12
  1044  0018F2  EC3A  F010         	call	_LcdText
  1045                           
  1046                           ;main.c: 33: LcdText(3, 2, "             ");
  1047  0018F6  0E02               	movlw	2
  1048  0018F8  6E51               	movwf	LcdText@y,c
  1049  0018FA  0E08               	movlw	high STR_6
  1050  0018FC  6E53               	movwf	LcdText@text+1,c
  1051  0018FE  0E77               	movlw	low STR_6
  1052  001900  6E52               	movwf	LcdText@text,c
  1053  001902  0E03               	movlw	3
  1054  001904  EC3A  F010         	call	_LcdText
  1055                           
  1056                           ;main.c: 35: LcdText(0, 1, "X= ");
  1057  001908  0E01               	movlw	1
  1058  00190A  6E51               	movwf	LcdText@y,c
  1059  00190C  0E08               	movlw	high STR_7
  1060  00190E  6E53               	movwf	LcdText@text+1,c
  1061  001910  0E8A               	movlw	low STR_7
  1062  001912  6E52               	movwf	LcdText@text,c
  1063  001914  0E00               	movlw	0
  1064  001916  EC3A  F010         	call	_LcdText
  1065                           
  1066                           ;main.c: 36: LcdText(3, 1, getX());
  1067  00191A  0E01               	movlw	1
  1068  00191C  6E51               	movwf	LcdText@y,c
  1069  00191E  EC88  F011         	call	_getX	;wreg free
  1070  001922  C04D  F052         	movff	?_getX,LcdText@text
  1071  001926  C04E  F053         	movff	?_getX+1,LcdText@text+1
  1072  00192A  0E03               	movlw	3
  1073  00192C  EC3A  F010         	call	_LcdText
  1074                           
  1075                           ;main.c: 38: LcdText(9, 0, "Y= ");
  1076  001930  0E00               	movlw	0
  1077  001932  6E51               	movwf	LcdText@y,c
  1078  001934  0E08               	movlw	high STR_8
  1079  001936  6E53               	movwf	LcdText@text+1,c
  1080  001938  0E8E               	movlw	low STR_8
  1081  00193A  6E52               	movwf	LcdText@text,c
  1082  00193C  0E09               	movlw	9
  1083  00193E  EC3A  F010         	call	_LcdText
  1084                           
  1085                           ;main.c: 39: LcdText(11, 0, getY());
  1086  001942  0E00               	movlw	0
  1087  001944  6E51               	movwf	LcdText@y,c
  1088  001946  EC36  F011         	call	_getY	;wreg free
  1089  00194A  C04D  F052         	movff	?_getY,LcdText@text
  1090  00194E  C04E  F053         	movff	?_getY+1,LcdText@text+1
  1091  001952  0E0B               	movlw	11
  1092  001954  EC3A  F010         	call	_LcdText
  1093                           
  1094                           ;main.c: 41: LcdText(0, 2, "Z= ");
  1095  001958  0E02               	movlw	2
  1096  00195A  6E51               	movwf	LcdText@y,c
  1097  00195C  0E08               	movlw	high STR_9
  1098  00195E  6E53               	movwf	LcdText@text+1,c
  1099  001960  0E92               	movlw	low STR_9
  1100  001962  6E52               	movwf	LcdText@text,c
  1101  001964  0E00               	movlw	0
  1102  001966  EC3A  F010         	call	_LcdText
  1103                           
  1104                           ;main.c: 42: LcdText(3, 2, getZ());
  1105  00196A  0E02               	movlw	2
  1106  00196C  6E51               	movwf	LcdText@y,c
  1107  00196E  ECE4  F010         	call	_getZ	;wreg free
  1108  001972  C04D  F052         	movff	?_getZ,LcdText@text
  1109  001976  C04E  F053         	movff	?_getZ+1,LcdText@text+1
  1110  00197A  0E03               	movlw	3
  1111  00197C  EC3A  F010         	call	_LcdText
  1112                           
  1113                           ;main.c: 44: for (unsigned char i=0; i<100; i++) {
  1114  001980  0E00               	movlw	0
  1115  001982  0100               	movlb	0	; () banked
  1116  001984  6FD6               	movwf	main@i_311& (0+255),b
  1117                           
  1118                           ; BSR set to: 0
  1119  001986  0E63               	movlw	99
  1120  001988  0100               	movlb	0	; () banked
  1121  00198A  65D6               	cpfsgt	main@i_311& (0+255),b
  1122  00198C  D001               	goto	l3251
  1123  00198E  D7A1               	goto	l3227
  1124  001990                     l3251:
  1125                           
  1126                           ; BSR set to: 0
  1127                           ;main.c: 45: _delay((unsigned long)((10)*(20000000/4000.0)));
  1128  001990  0E41               	movlw	65
  1129  001992  6E5F               	movwf	??_main& (0+255),c
  1130  001994  0EEE               	movlw	238
  1131  001996                     u3747:
  1132  001996  2EE8               	decfsz	wreg,f,c
  1133  001998  D7FE               	goto	u3747
  1134  00199A  2E5F               	decfsz	??_main& (0+255),f,c
  1135  00199C  D7FC               	goto	u3747
  1136  00199E  D000               	nop2	
  1137  0019A0  0100               	movlb	0	; () banked
  1138  0019A2  2BD6               	incf	main@i_311& (0+255),f,b
  1139                           
  1140                           ; BSR set to: 0
  1141  0019A4  0E63               	movlw	99
  1142  0019A6  0100               	movlb	0	; () banked
  1143  0019A8  65D6               	cpfsgt	main@i_311& (0+255),b
  1144  0019AA  D7F2               	goto	l3251
  1145  0019AC  D792               	goto	l3227
  1146  0019AE                     __end_of_main:
  1147                           	opt stack 0
  1148                           tblptru	equ	0xFF8
  1149                           tblptrh	equ	0xFF7
  1150                           tblptrl	equ	0xFF6
  1151                           tablat	equ	0xFF5
  1152                           prodl	equ	0xFF3
  1153                           postinc0	equ	0xFEE
  1154                           wreg	equ	0xFE8
  1155                           postdec1	equ	0xFE5
  1156                           fsr1l	equ	0xFE1
  1157                           status	equ	0xFD8
  1158                           
  1159 ;; *************** function _getZ *****************
  1160 ;; Defined at:
  1161 ;;		line 143 in file "adxl345_i2c.h"
  1162 ;; Parameters:    Size  Location     Type
  1163 ;;		None
  1164 ;; Auto vars:     Size  Location     Type
  1165 ;;  z              10   35[BANK0 ] unsigned char [10]
  1166 ;;  zf              3   45[BANK0 ] float 
  1167 ;;  data            2   50[BANK0 ] unsigned char [2]
  1168 ;;  Z               2   48[BANK0 ] int 
  1169 ;; Return value:  Size  Location     Type
  1170 ;;                  2   76[COMRAM] PTR const unsigned char 
  1171 ;; Registers used:
  1172 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1173 ;; Tracked objects:
  1174 ;;		On entry : 0/0
  1175 ;;		On exit  : 0/0
  1176 ;;		Unchanged: 0/0
  1177 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1178 ;;      Params:         2       0       0       0       0       0       0       0       0
  1179 ;;      Locals:         0      17       0       0       0       0       0       0       0
  1180 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1181 ;;      Totals:         4      17       0       0       0       0       0       0       0
  1182 ;;Total ram usage:       21 bytes
  1183 ;; Hardware stack levels used:    1
  1184 ;; Hardware stack levels required when called:    4
  1185 ;; This function calls:
  1186 ;;		___awtoft
  1187 ;;		___ftmul
  1188 ;;		_adxl345Read
  1189 ;;		_sprintf
  1190 ;; This function is called by:
  1191 ;;		_main
  1192 ;; This function uses a non-reentrant model
  1193 ;;
  1194                           
  1195                           	psect	text1
  1196  0021C8                     __ptext1:
  1197                           	opt stack 0
  1198  0021C8                     _getZ:
  1199                           	opt stack 26
  1200                           
  1201                           ;adxl345_i2c.h: 144: unsigned char data[2];
  1202                           ;adxl345_i2c.h: 145: int Z;
  1203                           ;adxl345_i2c.h: 146: float zf;
  1204                           ;adxl345_i2c.h: 147: char z[10];
  1205                           ;adxl345_i2c.h: 149: data[0]=adxl345Read(0x36);
  1206                           
  1207                           ; BSR set to: 0
  1208                           ;incstack = 0
  1209  0021C8  0E00               	movlw	0
  1210  0021CA  6E05               	movwf	adxl345Read@add+1,c
  1211  0021CC  0E36               	movlw	54
  1212  0021CE  6E04               	movwf	adxl345Read@add,c
  1213  0021D0  EC90  F013         	call	_adxl345Read	;wreg free
  1214  0021D4  0100               	movlb	0	; () banked
  1215  0021D6  6FD2               	movwf	getZ@data& (0+255),b
  1216                           
  1217                           ;adxl345_i2c.h: 150: data[1]=adxl345Read(0x37);
  1218  0021D8  0E00               	movlw	0
  1219  0021DA  6E05               	movwf	adxl345Read@add+1,c
  1220  0021DC  0E37               	movlw	55
  1221  0021DE  6E04               	movwf	adxl345Read@add,c
  1222  0021E0  EC90  F013         	call	_adxl345Read	;wreg free
  1223  0021E4  0100               	movlb	0	; () banked
  1224  0021E6  6FD3               	movwf	(getZ@data+1)& (0+255),b
  1225                           
  1226                           ; BSR set to: 0
  1227                           ;adxl345_i2c.h: 152: Z=(int16_t)((((int)data[1]) << 8) | data[0]);
  1228  0021E8  0100               	movlb	0	; () banked
  1229  0021EA  51D2               	movf	getZ@data& (0+255),w,b
  1230  0021EC  0100               	movlb	0	; () banked
  1231  0021EE  C0D3  F04F         	movff	getZ@data+1,??_getZ
  1232  0021F2  6A50               	clrf	(??_getZ+1)& (0+255),c
  1233  0021F4  C04F  F050         	movff	??_getZ,??_getZ+1
  1234  0021F8  6A4F               	clrf	??_getZ,c
  1235  0021FA  104F               	iorwf	??_getZ,w,c
  1236  0021FC  0100               	movlb	0	; () banked
  1237  0021FE  6FD0               	movwf	getZ@Z& (0+255),b
  1238  002200  5050               	movf	??_getZ+1,w,c
  1239  002202  0100               	movlb	0	; () banked
  1240  002204  6FD1               	movwf	(getZ@Z+1)& (0+255),b
  1241                           
  1242                           ; BSR set to: 0
  1243                           ;adxl345_i2c.h: 154: zf = Z*9.81*0.004;
  1244  002206  C0D0  F009         	movff	getZ@Z,___awtoft@c
  1245  00220A  C0D1  F00A         	movff	getZ@Z+1,___awtoft@c+1
  1246  00220E  ECB5  F013         	call	___awtoft	;wreg free
  1247  002212  C009  F015         	movff	?___awtoft,___ftmul@f1
  1248  002216  C00A  F016         	movff	?___awtoft+1,___ftmul@f1+1
  1249  00221A  C00B  F017         	movff	?___awtoft+2,___ftmul@f1+2
  1250  00221E  0EBA               	movlw	186
  1251  002220  6E18               	movwf	___ftmul@f2,c
  1252  002222  0E20               	movlw	32
  1253  002224  6E19               	movwf	___ftmul@f2+1,c
  1254  002226  0E3D               	movlw	61
  1255  002228  6E1A               	movwf	___ftmul@f2+2,c
  1256  00222A  ECFB  F00E         	call	___ftmul	;wreg free
  1257  00222E  C015  F0CD         	movff	?___ftmul,getZ@zf
  1258  002232  C016  F0CE         	movff	?___ftmul+1,getZ@zf+1
  1259  002236  C017  F0CF         	movff	?___ftmul+2,getZ@zf+2
  1260                           
  1261                           ;adxl345_i2c.h: 156: sprintf(z,"%.2f", zf);
  1262  00223A  0100               	movlb	0	; () banked
  1263  00223C  0E00               	movlw	high getZ@z
  1264  00223E  6E41               	movwf	sprintf@sp+1,c
  1265  002240  0100               	movlb	0	; () banked
  1266  002242  0EC3               	movlw	low getZ@z
  1267  002244  6E40               	movwf	sprintf@sp,c
  1268  002246  0E08               	movlw	high STR_1
  1269  002248  6E43               	movwf	sprintf@f+1,c
  1270  00224A  0E85               	movlw	low STR_1
  1271  00224C  6E42               	movwf	sprintf@f,c
  1272  00224E  C0CD  F044         	movff	getZ@zf,?_sprintf+4
  1273  002252  C0CE  F045         	movff	getZ@zf+1,?_sprintf+5
  1274  002256  C0CF  F046         	movff	getZ@zf+2,?_sprintf+6
  1275  00225A  EC4C  F004         	call	_sprintf	;wreg free
  1276                           
  1277                           ;adxl345_i2c.h: 158: return z;
  1278  00225E  0100               	movlb	0	; () banked
  1279  002260  0E00               	movlw	high getZ@z
  1280  002262  6E4E               	movwf	?_getZ+1,c
  1281  002264  0100               	movlb	0	; () banked
  1282  002266  0EC3               	movlw	low getZ@z
  1283  002268  6E4D               	movwf	?_getZ,c
  1284                           
  1285                           ; BSR set to: 0
  1286                           
  1287                           ; BSR set to: 0
  1288  00226A  0012               	return	
  1289  00226C                     __end_of_getZ:
  1290                           	opt stack 0
  1291                           tblptru	equ	0xFF8
  1292                           tblptrh	equ	0xFF7
  1293                           tblptrl	equ	0xFF6
  1294                           tablat	equ	0xFF5
  1295                           prodl	equ	0xFF3
  1296                           postinc0	equ	0xFEE
  1297                           wreg	equ	0xFE8
  1298                           postdec1	equ	0xFE5
  1299                           fsr1l	equ	0xFE1
  1300                           status	equ	0xFD8
  1301                           
  1302 ;; *************** function _getY *****************
  1303 ;; Defined at:
  1304 ;;		line 125 in file "adxl345_i2c.h"
  1305 ;; Parameters:    Size  Location     Type
  1306 ;;		None
  1307 ;; Auto vars:     Size  Location     Type
  1308 ;;  y              10   35[BANK0 ] unsigned char [10]
  1309 ;;  yf              3   45[BANK0 ] float 
  1310 ;;  data            2   50[BANK0 ] unsigned char [2]
  1311 ;;  Y               2   48[BANK0 ] int 
  1312 ;; Return value:  Size  Location     Type
  1313 ;;                  2   76[COMRAM] PTR const unsigned char 
  1314 ;; Registers used:
  1315 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1316 ;; Tracked objects:
  1317 ;;		On entry : 0/0
  1318 ;;		On exit  : 0/0
  1319 ;;		Unchanged: 0/0
  1320 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1321 ;;      Params:         2       0       0       0       0       0       0       0       0
  1322 ;;      Locals:         0      17       0       0       0       0       0       0       0
  1323 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1324 ;;      Totals:         4      17       0       0       0       0       0       0       0
  1325 ;;Total ram usage:       21 bytes
  1326 ;; Hardware stack levels used:    1
  1327 ;; Hardware stack levels required when called:    4
  1328 ;; This function calls:
  1329 ;;		___awtoft
  1330 ;;		___ftmul
  1331 ;;		_adxl345Read
  1332 ;;		_sprintf
  1333 ;; This function is called by:
  1334 ;;		_main
  1335 ;; This function uses a non-reentrant model
  1336 ;;
  1337                           
  1338                           	psect	text2
  1339  00226C                     __ptext2:
  1340                           	opt stack 0
  1341  00226C                     _getY:
  1342                           	opt stack 26
  1343                           
  1344                           ;adxl345_i2c.h: 126: unsigned char data[2];
  1345                           ;adxl345_i2c.h: 127: int Y;
  1346                           ;adxl345_i2c.h: 128: float yf;
  1347                           ;adxl345_i2c.h: 129: char y[10];
  1348                           ;adxl345_i2c.h: 131: data[0]=adxl345Read(0x34);
  1349                           
  1350                           ; BSR set to: 0
  1351                           ;incstack = 0
  1352  00226C  0E00               	movlw	0
  1353  00226E  6E05               	movwf	adxl345Read@add+1,c
  1354  002270  0E34               	movlw	52
  1355  002272  6E04               	movwf	adxl345Read@add,c
  1356  002274  EC90  F013         	call	_adxl345Read	;wreg free
  1357  002278  0100               	movlb	0	; () banked
  1358  00227A  6FD2               	movwf	getY@data& (0+255),b
  1359                           
  1360                           ;adxl345_i2c.h: 132: data[1]=adxl345Read(0x35);
  1361  00227C  0E00               	movlw	0
  1362  00227E  6E05               	movwf	adxl345Read@add+1,c
  1363  002280  0E35               	movlw	53
  1364  002282  6E04               	movwf	adxl345Read@add,c
  1365  002284  EC90  F013         	call	_adxl345Read	;wreg free
  1366  002288  0100               	movlb	0	; () banked
  1367  00228A  6FD3               	movwf	(getY@data+1)& (0+255),b
  1368                           
  1369                           ; BSR set to: 0
  1370                           ;adxl345_i2c.h: 134: Y=(int16_t)((((int)data[1]) << 8) | data[0]);
  1371  00228C  0100               	movlb	0	; () banked
  1372  00228E  51D2               	movf	getY@data& (0+255),w,b
  1373  002290  0100               	movlb	0	; () banked
  1374  002292  C0D3  F04F         	movff	getY@data+1,??_getY
  1375  002296  6A50               	clrf	(??_getY+1)& (0+255),c
  1376  002298  C04F  F050         	movff	??_getY,??_getY+1
  1377  00229C  6A4F               	clrf	??_getY,c
  1378  00229E  104F               	iorwf	??_getY,w,c
  1379  0022A0  0100               	movlb	0	; () banked
  1380  0022A2  6FD0               	movwf	getY@Y& (0+255),b
  1381  0022A4  5050               	movf	??_getY+1,w,c
  1382  0022A6  0100               	movlb	0	; () banked
  1383  0022A8  6FD1               	movwf	(getY@Y+1)& (0+255),b
  1384                           
  1385                           ; BSR set to: 0
  1386                           ;adxl345_i2c.h: 136: yf = Y*9.81*0.004;
  1387  0022AA  C0D0  F009         	movff	getY@Y,___awtoft@c
  1388  0022AE  C0D1  F00A         	movff	getY@Y+1,___awtoft@c+1
  1389  0022B2  ECB5  F013         	call	___awtoft	;wreg free
  1390  0022B6  C009  F015         	movff	?___awtoft,___ftmul@f1
  1391  0022BA  C00A  F016         	movff	?___awtoft+1,___ftmul@f1+1
  1392  0022BE  C00B  F017         	movff	?___awtoft+2,___ftmul@f1+2
  1393  0022C2  0EBA               	movlw	186
  1394  0022C4  6E18               	movwf	___ftmul@f2,c
  1395  0022C6  0E20               	movlw	32
  1396  0022C8  6E19               	movwf	___ftmul@f2+1,c
  1397  0022CA  0E3D               	movlw	61
  1398  0022CC  6E1A               	movwf	___ftmul@f2+2,c
  1399  0022CE  ECFB  F00E         	call	___ftmul	;wreg free
  1400  0022D2  C015  F0CD         	movff	?___ftmul,getY@yf
  1401  0022D6  C016  F0CE         	movff	?___ftmul+1,getY@yf+1
  1402  0022DA  C017  F0CF         	movff	?___ftmul+2,getY@yf+2
  1403                           
  1404                           ;adxl345_i2c.h: 138: sprintf(y,"%.2f", yf);
  1405  0022DE  0100               	movlb	0	; () banked
  1406  0022E0  0E00               	movlw	high getY@y
  1407  0022E2  6E41               	movwf	sprintf@sp+1,c
  1408  0022E4  0100               	movlb	0	; () banked
  1409  0022E6  0EC3               	movlw	low getY@y
  1410  0022E8  6E40               	movwf	sprintf@sp,c
  1411  0022EA  0E08               	movlw	high STR_1
  1412  0022EC  6E43               	movwf	sprintf@f+1,c
  1413  0022EE  0E85               	movlw	low STR_1
  1414  0022F0  6E42               	movwf	sprintf@f,c
  1415  0022F2  C0CD  F044         	movff	getY@yf,?_sprintf+4
  1416  0022F6  C0CE  F045         	movff	getY@yf+1,?_sprintf+5
  1417  0022FA  C0CF  F046         	movff	getY@yf+2,?_sprintf+6
  1418  0022FE  EC4C  F004         	call	_sprintf	;wreg free
  1419                           
  1420                           ;adxl345_i2c.h: 140: return y;
  1421  002302  0100               	movlb	0	; () banked
  1422  002304  0E00               	movlw	high getY@y
  1423  002306  6E4E               	movwf	?_getY+1,c
  1424  002308  0100               	movlb	0	; () banked
  1425  00230A  0EC3               	movlw	low getY@y
  1426  00230C  6E4D               	movwf	?_getY,c
  1427                           
  1428                           ; BSR set to: 0
  1429                           
  1430                           ; BSR set to: 0
  1431  00230E  0012               	return	
  1432  002310                     __end_of_getY:
  1433                           	opt stack 0
  1434                           tblptru	equ	0xFF8
  1435                           tblptrh	equ	0xFF7
  1436                           tblptrl	equ	0xFF6
  1437                           tablat	equ	0xFF5
  1438                           prodl	equ	0xFF3
  1439                           postinc0	equ	0xFEE
  1440                           wreg	equ	0xFE8
  1441                           postdec1	equ	0xFE5
  1442                           fsr1l	equ	0xFE1
  1443                           status	equ	0xFD8
  1444                           
  1445 ;; *************** function _getX *****************
  1446 ;; Defined at:
  1447 ;;		line 107 in file "adxl345_i2c.h"
  1448 ;; Parameters:    Size  Location     Type
  1449 ;;		None
  1450 ;; Auto vars:     Size  Location     Type
  1451 ;;  x              10   35[BANK0 ] unsigned char [10]
  1452 ;;  xf              3   45[BANK0 ] float 
  1453 ;;  data            2   50[BANK0 ] unsigned char [2]
  1454 ;;  X               2   48[BANK0 ] int 
  1455 ;; Return value:  Size  Location     Type
  1456 ;;                  2   76[COMRAM] PTR const unsigned char 
  1457 ;; Registers used:
  1458 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1459 ;; Tracked objects:
  1460 ;;		On entry : 0/0
  1461 ;;		On exit  : 0/0
  1462 ;;		Unchanged: 0/0
  1463 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1464 ;;      Params:         2       0       0       0       0       0       0       0       0
  1465 ;;      Locals:         0      17       0       0       0       0       0       0       0
  1466 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1467 ;;      Totals:         4      17       0       0       0       0       0       0       0
  1468 ;;Total ram usage:       21 bytes
  1469 ;; Hardware stack levels used:    1
  1470 ;; Hardware stack levels required when called:    4
  1471 ;; This function calls:
  1472 ;;		___awtoft
  1473 ;;		___ftmul
  1474 ;;		_adxl345Read
  1475 ;;		_sprintf
  1476 ;; This function is called by:
  1477 ;;		_main
  1478 ;; This function uses a non-reentrant model
  1479 ;;
  1480                           
  1481                           	psect	text3
  1482  002310                     __ptext3:
  1483                           	opt stack 0
  1484  002310                     _getX:
  1485                           	opt stack 26
  1486                           
  1487                           ;adxl345_i2c.h: 108: unsigned char data[2];
  1488                           ;adxl345_i2c.h: 109: int X;
  1489                           ;adxl345_i2c.h: 110: float xf;
  1490                           ;adxl345_i2c.h: 111: char x[10];
  1491                           ;adxl345_i2c.h: 113: data[0]=adxl345Read(0x32);
  1492                           
  1493                           ; BSR set to: 0
  1494                           ;incstack = 0
  1495  002310  0E00               	movlw	0
  1496  002312  6E05               	movwf	adxl345Read@add+1,c
  1497  002314  0E32               	movlw	50
  1498  002316  6E04               	movwf	adxl345Read@add,c
  1499  002318  EC90  F013         	call	_adxl345Read	;wreg free
  1500  00231C  0100               	movlb	0	; () banked
  1501  00231E  6FD2               	movwf	getX@data& (0+255),b
  1502                           
  1503                           ;adxl345_i2c.h: 114: data[1]=adxl345Read(0x33);
  1504  002320  0E00               	movlw	0
  1505  002322  6E05               	movwf	adxl345Read@add+1,c
  1506  002324  0E33               	movlw	51
  1507  002326  6E04               	movwf	adxl345Read@add,c
  1508  002328  EC90  F013         	call	_adxl345Read	;wreg free
  1509  00232C  0100               	movlb	0	; () banked
  1510  00232E  6FD3               	movwf	(getX@data+1)& (0+255),b
  1511                           
  1512                           ; BSR set to: 0
  1513                           ;adxl345_i2c.h: 116: X=(int16_t)((((int)data[1]) << 8) | data[0]);
  1514  002330  0100               	movlb	0	; () banked
  1515  002332  51D2               	movf	getX@data& (0+255),w,b
  1516  002334  0100               	movlb	0	; () banked
  1517  002336  C0D3  F04F         	movff	getX@data+1,??_getX
  1518  00233A  6A50               	clrf	(??_getX+1)& (0+255),c
  1519  00233C  C04F  F050         	movff	??_getX,??_getX+1
  1520  002340  6A4F               	clrf	??_getX,c
  1521  002342  104F               	iorwf	??_getX,w,c
  1522  002344  0100               	movlb	0	; () banked
  1523  002346  6FD0               	movwf	getX@X& (0+255),b
  1524  002348  5050               	movf	??_getX+1,w,c
  1525  00234A  0100               	movlb	0	; () banked
  1526  00234C  6FD1               	movwf	(getX@X+1)& (0+255),b
  1527                           
  1528                           ; BSR set to: 0
  1529                           ;adxl345_i2c.h: 118: xf = X*9.81*0.004;
  1530  00234E  C0D0  F009         	movff	getX@X,___awtoft@c
  1531  002352  C0D1  F00A         	movff	getX@X+1,___awtoft@c+1
  1532  002356  ECB5  F013         	call	___awtoft	;wreg free
  1533  00235A  C009  F015         	movff	?___awtoft,___ftmul@f1
  1534  00235E  C00A  F016         	movff	?___awtoft+1,___ftmul@f1+1
  1535  002362  C00B  F017         	movff	?___awtoft+2,___ftmul@f1+2
  1536  002366  0EBA               	movlw	186
  1537  002368  6E18               	movwf	___ftmul@f2,c
  1538  00236A  0E20               	movlw	32
  1539  00236C  6E19               	movwf	___ftmul@f2+1,c
  1540  00236E  0E3D               	movlw	61
  1541  002370  6E1A               	movwf	___ftmul@f2+2,c
  1542  002372  ECFB  F00E         	call	___ftmul	;wreg free
  1543  002376  C015  F0CD         	movff	?___ftmul,getX@xf
  1544  00237A  C016  F0CE         	movff	?___ftmul+1,getX@xf+1
  1545  00237E  C017  F0CF         	movff	?___ftmul+2,getX@xf+2
  1546                           
  1547                           ;adxl345_i2c.h: 120: sprintf(x,"%.2f", xf);
  1548  002382  0100               	movlb	0	; () banked
  1549  002384  0E00               	movlw	high getX@x
  1550  002386  6E41               	movwf	sprintf@sp+1,c
  1551  002388  0100               	movlb	0	; () banked
  1552  00238A  0EC3               	movlw	low getX@x
  1553  00238C  6E40               	movwf	sprintf@sp,c
  1554  00238E  0E08               	movlw	high STR_1
  1555  002390  6E43               	movwf	sprintf@f+1,c
  1556  002392  0E85               	movlw	low STR_1
  1557  002394  6E42               	movwf	sprintf@f,c
  1558  002396  C0CD  F044         	movff	getX@xf,?_sprintf+4
  1559  00239A  C0CE  F045         	movff	getX@xf+1,?_sprintf+5
  1560  00239E  C0CF  F046         	movff	getX@xf+2,?_sprintf+6
  1561  0023A2  EC4C  F004         	call	_sprintf	;wreg free
  1562                           
  1563                           ;adxl345_i2c.h: 122: return x;
  1564  0023A6  0100               	movlb	0	; () banked
  1565  0023A8  0E00               	movlw	high getX@x
  1566  0023AA  6E4E               	movwf	?_getX+1,c
  1567  0023AC  0100               	movlb	0	; () banked
  1568  0023AE  0EC3               	movlw	low getX@x
  1569  0023B0  6E4D               	movwf	?_getX,c
  1570                           
  1571                           ; BSR set to: 0
  1572                           
  1573                           ; BSR set to: 0
  1574  0023B2  0012               	return	
  1575  0023B4                     __end_of_getX:
  1576                           	opt stack 0
  1577                           tblptru	equ	0xFF8
  1578                           tblptrh	equ	0xFF7
  1579                           tblptrl	equ	0xFF6
  1580                           tablat	equ	0xFF5
  1581                           prodl	equ	0xFF3
  1582                           postinc0	equ	0xFEE
  1583                           wreg	equ	0xFE8
  1584                           postdec1	equ	0xFE5
  1585                           fsr1l	equ	0xFE1
  1586                           status	equ	0xFD8
  1587                           
  1588 ;; *************** function _sprintf *****************
  1589 ;; Defined at:
  1590 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\doprnt.c"
  1591 ;; Parameters:    Size  Location     Type
  1592 ;;  sp              2   63[COMRAM] PTR unsigned char 
  1593 ;;		 -> getZ@z(10), getY@y(10), getX@x(10), 
  1594 ;;  f               2   65[COMRAM] PTR const unsigned char 
  1595 ;;		 -> STR_3(5), STR_2(5), STR_1(5), 
  1596 ;; Auto vars:     Size  Location     Type
  1597 ;;  vd              4    9[BANK0 ] unsigned long 
  1598 ;;  vd              4   13[BANK0 ] unsigned long 
  1599 ;;  _val            5   22[BANK0 ] struct .
  1600 ;;  fval            3   31[BANK0 ] struct .
  1601 ;;  integ           3   19[BANK0 ] struct .
  1602 ;;  ival            3    0        struct .
  1603 ;;  prec            2   29[BANK0 ] int 
  1604 ;;  exp             2   27[BANK0 ] int 
  1605 ;;  flag            2   17[BANK0 ] unsigned short 
  1606 ;;  ap              2    7[BANK0 ] PTR void [1]
  1607 ;;		 -> ?_sprintf(2), 
  1608 ;;  width           2    0        int 
  1609 ;;  c               1   34[BANK0 ] char 
  1610 ;;  d               1    0        unsigned char 
  1611 ;; Return value:  Size  Location     Type
  1612 ;;                  2   63[COMRAM] int 
  1613 ;; Registers used:
  1614 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1615 ;; Tracked objects:
  1616 ;;		On entry : 0/0
  1617 ;;		On exit  : 0/0
  1618 ;;		Unchanged: 0/0
  1619 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1620 ;;      Params:         7       0       0       0       0       0       0       0       0
  1621 ;;      Locals:         0      35       0       0       0       0       0       0       0
  1622 ;;      Temps:          6       0       0       0       0       0       0       0       0
  1623 ;;      Totals:        13      35       0       0       0       0       0       0       0
  1624 ;;Total ram usage:       48 bytes
  1625 ;; Hardware stack levels used:    1
  1626 ;; Hardware stack levels required when called:    3
  1627 ;; This function calls:
  1628 ;;		___awdiv
  1629 ;;		___ftadd
  1630 ;;		___ftge
  1631 ;;		___ftmul
  1632 ;;		___ftneg
  1633 ;;		___ftsub
  1634 ;;		___fttol
  1635 ;;		___lldiv
  1636 ;;		___llmod
  1637 ;;		___lltoft
  1638 ;;		___wmul
  1639 ;;		__div_to_l_
  1640 ;;		__tdiv_to_l_
  1641 ;;		_fround
  1642 ;;		_isdigit
  1643 ;;		_scale
  1644 ;; This function is called by:
  1645 ;;		_getX
  1646 ;;		_getY
  1647 ;;		_getZ
  1648 ;; This function uses a non-reentrant model
  1649 ;;
  1650                           
  1651                           	psect	text4
  1652  000898                     __ptext4:
  1653                           	opt stack 0
  1654  000898                     _sprintf:
  1655                           	opt stack 26
  1656                           
  1657                           ;doprnt.c: 494: va_list ap;
  1658                           ;doprnt.c: 499: signed char c;
  1659                           ;doprnt.c: 501: int width;
  1660                           ;doprnt.c: 504: int prec;
  1661                           ;doprnt.c: 508: unsigned short flag;
  1662                           ;doprnt.c: 515: char d;
  1663                           ;doprnt.c: 516: double fval, integ;
  1664                           ;doprnt.c: 517: int exp;
  1665                           ;doprnt.c: 518: double ival;
  1666                           ;doprnt.c: 519: union {
  1667                           ;doprnt.c: 520: unsigned long _val;
  1668                           ;doprnt.c: 521: struct {
  1669                           ;doprnt.c: 522: const char * _cp;
  1670                           ;doprnt.c: 523: unsigned _len;
  1671                           ;doprnt.c: 524: } _str;
  1672                           ;doprnt.c: 525: } _val;
  1673                           ;doprnt.c: 542: *ap = __va_start();
  1674                           
  1675                           ; BSR set to: 0
  1676                           ;incstack = 0
  1677  000898  0E00               	movlw	high (?_sprintf+4)
  1678  00089A  0100               	movlb	0	; () banked
  1679  00089C  6FA8               	movwf	(sprintf@ap+1)& (0+255),b
  1680  00089E  0E44               	movlw	low (?_sprintf+4)
  1681  0008A0  0100               	movlb	0	; () banked
  1682  0008A2  6FA7               	movwf	sprintf@ap& (0+255),b
  1683                           
  1684                           ;doprnt.c: 545: while(c = *f++) {
  1685  0008A4  D3F1               	goto	l2933
  1686  0008A6                     l2733:
  1687                           
  1688                           ; BSR set to: 0
  1689                           ;doprnt.c: 547: if(c != '%')
  1690  0008A6  0100               	movlb	0	; () banked
  1691  0008A8  51C2               	movf	sprintf@c& (0+255),w,b
  1692  0008AA  0A25               	xorlw	37
  1693  0008AC  B4D8               	btfsc	status,2,c
  1694  0008AE  D008               	goto	l2739
  1695                           
  1696                           ; BSR set to: 0
  1697                           ;doprnt.c: 549: {
  1698                           ;doprnt.c: 550: ((*sp++ = (c)));
  1699  0008B0  C040  FFD9         	movff	sprintf@sp,fsr2l
  1700  0008B4  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  1701  0008B8  0100               	movlb	0	; () banked
  1702  0008BA  C0C2  FFDF         	movff	sprintf@c,indf2
  1703  0008BE  D3E2               	goto	L2
  1704  0008C0                     l2739:
  1705                           
  1706                           ; BSR set to: 0
  1707                           ;doprnt.c: 552: }
  1708                           ;doprnt.c: 557: flag = 0;
  1709  0008C0  0E00               	movlw	0
  1710  0008C2  0100               	movlb	0	; () banked
  1711  0008C4  6FB2               	movwf	(sprintf@flag+1)& (0+255),b
  1712  0008C6  0E00               	movlw	0
  1713  0008C8  0100               	movlb	0	; () banked
  1714  0008CA  6FB1               	movwf	sprintf@flag& (0+255),b
  1715                           
  1716                           ; BSR set to: 0
  1717                           ;doprnt.c: 620: if(*f == '.') {
  1718  0008CC  C042  FFF6         	movff	sprintf@f,tblptrl
  1719  0008D0  C043  FFF7         	movff	sprintf@f+1,tblptrh
  1720  0008D4                     	if	0	;tblptru may be non-zero
  1721  0008D4                     	endif
  1722  0008D4                     	if	0	;tblptru may be non-zero
  1723  0008D4                     	endif
  1724  0008D4  0008               	tblrd		*
  1725  0008D6  50F5               	movf	tablat,w,c
  1726  0008D8  0A2E               	xorlw	46
  1727  0008DA  A4D8               	btfss	status,2,c
  1728  0008DC  D033               	goto	l2753
  1729                           
  1730                           ; BSR set to: 0
  1731                           ;doprnt.c: 621: flag |= 0x4000;
  1732  0008DE  0100               	movlb	0	; () banked
  1733  0008E0  8DB2               	bsf	(sprintf@flag+1)& (0+255),6,b
  1734                           
  1735                           ;doprnt.c: 622: f++;
  1736  0008E2  4A42               	infsnz	sprintf@f,f,c
  1737  0008E4  2A43               	incf	sprintf@f+1,f,c
  1738                           
  1739                           ; BSR set to: 0
  1740                           ;doprnt.c: 629: {
  1741                           ;doprnt.c: 630: prec = 0;
  1742  0008E6  0E00               	movlw	0
  1743  0008E8  0100               	movlb	0	; () banked
  1744  0008EA  6FBE               	movwf	(sprintf@prec+1)& (0+255),b
  1745  0008EC  0E00               	movlw	0
  1746  0008EE  0100               	movlb	0	; () banked
  1747  0008F0  6FBD               	movwf	sprintf@prec& (0+255),b
  1748                           
  1749                           ;doprnt.c: 631: while(isdigit((unsigned)*f))
  1750  0008F2  D01D               	goto	l2751
  1751  0008F4                     l2747:
  1752                           
  1753                           ;doprnt.c: 632: prec = prec*10 + *f++ - '0';
  1754  0008F4  C0BD  F00F         	movff	sprintf@prec,___wmul@multiplier
  1755  0008F8  C0BE  F010         	movff	sprintf@prec+1,___wmul@multiplier+1
  1756  0008FC  0E00               	movlw	0
  1757  0008FE  6E12               	movwf	___wmul@multiplicand+1,c
  1758  000900  0E0A               	movlw	10
  1759  000902  6E11               	movwf	___wmul@multiplicand,c
  1760  000904  EC89  F014         	call	___wmul	;wreg free
  1761  000908  C042  FFF6         	movff	sprintf@f,tblptrl
  1762  00090C  C043  FFF7         	movff	sprintf@f+1,tblptrh
  1763  000910                     	if	0	;tblptru may be non-zero
  1764  000910                     	endif
  1765  000910                     	if	0	;tblptru may be non-zero
  1766  000910                     	endif
  1767  000910  0008               	tblrd		*
  1768  000912  50F5               	movf	tablat,w,c
  1769  000914  260F               	addwf	?___wmul,f,c
  1770  000916  0E00               	movlw	0
  1771  000918  2210               	addwfc	?___wmul+1,f,c
  1772  00091A  0ED0               	movlw	208
  1773  00091C  240F               	addwf	?___wmul,w,c
  1774  00091E  0100               	movlb	0	; () banked
  1775  000920  6FBD               	movwf	sprintf@prec& (0+255),b
  1776  000922  0EFF               	movlw	255
  1777  000924  2010               	addwfc	?___wmul+1,w,c
  1778  000926  0100               	movlb	0	; () banked
  1779  000928  6FBE               	movwf	(sprintf@prec+1)& (0+255),b
  1780                           
  1781                           ; BSR set to: 0
  1782  00092A  4A42               	infsnz	sprintf@f,f,c
  1783  00092C  2A43               	incf	sprintf@f+1,f,c
  1784  00092E                     l2751:
  1785                           
  1786                           ; BSR set to: 0
  1787  00092E  C042  FFF6         	movff	sprintf@f,tblptrl
  1788  000932  C043  FFF7         	movff	sprintf@f+1,tblptrh
  1789  000936                     	if	0	;tblptru may be non-zero
  1790  000936                     	endif
  1791  000936                     	if	0	;tblptru may be non-zero
  1792  000936                     	endif
  1793  000936  0008               	tblrd		*
  1794  000938  50F5               	movf	tablat,w,c
  1795  00093A  ECAF  F014         	call	_isdigit
  1796  00093E  A0D8               	btfss	status,0,c
  1797  000940  D00D               	goto	l2761
  1798  000942  D7D8               	goto	l2747
  1799  000944                     l2753:
  1800                           
  1801                           ;doprnt.c: 635: prec = 0;
  1802  000944  0E00               	movlw	0
  1803  000946  0100               	movlb	0	; () banked
  1804  000948  6FBE               	movwf	(sprintf@prec+1)& (0+255),b
  1805  00094A  0E00               	movlw	0
  1806  00094C  0100               	movlb	0	; () banked
  1807  00094E  6FBD               	movwf	sprintf@prec& (0+255),b
  1808                           
  1809                           ; BSR set to: 0
  1810                           ;doprnt.c: 637: flag |= 0x1000;
  1811  000950  0100               	movlb	0	; () banked
  1812  000952  89B2               	bsf	(sprintf@flag+1)& (0+255),4,b
  1813  000954  D003               	goto	l2761
  1814  000956                     l2757:
  1815                           
  1816                           ; BSR set to: 0
  1817                           ;doprnt.c: 672: flag |= 0x400;
  1818  000956  0100               	movlb	0	; () banked
  1819  000958  85B2               	bsf	(sprintf@flag+1)& (0+255),2,b
  1820                           
  1821                           ;doprnt.c: 673: break;
  1822  00095A  D013               	goto	l2763
  1823  00095C                     l2761:
  1824  00095C  C042  FFF6         	movff	sprintf@f,tblptrl
  1825  000960  C043  FFF7         	movff	sprintf@f+1,tblptrh
  1826  000964  4A42               	infsnz	sprintf@f,f,c
  1827  000966  2A43               	incf	sprintf@f+1,f,c
  1828  000968                     	if	0	;tblptru may be non-zero
  1829  000968                     	endif
  1830  000968                     	if	0	;tblptru may be non-zero
  1831  000968                     	endif
  1832  000968  0008               	tblrd		*
  1833  00096A  0100               	movlb	0	; () banked
  1834  00096C  CFF5 F0C2          	movff	tablat,sprintf@c
  1835  000970  0100               	movlb	0	; () banked
  1836  000972  51C2               	movf	sprintf@c& (0+255),w,b
  1837                           
  1838                           ; Switch size 1, requested type "space"
  1839                           ; Number of cases is 2, Range of values is 0 to 102
  1840                           ; switch strategies available:
  1841                           ; Name         Instructions Cycles
  1842                           ; simple_byte            7     4 (average)
  1843                           ;	Chosen strategy is simple_byte
  1844  000974  0A00               	xorlw	0	; case 0
  1845  000976  B4D8               	btfsc	status,2,c
  1846  000978  D394               	goto	l2935
  1847  00097A  0A66               	xorlw	102	; case 102
  1848  00097C  B4D8               	btfsc	status,2,c
  1849  00097E  D7EB               	goto	l2757
  1850  000980  D383               	goto	l2933
  1851  000982                     l2763:
  1852                           
  1853                           ; BSR set to: 0
  1854                           ;doprnt.c: 834: if(flag & (0x700)) {
  1855  000982  0E07               	movlw	7
  1856  000984  0100               	movlb	0	; () banked
  1857  000986  15B2               	andwf	(sprintf@flag+1)& (0+255),w,b
  1858  000988  B4D8               	btfsc	status,2,c
  1859  00098A  D331               	goto	l2913
  1860                           
  1861                           ; BSR set to: 0
  1862                           ;doprnt.c: 836: if(flag & 0x1000)
  1863  00098C  0100               	movlb	0	; () banked
  1864  00098E  A9B2               	btfss	(sprintf@flag+1)& (0+255),4,b
  1865  000990  D006               	goto	l2769
  1866                           
  1867                           ; BSR set to: 0
  1868                           ;doprnt.c: 838: prec = 6;
  1869  000992  0E00               	movlw	0
  1870  000994  0100               	movlb	0	; () banked
  1871  000996  6FBE               	movwf	(sprintf@prec+1)& (0+255),b
  1872  000998  0E06               	movlw	6
  1873  00099A  0100               	movlb	0	; () banked
  1874  00099C  6FBD               	movwf	sprintf@prec& (0+255),b
  1875  00099E                     l2769:
  1876                           
  1877                           ; BSR set to: 0
  1878                           ;doprnt.c: 839: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  1879  00099E  C0A7  FFD9         	movff	sprintf@ap,fsr2l
  1880  0009A2  C0A8  FFDA         	movff	sprintf@ap+1,fsr2h
  1881  0009A6  0100               	movlb	0	; () banked
  1882  0009A8  CFDE F0BF          	movff	postinc2,sprintf@fval
  1883  0009AC  0100               	movlb	0	; () banked
  1884  0009AE  CFDE F0C0          	movff	postinc2,sprintf@fval+1
  1885  0009B2  0100               	movlb	0	; () banked
  1886  0009B4  CFDD F0C1          	movff	postdec2,sprintf@fval+2
  1887                           
  1888                           ; BSR set to: 0
  1889  0009B8  0E03               	movlw	3
  1890  0009BA  0100               	movlb	0	; () banked
  1891  0009BC  27A7               	addwf	sprintf@ap& (0+255),f,b
  1892  0009BE  0E00               	movlw	0
  1893  0009C0  0100               	movlb	0	; () banked
  1894  0009C2  23A8               	addwfc	(sprintf@ap+1)& (0+255),f,b
  1895                           
  1896                           ; BSR set to: 0
  1897                           ;doprnt.c: 840: if(fval < 0.0) {
  1898  0009C4  0100               	movlb	0	; () banked
  1899  0009C6  51C1               	movf	(sprintf@fval+2)& (0+255),w,b
  1900  0009C8  0A80               	xorlw	128
  1901  0009CA  0F80               	addlw	128
  1902  0009CC  E107               	bnz	u3035
  1903  0009CE  0E00               	movlw	0
  1904  0009D0  0100               	movlb	0	; () banked
  1905  0009D2  5DC0               	subwf	(sprintf@fval+1)& (0+255),w,b
  1906  0009D4  E103               	bnz	u3035
  1907  0009D6  0E00               	movlw	0
  1908  0009D8  0100               	movlb	0	; () banked
  1909  0009DA  5DBF               	subwf	sprintf@fval& (0+255),w,b
  1910  0009DC                     u3035:
  1911  0009DC  B0D8               	btfsc	status,0,c
  1912  0009DE  D011               	goto	l2779
  1913                           
  1914                           ; BSR set to: 0
  1915                           ;doprnt.c: 841: fval = -fval;
  1916  0009E0  C0BF  F001         	movff	sprintf@fval,___ftneg@f1
  1917  0009E4  C0C0  F002         	movff	sprintf@fval+1,___ftneg@f1+1
  1918  0009E8  C0C1  F003         	movff	sprintf@fval+2,___ftneg@f1+2
  1919  0009EC  EC9C  F014         	call	___ftneg	;wreg free
  1920  0009F0  C001  F0BF         	movff	?___ftneg,sprintf@fval
  1921  0009F4  C002  F0C0         	movff	?___ftneg+1,sprintf@fval+1
  1922  0009F8  C003  F0C1         	movff	?___ftneg+2,sprintf@fval+2
  1923                           
  1924                           ;doprnt.c: 842: flag |= 0x03;
  1925  0009FC  0E03               	movlw	3
  1926  0009FE  0100               	movlb	0	; () banked
  1927  000A00  13B1               	iorwf	sprintf@flag& (0+255),f,b
  1928  000A02                     l2779:
  1929                           
  1930                           ; BSR set to: 0
  1931                           ;doprnt.c: 843: }
  1932                           ;doprnt.c: 844: exp = 0;
  1933  000A02  0E00               	movlw	0
  1934  000A04  0100               	movlb	0	; () banked
  1935  000A06  6FBC               	movwf	(sprintf@exp+1)& (0+255),b
  1936  000A08  0E00               	movlw	0
  1937  000A0A  0100               	movlb	0	; () banked
  1938  000A0C  6FBB               	movwf	sprintf@exp& (0+255),b
  1939                           
  1940                           ; BSR set to: 0
  1941                           ;doprnt.c: 845: if( fval!=0) {
  1942  000A0E  0E7F               	movlw	127
  1943  000A10  0100               	movlb	0	; () banked
  1944  000A12  15C1               	andwf	(sprintf@fval+2)& (0+255),w,b
  1945  000A14  0100               	movlb	0	; () banked
  1946  000A16  11C0               	iorwf	(sprintf@fval+1)& (0+255),w,b
  1947  000A18  0100               	movlb	0	; () banked
  1948  000A1A  11BF               	iorwf	sprintf@fval& (0+255),w,b
  1949  000A1C  B4D8               	btfsc	status,2,c
  1950  000A1E  D097               	goto	l2807
  1951                           
  1952                           ; BSR set to: 0
  1953                           ;doprnt.c: 846: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  1954  000A20  0E82               	movlw	130
  1955  000A22  6E47               	movwf	??_sprintf& (0+255),c
  1956  000A24  0EFF               	movlw	255
  1957  000A26  6E48               	movwf	(??_sprintf+1)& (0+255),c
  1958  000A28  0100               	movlb	0	; () banked
  1959  000A2A  C0BF  F049         	movff	sprintf@fval,??_sprintf+2
  1960  000A2E  0100               	movlb	0	; () banked
  1961  000A30  C0C0  F04A         	movff	sprintf@fval+1,??_sprintf+3
  1962  000A34  0100               	movlb	0	; () banked
  1963  000A36  C0C1  F04B         	movff	sprintf@fval+2,??_sprintf+4
  1964  000A3A  0100               	movlb	0	; () banked
  1965  000A3C  C0C2  F04C         	movff	sprintf@fval+3,??_sprintf+5
  1966  000A40  0E10               	movlw	16
  1967  000A42  D005               	goto	u3050
  1968  000A44                     u3055:
  1969  000A44  90D8               	bcf	status,0,c
  1970  000A46  324C               	rrcf	??_sprintf+5,f,c
  1971  000A48  324B               	rrcf	??_sprintf+4,f,c
  1972  000A4A  324A               	rrcf	??_sprintf+3,f,c
  1973  000A4C  3249               	rrcf	??_sprintf+2,f,c
  1974  000A4E                     u3050:
  1975  000A4E  2EE8               	decfsz	wreg,f,c
  1976  000A50  D7F9               	goto	u3055
  1977  000A52  5049               	movf	??_sprintf+2,w,c
  1978  000A54  2447               	addwf	??_sprintf,w,c
  1979  000A56  0100               	movlb	0	; () banked
  1980  000A58  6FBB               	movwf	sprintf@exp& (0+255),b
  1981  000A5A  0E00               	movlw	0
  1982  000A5C  2048               	addwfc	??_sprintf+1,w,c
  1983  000A5E  0100               	movlb	0	; () banked
  1984  000A60  6FBC               	movwf	(sprintf@exp+1)& (0+255),b
  1985                           
  1986                           ; BSR set to: 0
  1987                           ;doprnt.c: 847: exp--;
  1988  000A62  0100               	movlb	0	; () banked
  1989  000A64  07BB               	decf	sprintf@exp& (0+255),f,b
  1990  000A66  A0D8               	btfss	status,0,c
  1991  000A68  07BC               	decf	(sprintf@exp+1)& (0+255),f,b
  1992                           
  1993                           ; BSR set to: 0
  1994                           ;doprnt.c: 848: exp *= 3;
  1995  000A6A  C0BB  F00F         	movff	sprintf@exp,___wmul@multiplier
  1996  000A6E  C0BC  F010         	movff	sprintf@exp+1,___wmul@multiplier+1
  1997  000A72  0E00               	movlw	0
  1998  000A74  6E12               	movwf	___wmul@multiplicand+1,c
  1999  000A76  0E03               	movlw	3
  2000  000A78  6E11               	movwf	___wmul@multiplicand,c
  2001  000A7A  EC89  F014         	call	___wmul	;wreg free
  2002  000A7E  C00F  F0BB         	movff	?___wmul,sprintf@exp
  2003  000A82  C010  F0BC         	movff	?___wmul+1,sprintf@exp+1
  2004                           
  2005                           ;doprnt.c: 849: exp /= 10;
  2006  000A86  C0BB  F007         	movff	sprintf@exp,___awdiv@dividend
  2007  000A8A  C0BC  F008         	movff	sprintf@exp+1,___awdiv@dividend+1
  2008  000A8E  0E00               	movlw	0
  2009  000A90  6E0A               	movwf	___awdiv@divisor+1,c
  2010  000A92  0E0A               	movlw	10
  2011  000A94  6E09               	movwf	___awdiv@divisor,c
  2012  000A96  ECDA  F011         	call	___awdiv	;wreg free
  2013  000A9A  C007  F0BB         	movff	?___awdiv,sprintf@exp
  2014  000A9E  C008  F0BC         	movff	?___awdiv+1,sprintf@exp+1
  2015                           
  2016                           ;doprnt.c: 850: if(exp < 0)
  2017  000AA2  0100               	movlb	0	; () banked
  2018  000AA4  51BC               	movf	(sprintf@exp+1)& (0+255),w,b
  2019  000AA6  0A80               	xorlw	128
  2020  000AA8  6EF3               	movwf	prodl,c
  2021  000AAA  0E80               	movlw	128
  2022  000AAC  5CF3               	subwf	prodl,w,c
  2023  000AAE  0E00               	movlw	0
  2024  000AB0  B4D8               	btfsc	status,2,c
  2025  000AB2  5DBB               	subwf	sprintf@exp& (0+255),w,b
  2026  000AB4  B0D8               	btfsc	status,0,c
  2027  000AB6  D004               	goto	l2795
  2028                           
  2029                           ; BSR set to: 0
  2030                           ;doprnt.c: 851: exp--;
  2031  000AB8  0100               	movlb	0	; () banked
  2032  000ABA  07BB               	decf	sprintf@exp& (0+255),f,b
  2033  000ABC  A0D8               	btfss	status,0,c
  2034  000ABE  07BC               	decf	(sprintf@exp+1)& (0+255),f,b
  2035  000AC0                     l2795:
  2036                           
  2037                           ; BSR set to: 0
  2038                           ;doprnt.c: 855: integ = scale(-exp);
  2039  000AC0  0100               	movlb	0	; () banked
  2040  000AC2  51BB               	movf	sprintf@exp& (0+255),w,b
  2041  000AC4  0800               	sublw	0
  2042  000AC6  EC58  F008         	call	_scale
  2043  000ACA  C024  F0B3         	movff	?_scale,sprintf@integ
  2044  000ACE  C025  F0B4         	movff	?_scale+1,sprintf@integ+1
  2045  000AD2  C026  F0B5         	movff	?_scale+2,sprintf@integ+2
  2046                           
  2047                           ;doprnt.c: 856: integ *= fval;
  2048  000AD6  C0B3  F015         	movff	sprintf@integ,___ftmul@f1
  2049  000ADA  C0B4  F016         	movff	sprintf@integ+1,___ftmul@f1+1
  2050  000ADE  C0B5  F017         	movff	sprintf@integ+2,___ftmul@f1+2
  2051  000AE2  C0BF  F018         	movff	sprintf@fval,___ftmul@f2
  2052  000AE6  C0C0  F019         	movff	sprintf@fval+1,___ftmul@f2+1
  2053  000AEA  C0C1  F01A         	movff	sprintf@fval+2,___ftmul@f2+2
  2054  000AEE  ECFB  F00E         	call	___ftmul	;wreg free
  2055  000AF2  C015  F0B3         	movff	?___ftmul,sprintf@integ
  2056  000AF6  C016  F0B4         	movff	?___ftmul+1,sprintf@integ+1
  2057  000AFA  C017  F0B5         	movff	?___ftmul+2,sprintf@integ+2
  2058                           
  2059                           ;doprnt.c: 857: if(integ < 1.0)
  2060  000AFE  C0B3  F001         	movff	sprintf@integ,___ftge@ff1
  2061  000B02  C0B4  F002         	movff	sprintf@integ+1,___ftge@ff1+1
  2062  000B06  C0B5  F003         	movff	sprintf@integ+2,___ftge@ff1+2
  2063  000B0A  0E00               	movlw	0
  2064  000B0C  6E04               	movwf	___ftge@ff2,c
  2065  000B0E  0E80               	movlw	128
  2066  000B10  6E05               	movwf	___ftge@ff2+1,c
  2067  000B12  0E3F               	movlw	63
  2068  000B14  6E06               	movwf	___ftge@ff2+2,c
  2069  000B16  EC74  F012         	call	___ftge	;wreg free
  2070  000B1A  B0D8               	btfsc	status,0,c
  2071  000B1C  D005               	goto	l2803
  2072                           
  2073                           ;doprnt.c: 858: exp--;
  2074  000B1E  0100               	movlb	0	; () banked
  2075  000B20  07BB               	decf	sprintf@exp& (0+255),f,b
  2076  000B22  A0D8               	btfss	status,0,c
  2077  000B24  07BC               	decf	(sprintf@exp+1)& (0+255),f,b
  2078  000B26  D013               	goto	l2807
  2079  000B28                     l2803:
  2080                           
  2081                           ;doprnt.c: 859: else if(integ >= 10.0)
  2082  000B28  C0B3  F001         	movff	sprintf@integ,___ftge@ff1
  2083  000B2C  C0B4  F002         	movff	sprintf@integ+1,___ftge@ff1+1
  2084  000B30  C0B5  F003         	movff	sprintf@integ+2,___ftge@ff1+2
  2085  000B34  0E00               	movlw	0
  2086  000B36  6E04               	movwf	___ftge@ff2,c
  2087  000B38  0E20               	movlw	32
  2088  000B3A  6E05               	movwf	___ftge@ff2+1,c
  2089  000B3C  0E41               	movlw	65
  2090  000B3E  6E06               	movwf	___ftge@ff2+2,c
  2091  000B40  EC74  F012         	call	___ftge	;wreg free
  2092  000B44  A0D8               	btfss	status,0,c
  2093  000B46  D003               	goto	l2807
  2094                           
  2095                           ;doprnt.c: 860: exp++;
  2096  000B48  0100               	movlb	0	; () banked
  2097  000B4A  4BBB               	infsnz	sprintf@exp& (0+255),f,b
  2098  000B4C  2BBC               	incf	(sprintf@exp+1)& (0+255),f,b
  2099  000B4E                     l2807:
  2100                           
  2101                           ;doprnt.c: 861: }
  2102                           ;doprnt.c: 1121: if(prec <= 12)
  2103  000B4E  0100               	movlb	0	; () banked
  2104  000B50  51BE               	movf	(sprintf@prec+1)& (0+255),w,b
  2105  000B52  0A80               	xorlw	128
  2106  000B54  6EF3               	movwf	prodl,c
  2107  000B56  0E80               	movlw	128
  2108  000B58  5CF3               	subwf	prodl,w,c
  2109  000B5A  0E0D               	movlw	13
  2110  000B5C  B4D8               	btfsc	status,2,c
  2111  000B5E  5DBD               	subwf	sprintf@prec& (0+255),w,b
  2112  000B60  B0D8               	btfsc	status,0,c
  2113  000B62  D018               	goto	l2811
  2114                           
  2115                           ; BSR set to: 0
  2116                           ;doprnt.c: 1122: fval += fround(prec);
  2117  000B64  C0BF  F02E         	movff	sprintf@fval,___ftadd@f1
  2118  000B68  C0C0  F02F         	movff	sprintf@fval+1,___ftadd@f1+1
  2119  000B6C  C0C1  F030         	movff	sprintf@fval+2,___ftadd@f1+2
  2120  000B70  0100               	movlb	0	; () banked
  2121  000B72  51BD               	movf	sprintf@prec& (0+255),w,b
  2122  000B74  EC3F  F00A         	call	_fround
  2123  000B78  C024  F031         	movff	?_fround,___ftadd@f2
  2124  000B7C  C025  F032         	movff	?_fround+1,___ftadd@f2+1
  2125  000B80  C026  F033         	movff	?_fround+2,___ftadd@f2+2
  2126  000B84  EC5C  F00B         	call	___ftadd	;wreg free
  2127  000B88  C02E  F0BF         	movff	?___ftadd,sprintf@fval
  2128  000B8C  C02F  F0C0         	movff	?___ftadd+1,sprintf@fval+1
  2129  000B90  C030  F0C1         	movff	?___ftadd+2,sprintf@fval+2
  2130  000B94                     l2811:
  2131                           
  2132                           ;doprnt.c: 1125: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  2133  000B94  0100               	movlb	0	; () banked
  2134  000B96  51BC               	movf	(sprintf@exp+1)& (0+255),w,b
  2135  000B98  0A80               	xorlw	128
  2136  000B9A  6EF3               	movwf	prodl,c
  2137  000B9C  0E80               	movlw	128
  2138  000B9E  5CF3               	subwf	prodl,w,c
  2139  000BA0  0E0A               	movlw	10
  2140  000BA2  B4D8               	btfsc	status,2,c
  2141  000BA4  5DBB               	subwf	sprintf@exp& (0+255),w,b
  2142  000BA6  B0D8               	btfsc	status,0,c
  2143  000BA8  D028               	goto	l2819
  2144                           
  2145                           ; BSR set to: 0
  2146  000BAA  0E7F               	movlw	127
  2147  000BAC  0100               	movlb	0	; () banked
  2148  000BAE  15C1               	andwf	(sprintf@fval+2)& (0+255),w,b
  2149  000BB0  0100               	movlb	0	; () banked
  2150  000BB2  11C0               	iorwf	(sprintf@fval+1)& (0+255),w,b
  2151  000BB4  0100               	movlb	0	; () banked
  2152  000BB6  11BF               	iorwf	sprintf@fval& (0+255),w,b
  2153  000BB8  B4D8               	btfsc	status,2,c
  2154  000BBA  D06B               	goto	l2835
  2155                           
  2156                           ; BSR set to: 0
  2157  000BBC  C0BF  F02B         	movff	sprintf@fval,___fttol@f1
  2158  000BC0  C0C0  F02C         	movff	sprintf@fval+1,___fttol@f1+1
  2159  000BC4  C0C1  F02D         	movff	sprintf@fval+2,___fttol@f1+2
  2160  000BC8  EC6D  F00F         	call	___fttol	;wreg free
  2161  000BCC  C02B  F047         	movff	?___fttol,??_sprintf
  2162  000BD0  C02C  F048         	movff	?___fttol+1,??_sprintf+1
  2163  000BD4  C02D  F049         	movff	?___fttol+2,??_sprintf+2
  2164  000BD8  C02E  F04A         	movff	?___fttol+3,??_sprintf+3
  2165  000BDC  504A               	movf	??_sprintf+3,w,c
  2166  000BDE  1047               	iorwf	??_sprintf,w,c
  2167  000BE0  1048               	iorwf	??_sprintf+1,w,c
  2168  000BE2  1049               	iorwf	??_sprintf+2,w,c
  2169  000BE4  A4D8               	btfss	status,2,c
  2170  000BE6  D055               	goto	l2835
  2171  000BE8  0100               	movlb	0	; () banked
  2172  000BEA  51BC               	movf	(sprintf@exp+1)& (0+255),w,b
  2173  000BEC  0A80               	xorlw	128
  2174  000BEE  0F80               	addlw	-128
  2175  000BF0  0E02               	movlw	2
  2176  000BF2  B4D8               	btfsc	status,2,c
  2177  000BF4  5DBB               	subwf	sprintf@exp& (0+255),w,b
  2178  000BF6  A0D8               	btfss	status,0,c
  2179  000BF8  D04C               	goto	l2835
  2180  000BFA                     l2819:
  2181                           
  2182                           ; BSR set to: 0
  2183                           ;doprnt.c: 1129: if(integ < 4.294967296){
  2184  000BFA  C0B3  F001         	movff	sprintf@integ,___ftge@ff1
  2185  000BFE  C0B4  F002         	movff	sprintf@integ+1,___ftge@ff1+1
  2186  000C02  C0B5  F003         	movff	sprintf@integ+2,___ftge@ff1+2
  2187  000C06  0E70               	movlw	112
  2188  000C08  6E04               	movwf	___ftge@ff2,c
  2189  000C0A  0E89               	movlw	137
  2190  000C0C  6E05               	movwf	___ftge@ff2+1,c
  2191  000C0E  0E40               	movlw	64
  2192  000C10  6E06               	movwf	___ftge@ff2+2,c
  2193  000C12  EC74  F012         	call	___ftge	;wreg free
  2194  000C16  B0D8               	btfsc	status,0,c
  2195  000C18  D003               	goto	l2823
  2196                           
  2197                           ;doprnt.c: 1130: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  2198  000C1A  0100               	movlb	0	; () banked
  2199  000C1C  0EF7               	movlw	247
  2200  000C1E  D002               	goto	L3
  2201  000C20                     l2823:
  2202                           
  2203                           ;doprnt.c: 1132: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  2204  000C20  0100               	movlb	0	; () banked
  2205  000C22  0EF8               	movlw	248
  2206  000C24                     L3:
  2207  000C24  0100               	movlb	0	; () banked
  2208  000C26  27BB               	addwf	sprintf@exp& (0+255),f,b
  2209  000C28  0EFF               	movlw	255
  2210  000C2A  0100               	movlb	0	; () banked
  2211  000C2C  23BC               	addwfc	(sprintf@exp+1)& (0+255),f,b
  2212                           
  2213                           ; BSR set to: 0
  2214                           ;doprnt.c: 1133: }
  2215                           ;doprnt.c: 1134: integ = scale(exp);
  2216                           
  2217                           ; BSR set to: 0
  2218  000C2E  0100               	movlb	0	; () banked
  2219  000C30  51BB               	movf	sprintf@exp& (0+255),w,b
  2220  000C32  EC58  F008         	call	_scale
  2221  000C36  C024  F0B3         	movff	?_scale,sprintf@integ
  2222  000C3A  C025  F0B4         	movff	?_scale+1,sprintf@integ+1
  2223  000C3E  C026  F0B5         	movff	?_scale+2,sprintf@integ+2
  2224                           
  2225                           ;doprnt.c: 1135: _val._val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,integ) : _div_to_l
      +                          _(fval,integ));
  2226  000C42  C0BF  F001         	movff	sprintf@fval,__tdiv_to_l_@f1
  2227  000C46  C0C0  F002         	movff	sprintf@fval+1,__tdiv_to_l_@f1+1
  2228  000C4A  C0C1  F003         	movff	sprintf@fval+2,__tdiv_to_l_@f1+2
  2229  000C4E  C0B3  F004         	movff	sprintf@integ,__tdiv_to_l_@f2
  2230  000C52  C0B4  F005         	movff	sprintf@integ+1,__tdiv_to_l_@f2+1
  2231  000C56  C0B5  F006         	movff	sprintf@integ+2,__tdiv_to_l_@f2+2
  2232  000C5A  EC7B  F00E         	call	__tdiv_to_l_	;wreg free
  2233  000C5E  C001  F0A3         	movff	?__tdiv_to_l_,_sprintf$371
  2234  000C62  C002  F0A4         	movff	?__tdiv_to_l_+1,_sprintf$371+1
  2235  000C66  C003  F0A5         	movff	?__tdiv_to_l_+2,_sprintf$371+2
  2236  000C6A  C004  F0A6         	movff	?__tdiv_to_l_+3,_sprintf$371+3
  2237  000C6E  C0A3  F0B6         	movff	_sprintf$371,sprintf@_val
  2238  000C72  C0A4  F0B7         	movff	_sprintf$371+1,sprintf@_val+1
  2239  000C76  C0A5  F0B8         	movff	_sprintf$371+2,sprintf@_val+2
  2240  000C7A  C0A6  F0B9         	movff	_sprintf$371+3,sprintf@_val+3
  2241                           
  2242                           ;doprnt.c: 1138: fval = 0.0;
  2243  000C7E  0E00               	movlw	0
  2244  000C80  0100               	movlb	0	; () banked
  2245  000C82  6FBF               	movwf	sprintf@fval& (0+255),b
  2246  000C84  0E00               	movlw	0
  2247  000C86  0100               	movlb	0	; () banked
  2248  000C88  6FC0               	movwf	(sprintf@fval+1)& (0+255),b
  2249  000C8A  0E00               	movlw	0
  2250  000C8C  0100               	movlb	0	; () banked
  2251  000C8E  6FC1               	movwf	(sprintf@fval+2)& (0+255),b
  2252                           
  2253                           ;doprnt.c: 1139: } else {
  2254  000C90  D034               	goto	l2839
  2255  000C92                     l2835:
  2256                           
  2257                           ;doprnt.c: 1140: _val._val = (unsigned long)fval;
  2258  000C92  C0BF  F02B         	movff	sprintf@fval,___fttol@f1
  2259  000C96  C0C0  F02C         	movff	sprintf@fval+1,___fttol@f1+1
  2260  000C9A  C0C1  F02D         	movff	sprintf@fval+2,___fttol@f1+2
  2261  000C9E  EC6D  F00F         	call	___fttol	;wreg free
  2262  000CA2  C02B  F0B6         	movff	?___fttol,sprintf@_val
  2263  000CA6  C02C  F0B7         	movff	?___fttol+1,sprintf@_val+1
  2264  000CAA  C02D  F0B8         	movff	?___fttol+2,sprintf@_val+2
  2265  000CAE  C02E  F0B9         	movff	?___fttol+3,sprintf@_val+3
  2266                           
  2267                           ;doprnt.c: 1141: fval -= (double)_val._val;
  2268  000CB2  C0BF  F03A         	movff	sprintf@fval,___ftsub@f1
  2269  000CB6  C0C0  F03B         	movff	sprintf@fval+1,___ftsub@f1+1
  2270  000CBA  C0C1  F03C         	movff	sprintf@fval+2,___ftsub@f1+2
  2271  000CBE  C0B6  F009         	movff	sprintf@_val,___lltoft@c
  2272  000CC2  C0B7  F00A         	movff	sprintf@_val+1,___lltoft@c+1
  2273  000CC6  C0B8  F00B         	movff	sprintf@_val+2,___lltoft@c+2
  2274  000CCA  C0B9  F00C         	movff	sprintf@_val+3,___lltoft@c+3
  2275  000CCE  EC62  F013         	call	___lltoft	;wreg free
  2276  000CD2  C009  F03D         	movff	?___lltoft,___ftsub@f2
  2277  000CD6  C00A  F03E         	movff	?___lltoft+1,___ftsub@f2+1
  2278  000CDA  C00B  F03F         	movff	?___lltoft+2,___ftsub@f2+2
  2279  000CDE  ECF9  F013         	call	___ftsub	;wreg free
  2280  000CE2  C03A  F0BF         	movff	?___ftsub,sprintf@fval
  2281  000CE6  C03B  F0C0         	movff	?___ftsub+1,sprintf@fval+1
  2282  000CEA  C03C  F0C1         	movff	?___ftsub+2,sprintf@fval+2
  2283                           
  2284                           ;doprnt.c: 1142: exp = 0;
  2285  000CEE  0E00               	movlw	0
  2286  000CF0  0100               	movlb	0	; () banked
  2287  000CF2  6FBC               	movwf	(sprintf@exp+1)& (0+255),b
  2288  000CF4  0E00               	movlw	0
  2289  000CF6  0100               	movlb	0	; () banked
  2290  000CF8  6FBB               	movwf	sprintf@exp& (0+255),b
  2291  000CFA                     l2839:
  2292                           
  2293                           ; BSR set to: 0
  2294                           ;doprnt.c: 1143: }
  2295                           ;doprnt.c: 1145: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  2296  000CFA  0E01               	movlw	1
  2297  000CFC  0100               	movlb	0	; () banked
  2298  000CFE  6FC2               	movwf	sprintf@c& (0+255),b
  2299  000D00                     
  2300                           ; BSR set to: 0
  2301  000D00  0100               	movlb	0	; () banked
  2302  000D02  51C2               	movf	sprintf@c& (0+255),w,b
  2303  000D04  0A0A               	xorlw	10
  2304  000D06  B4D8               	btfsc	status,2,c
  2305  000D08  D01E               	goto	l2853
  2306                           
  2307                           ; BSR set to: 0
  2308                           ;doprnt.c: 1146: if(_val._val < dpowers[c])
  2309                           
  2310                           ; BSR set to: 0
  2311                           
  2312                           ; BSR set to: 0
  2313  000D0A  0100               	movlb	0	; () banked
  2314  000D0C  51C2               	movf	sprintf@c& (0+255),w,b
  2315  000D0E  0D04               	mullw	4
  2316  000D10  0E01               	movlw	low _dpowers
  2317  000D12  24F3               	addwf	prodl,w,c
  2318  000D14  6EF6               	movwf	tblptrl,c
  2319  000D16  0E08               	movlw	high _dpowers
  2320  000D18  20F4               	addwfc	prodh,w,c
  2321  000D1A  6EF7               	movwf	tblptrh,c
  2322  000D1C                     	if	0	;There are less than 3 active tblptr bytes
  2323  000D1C                     	endif
  2324  000D1C  0009               	tblrd		*+
  2325  000D1E  50F5               	movf	tablat,w,c
  2326  000D20  0100               	movlb	0	; () banked
  2327  000D22  5DB6               	subwf	sprintf@_val& (0+255),w,b
  2328  000D24  0009               	tblrd		*+
  2329  000D26  50F5               	movf	tablat,w,c
  2330  000D28  0100               	movlb	0	; () banked
  2331  000D2A  59B7               	subwfb	(sprintf@_val+1)& (0+255),w,b
  2332  000D2C  0009               	tblrd		*+
  2333  000D2E  50F5               	movf	tablat,w,c
  2334  000D30  0100               	movlb	0	; () banked
  2335  000D32  59B8               	subwfb	(sprintf@_val+2)& (0+255),w,b
  2336  000D34  0009               	tblrd		*+
  2337  000D36  50F5               	movf	tablat,w,c
  2338  000D38  0100               	movlb	0	; () banked
  2339  000D3A  59B9               	subwfb	(sprintf@_val+3)& (0+255),w,b
  2340  000D3C  A0D8               	btfss	status,0,c
  2341  000D3E  D003               	goto	l2853
  2342                           
  2343                           ; BSR set to: 0
  2344                           
  2345                           ; BSR set to: 0
  2346                           
  2347                           ; BSR set to: 0
  2348                           ;doprnt.c: 1147: break;
  2349  000D40  0100               	movlb	0	; () banked
  2350  000D42  2BC2               	incf	sprintf@c& (0+255),f,b
  2351  000D44  D7DD               	goto	L4
  2352  000D46                     l2853:
  2353                           
  2354                           ; BSR set to: 0
  2355                           ;doprnt.c: 1184: {
  2356                           ;doprnt.c: 1197: if(flag & 0x03)
  2357  000D46  0E03               	movlw	3
  2358  000D48  0100               	movlb	0	; () banked
  2359  000D4A  15B1               	andwf	sprintf@flag& (0+255),w,b
  2360  000D4C  6E47               	movwf	??_sprintf& (0+255),c
  2361  000D4E  0E00               	movlw	0
  2362  000D50  0100               	movlb	0	; () banked
  2363  000D52  15B2               	andwf	(sprintf@flag+1)& (0+255),w,b
  2364  000D54  6E48               	movwf	(??_sprintf+1)& (0+255),c
  2365  000D56  5048               	movf	??_sprintf+1,w,c
  2366  000D58  1047               	iorwf	??_sprintf,w,c
  2367  000D5A  B4D8               	btfsc	status,2,c
  2368  000D5C  D051               	goto	l2867
  2369                           
  2370                           ; BSR set to: 0
  2371                           ;doprnt.c: 1199: ((*sp++ = ('-')));
  2372  000D5E  C040  FFD9         	movff	sprintf@sp,fsr2l
  2373  000D62  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  2374  000D66  0E2D               	movlw	45
  2375  000D68  D048               	goto	L5
  2376  000D6A                     l2859:
  2377                           
  2378                           ; BSR set to: 0
  2379                           ;doprnt.c: 1209: {
  2380                           ;doprnt.c: 1210: unsigned long vd = _val._val/dpowers[c];
  2381  000D6A  C0B6  F001         	movff	sprintf@_val,___lldiv@dividend
  2382  000D6E  C0B7  F002         	movff	sprintf@_val+1,___lldiv@dividend+1
  2383  000D72  C0B8  F003         	movff	sprintf@_val+2,___lldiv@dividend+2
  2384  000D76  C0B9  F004         	movff	sprintf@_val+3,___lldiv@dividend+3
  2385  000D7A  0100               	movlb	0	; () banked
  2386  000D7C  51C2               	movf	sprintf@c& (0+255),w,b
  2387  000D7E  0D04               	mullw	4
  2388  000D80  0E01               	movlw	low _dpowers
  2389  000D82  24F3               	addwf	prodl,w,c
  2390  000D84  6EF6               	movwf	tblptrl,c
  2391  000D86  0E08               	movlw	high _dpowers
  2392  000D88  20F4               	addwfc	prodh,w,c
  2393  000D8A  6EF7               	movwf	tblptrh,c
  2394  000D8C                     	if	0	;There are less than 3 active tblptr bytes
  2395  000D8C                     	endif
  2396  000D8C  0009               	tblrd		*+
  2397  000D8E  CFF5 F005          	movff	tablat,___lldiv@divisor
  2398  000D92  0009               	tblrd		*+
  2399  000D94  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  2400  000D98  0009               	tblrd		*+
  2401  000D9A  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  2402  000D9E  000A               	tblrd		*-
  2403  000DA0  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  2404  000DA4  ECBC  F012         	call	___lldiv	;wreg free
  2405  000DA8  C001  F0A9         	movff	?___lldiv,sprintf@vd
  2406  000DAC  C002  F0AA         	movff	?___lldiv+1,sprintf@vd+1
  2407  000DB0  C003  F0AB         	movff	?___lldiv+2,sprintf@vd+2
  2408  000DB4  C004  F0AC         	movff	?___lldiv+3,sprintf@vd+3
  2409                           
  2410                           ;doprnt.c: 1211: vd %= 10;
  2411  000DB8  C0A9  F001         	movff	sprintf@vd,___llmod@dividend
  2412  000DBC  C0AA  F002         	movff	sprintf@vd+1,___llmod@dividend+1
  2413  000DC0  C0AB  F003         	movff	sprintf@vd+2,___llmod@dividend+2
  2414  000DC4  C0AC  F004         	movff	sprintf@vd+3,___llmod@dividend+3
  2415  000DC8  0E0A               	movlw	10
  2416  000DCA  6E05               	movwf	___llmod@divisor,c
  2417  000DCC  0E00               	movlw	0
  2418  000DCE  6E06               	movwf	___llmod@divisor+1,c
  2419  000DD0  0E00               	movlw	0
  2420  000DD2  6E07               	movwf	___llmod@divisor+2,c
  2421  000DD4  0E00               	movlw	0
  2422  000DD6  6E08               	movwf	___llmod@divisor+3,c
  2423  000DD8  ECFD  F012         	call	___llmod	;wreg free
  2424  000DDC  C001  F0A9         	movff	?___llmod,sprintf@vd
  2425  000DE0  C002  F0AA         	movff	?___llmod+1,sprintf@vd+1
  2426  000DE4  C003  F0AB         	movff	?___llmod+2,sprintf@vd+2
  2427  000DE8  C004  F0AC         	movff	?___llmod+3,sprintf@vd+3
  2428                           
  2429                           ;doprnt.c: 1212: ((*sp++ = ('0' + vd)));
  2430  000DEC  0100               	movlb	0	; () banked
  2431  000DEE  51A9               	movf	sprintf@vd& (0+255),w,b
  2432  000DF0  0F30               	addlw	48
  2433  000DF2  C040  FFD9         	movff	sprintf@sp,fsr2l
  2434  000DF6  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  2435  000DFA                     L5:
  2436  000DFA  6EDF               	movwf	indf2,c
  2437                           
  2438                           ; BSR set to: 0
  2439  000DFC  4A40               	infsnz	sprintf@sp,f,c
  2440  000DFE  2A41               	incf	sprintf@sp+1,f,c
  2441  000E00                     l2867:
  2442                           
  2443                           ; BSR set to: 0
  2444  000E00  0100               	movlb	0	; () banked
  2445  000E02  07C2               	decf	sprintf@c& (0+255),f,b
  2446  000E04  0100               	movlb	0	; () banked
  2447  000E06  29C2               	incf	sprintf@c& (0+255),w,b
  2448  000E08  B4D8               	btfsc	status,2,c
  2449  000E0A  D00D               	goto	l2875
  2450  000E0C  D7AE               	goto	l2859
  2451  000E0E                     l2869:
  2452                           
  2453                           ; BSR set to: 0
  2454                           ;doprnt.c: 1217: ((*sp++ = ('0')));
  2455  000E0E  C040  FFD9         	movff	sprintf@sp,fsr2l
  2456  000E12  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  2457  000E16  0E30               	movlw	48
  2458  000E18  6EDF               	movwf	indf2,c
  2459                           
  2460                           ; BSR set to: 0
  2461  000E1A  4A40               	infsnz	sprintf@sp,f,c
  2462  000E1C  2A41               	incf	sprintf@sp+1,f,c
  2463                           
  2464                           ; BSR set to: 0
  2465                           ;doprnt.c: 1218: exp--;
  2466  000E1E  0100               	movlb	0	; () banked
  2467  000E20  07BB               	decf	sprintf@exp& (0+255),f,b
  2468  000E22  A0D8               	btfss	status,0,c
  2469  000E24  07BC               	decf	(sprintf@exp+1)& (0+255),f,b
  2470  000E26                     l2875:
  2471                           
  2472                           ; BSR set to: 0
  2473  000E26  0100               	movlb	0	; () banked
  2474  000E28  51BC               	movf	(sprintf@exp+1)& (0+255),w,b
  2475  000E2A  0A80               	xorlw	128
  2476  000E2C  6EF3               	movwf	prodl,c
  2477  000E2E  0E80               	movlw	128
  2478  000E30  5CF3               	subwf	prodl,w,c
  2479  000E32  0E01               	movlw	1
  2480  000E34  B4D8               	btfsc	status,2,c
  2481  000E36  5DBB               	subwf	sprintf@exp& (0+255),w,b
  2482  000E38  B0D8               	btfsc	status,0,c
  2483  000E3A  D7E9               	goto	l2869
  2484                           
  2485                           ; BSR set to: 0
  2486                           ;doprnt.c: 1219: }
  2487                           ;doprnt.c: 1220: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  2488                           
  2489                           ; BSR set to: 0
  2490  000E3C  0100               	movlb	0	; () banked
  2491  000E3E  51BE               	movf	(sprintf@prec+1)& (0+255),w,b
  2492  000E40  0A80               	xorlw	128
  2493  000E42  0F80               	addlw	-128
  2494  000E44  0E09               	movlw	9
  2495  000E46  B4D8               	btfsc	status,2,c
  2496  000E48  5DBD               	subwf	sprintf@prec& (0+255),w,b
  2497  000E4A  A0D8               	btfss	status,0,c
  2498  000E4C  D004               	goto	l215
  2499                           
  2500                           ; BSR set to: 0
  2501                           ;doprnt.c: 1221: c = (sizeof dpowers/sizeof dpowers[0])-2;
  2502  000E4E  0E08               	movlw	8
  2503  000E50  0100               	movlb	0	; () banked
  2504  000E52  6FC2               	movwf	sprintf@c& (0+255),b
  2505  000E54  D002               	goto	l2881
  2506  000E56                     l215:
  2507                           
  2508                           ; BSR set to: 0
  2509                           ;doprnt.c: 1222: else
  2510                           ;doprnt.c: 1223: c = prec;
  2511  000E56  C0BD  F0C2         	movff	sprintf@prec,sprintf@c
  2512  000E5A                     l2881:
  2513                           
  2514                           ; BSR set to: 0
  2515                           ;doprnt.c: 1224: prec -= c;
  2516  000E5A  0100               	movlb	0	; () banked
  2517  000E5C  51C2               	movf	sprintf@c& (0+255),w,b
  2518  000E5E  0100               	movlb	0	; () banked
  2519  000E60  5FBD               	subwf	sprintf@prec& (0+255),f,b
  2520  000E62  0E00               	movlw	0
  2521  000E64  0100               	movlb	0	; () banked
  2522  000E66  BFC2               	btfsc	sprintf@c& (0+255),7,b
  2523  000E68  0EFF               	movlw	255
  2524  000E6A  0100               	movlb	0	; () banked
  2525  000E6C  5BBE               	subwfb	(sprintf@prec+1)& (0+255),f,b
  2526                           
  2527                           ; BSR set to: 0
  2528                           ;doprnt.c: 1228: if(c)
  2529  000E6E  0100               	movlb	0	; () banked
  2530  000E70  51C2               	movf	sprintf@c& (0+255),w,b
  2531  000E72  B4D8               	btfsc	status,2,c
  2532  000E74  D008               	goto	l2889
  2533                           
  2534                           ; BSR set to: 0
  2535                           ;doprnt.c: 1230: ((*sp++ = ('.')));
  2536  000E76  C040  FFD9         	movff	sprintf@sp,fsr2l
  2537  000E7A  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  2538  000E7E  0E2E               	movlw	46
  2539  000E80  6EDF               	movwf	indf2,c
  2540                           
  2541                           ; BSR set to: 0
  2542  000E82  4A40               	infsnz	sprintf@sp,f,c
  2543  000E84  2A41               	incf	sprintf@sp+1,f,c
  2544  000E86                     l2889:
  2545                           
  2546                           ; BSR set to: 0
  2547                           ;doprnt.c: 1236: _val._val = (long)(fval * scale(c));
  2548  000E86  0100               	movlb	0	; () banked
  2549  000E88  51C2               	movf	sprintf@c& (0+255),w,b
  2550  000E8A  EC58  F008         	call	_scale
  2551  000E8E  C024  F0A0         	movff	?_scale,_sprintf$1422
  2552  000E92  C025  F0A1         	movff	?_scale+1,_sprintf$1422+1
  2553  000E96  C026  F0A2         	movff	?_scale+2,_sprintf$1422+2
  2554                           
  2555                           ;doprnt.c: 1236: _val._val = (long)(fval * scale(c));
  2556  000E9A  C0BF  F018         	movff	sprintf@fval,___ftmul@f2
  2557  000E9E  C0C0  F019         	movff	sprintf@fval+1,___ftmul@f2+1
  2558  000EA2  C0C1  F01A         	movff	sprintf@fval+2,___ftmul@f2+2
  2559  000EA6  C0A0  F015         	movff	_sprintf$1422,___ftmul@f1
  2560  000EAA  C0A1  F016         	movff	_sprintf$1422+1,___ftmul@f1+1
  2561  000EAE  C0A2  F017         	movff	_sprintf$1422+2,___ftmul@f1+2
  2562  000EB2  ECFB  F00E         	call	___ftmul	;wreg free
  2563  000EB6  C015  F02B         	movff	?___ftmul,___fttol@f1
  2564  000EBA  C016  F02C         	movff	?___ftmul+1,___fttol@f1+1
  2565  000EBE  C017  F02D         	movff	?___ftmul+2,___fttol@f1+2
  2566  000EC2  EC6D  F00F         	call	___fttol	;wreg free
  2567  000EC6  C02B  F0B6         	movff	?___fttol,sprintf@_val
  2568  000ECA  C02C  F0B7         	movff	?___fttol+1,sprintf@_val+1
  2569  000ECE  C02D  F0B8         	movff	?___fttol+2,sprintf@_val+2
  2570  000ED2  C02E  F0B9         	movff	?___fttol+3,sprintf@_val+3
  2571                           
  2572                           ;doprnt.c: 1237: while(c--) {
  2573  000ED6  D072               	goto	l2903
  2574  000ED8                     l2893:
  2575                           
  2576                           ;doprnt.c: 1238: unsigned long vd = _val._val/dpowers[c];
  2577  000ED8  C0B6  F001         	movff	sprintf@_val,___lldiv@dividend
  2578  000EDC  C0B7  F002         	movff	sprintf@_val+1,___lldiv@dividend+1
  2579  000EE0  C0B8  F003         	movff	sprintf@_val+2,___lldiv@dividend+2
  2580  000EE4  C0B9  F004         	movff	sprintf@_val+3,___lldiv@dividend+3
  2581  000EE8  0100               	movlb	0	; () banked
  2582  000EEA  51C2               	movf	sprintf@c& (0+255),w,b
  2583  000EEC  0D04               	mullw	4
  2584  000EEE  0E01               	movlw	low _dpowers
  2585  000EF0  24F3               	addwf	prodl,w,c
  2586  000EF2  6EF6               	movwf	tblptrl,c
  2587  000EF4  0E08               	movlw	high _dpowers
  2588  000EF6  20F4               	addwfc	prodh,w,c
  2589  000EF8  6EF7               	movwf	tblptrh,c
  2590  000EFA                     	if	0	;There are less than 3 active tblptr bytes
  2591  000EFA                     	endif
  2592  000EFA  0009               	tblrd		*+
  2593  000EFC  CFF5 F005          	movff	tablat,___lldiv@divisor
  2594  000F00  0009               	tblrd		*+
  2595  000F02  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  2596  000F06  0009               	tblrd		*+
  2597  000F08  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  2598  000F0C  000A               	tblrd		*-
  2599  000F0E  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  2600  000F12  ECBC  F012         	call	___lldiv	;wreg free
  2601  000F16  C001  F0AD         	movff	?___lldiv,sprintf@vd_373
  2602  000F1A  C002  F0AE         	movff	?___lldiv+1,sprintf@vd_373+1
  2603  000F1E  C003  F0AF         	movff	?___lldiv+2,sprintf@vd_373+2
  2604  000F22  C004  F0B0         	movff	?___lldiv+3,sprintf@vd_373+3
  2605                           
  2606                           ;doprnt.c: 1239: vd %= 10;
  2607  000F26  C0AD  F001         	movff	sprintf@vd_373,___llmod@dividend
  2608  000F2A  C0AE  F002         	movff	sprintf@vd_373+1,___llmod@dividend+1
  2609  000F2E  C0AF  F003         	movff	sprintf@vd_373+2,___llmod@dividend+2
  2610  000F32  C0B0  F004         	movff	sprintf@vd_373+3,___llmod@dividend+3
  2611  000F36  0E0A               	movlw	10
  2612  000F38  6E05               	movwf	___llmod@divisor,c
  2613  000F3A  0E00               	movlw	0
  2614  000F3C  6E06               	movwf	___llmod@divisor+1,c
  2615  000F3E  0E00               	movlw	0
  2616  000F40  6E07               	movwf	___llmod@divisor+2,c
  2617  000F42  0E00               	movlw	0
  2618  000F44  6E08               	movwf	___llmod@divisor+3,c
  2619  000F46  ECFD  F012         	call	___llmod	;wreg free
  2620  000F4A  C001  F0AD         	movff	?___llmod,sprintf@vd_373
  2621  000F4E  C002  F0AE         	movff	?___llmod+1,sprintf@vd_373+1
  2622  000F52  C003  F0AF         	movff	?___llmod+2,sprintf@vd_373+2
  2623  000F56  C004  F0B0         	movff	?___llmod+3,sprintf@vd_373+3
  2624                           
  2625                           ;doprnt.c: 1240: ((*sp++ = ('0' + vd)));
  2626  000F5A  0100               	movlb	0	; () banked
  2627  000F5C  51AD               	movf	sprintf@vd_373& (0+255),w,b
  2628  000F5E  0F30               	addlw	48
  2629  000F60  C040  FFD9         	movff	sprintf@sp,fsr2l
  2630  000F64  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  2631  000F68  6EDF               	movwf	indf2,c
  2632                           
  2633                           ; BSR set to: 0
  2634  000F6A  4A40               	infsnz	sprintf@sp,f,c
  2635  000F6C  2A41               	incf	sprintf@sp+1,f,c
  2636                           
  2637                           ; BSR set to: 0
  2638                           ;doprnt.c: 1241: _val._val %= dpowers[c];
  2639  000F6E  C0B6  F001         	movff	sprintf@_val,___llmod@dividend
  2640  000F72  C0B7  F002         	movff	sprintf@_val+1,___llmod@dividend+1
  2641  000F76  C0B8  F003         	movff	sprintf@_val+2,___llmod@dividend+2
  2642  000F7A  C0B9  F004         	movff	sprintf@_val+3,___llmod@dividend+3
  2643  000F7E  0100               	movlb	0	; () banked
  2644  000F80  51C2               	movf	sprintf@c& (0+255),w,b
  2645  000F82  0D04               	mullw	4
  2646  000F84  0E01               	movlw	low _dpowers
  2647  000F86  24F3               	addwf	prodl,w,c
  2648  000F88  6EF6               	movwf	tblptrl,c
  2649  000F8A  0E08               	movlw	high _dpowers
  2650  000F8C  20F4               	addwfc	prodh,w,c
  2651  000F8E  6EF7               	movwf	tblptrh,c
  2652  000F90                     	if	0	;There are less than 3 active tblptr bytes
  2653  000F90                     	endif
  2654  000F90  0009               	tblrd		*+
  2655  000F92  CFF5 F005          	movff	tablat,___llmod@divisor
  2656  000F96  0009               	tblrd		*+
  2657  000F98  CFF5 F006          	movff	tablat,___llmod@divisor+1
  2658  000F9C  0009               	tblrd		*+
  2659  000F9E  CFF5 F007          	movff	tablat,___llmod@divisor+2
  2660  000FA2  000A               	tblrd		*-
  2661  000FA4  CFF5 F008          	movff	tablat,___llmod@divisor+3
  2662  000FA8  ECFD  F012         	call	___llmod	;wreg free
  2663  000FAC  C001  F0B6         	movff	?___llmod,sprintf@_val
  2664  000FB0  C002  F0B7         	movff	?___llmod+1,sprintf@_val+1
  2665  000FB4  C003  F0B8         	movff	?___llmod+2,sprintf@_val+2
  2666  000FB8  C004  F0B9         	movff	?___llmod+3,sprintf@_val+3
  2667  000FBC                     l2903:
  2668  000FBC  0100               	movlb	0	; () banked
  2669  000FBE  07C2               	decf	sprintf@c& (0+255),f,b
  2670  000FC0  0100               	movlb	0	; () banked
  2671  000FC2  29C2               	incf	sprintf@c& (0+255),w,b
  2672  000FC4  B4D8               	btfsc	status,2,c
  2673  000FC6  D00D               	goto	l2911
  2674  000FC8  D787               	goto	l2893
  2675  000FCA                     l2905:
  2676                           
  2677                           ; BSR set to: 0
  2678                           ;doprnt.c: 1245: ((*sp++ = ('0')));
  2679  000FCA  C040  FFD9         	movff	sprintf@sp,fsr2l
  2680  000FCE  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  2681  000FD2  0E30               	movlw	48
  2682  000FD4  6EDF               	movwf	indf2,c
  2683                           
  2684                           ; BSR set to: 0
  2685  000FD6  4A40               	infsnz	sprintf@sp,f,c
  2686  000FD8  2A41               	incf	sprintf@sp+1,f,c
  2687                           
  2688                           ; BSR set to: 0
  2689                           ;doprnt.c: 1246: prec--;
  2690  000FDA  0100               	movlb	0	; () banked
  2691  000FDC  07BD               	decf	sprintf@prec& (0+255),f,b
  2692  000FDE  A0D8               	btfss	status,0,c
  2693  000FE0  07BE               	decf	(sprintf@prec+1)& (0+255),f,b
  2694  000FE2                     l2911:
  2695                           
  2696                           ; BSR set to: 0
  2697  000FE2  0100               	movlb	0	; () banked
  2698  000FE4  51BE               	movf	(sprintf@prec+1)& (0+255),w,b
  2699  000FE6  11BD               	iorwf	sprintf@prec& (0+255),w,b
  2700  000FE8  B4D8               	btfsc	status,2,c
  2701  000FEA  D04E               	goto	l2933
  2702  000FEC  D7EE               	goto	l2905
  2703  000FEE                     l2913:
  2704                           
  2705                           ; BSR set to: 0
  2706                           ;doprnt.c: 1255: }
  2707                           ;doprnt.c: 1299: if(prec == 0 && _val._val == 0)
  2708  000FEE  0100               	movlb	0	; () banked
  2709  000FF0  51BE               	movf	(sprintf@prec+1)& (0+255),w,b
  2710  000FF2  11BD               	iorwf	sprintf@prec& (0+255),w,b
  2711  000FF4  A4D8               	btfss	status,2,c
  2712  000FF6  D00A               	goto	l2919
  2713                           
  2714                           ; BSR set to: 0
  2715  000FF8  0100               	movlb	0	; () banked
  2716  000FFA  51B9               	movf	(sprintf@_val+3)& (0+255),w,b
  2717  000FFC  11B6               	iorwf	sprintf@_val& (0+255),w,b
  2718  000FFE  11B7               	iorwf	(sprintf@_val+1)& (0+255),w,b
  2719  001000  11B8               	iorwf	(sprintf@_val+2)& (0+255),w,b
  2720  001002  A4D8               	btfss	status,2,c
  2721  001004  D003               	goto	l2919
  2722                           
  2723                           ; BSR set to: 0
  2724                           ;doprnt.c: 1300: prec++;
  2725  001006  0100               	movlb	0	; () banked
  2726  001008  4BBD               	infsnz	sprintf@prec& (0+255),f,b
  2727  00100A  2BBE               	incf	(sprintf@prec+1)& (0+255),f,b
  2728  00100C                     l2919:
  2729                           
  2730                           ; BSR set to: 0
  2731                           ;doprnt.c: 1348: if(c < prec)
  2732  00100C  0E80               	movlw	128
  2733  00100E  0100               	movlb	0	; () banked
  2734  001010  BFC2               	btfsc	sprintf@c& (0+255),7,b
  2735  001012  0E7F               	movlw	127
  2736  001014  6E47               	movwf	??_sprintf& (0+255),c
  2737  001016  0100               	movlb	0	; () banked
  2738  001018  51BD               	movf	sprintf@prec& (0+255),w,b
  2739  00101A  0100               	movlb	0	; () banked
  2740  00101C  5DC2               	subwf	sprintf@c& (0+255),w,b
  2741  00101E  0100               	movlb	0	; () banked
  2742  001020  51BE               	movf	(sprintf@prec+1)& (0+255),w,b
  2743  001022  0A80               	xorlw	128
  2744  001024  5847               	subwfb	??_sprintf& (0+255),w,c
  2745  001026  B0D8               	btfsc	status,0,c
  2746  001028  D003               	goto	l2923
  2747                           
  2748                           ; BSR set to: 0
  2749                           ;doprnt.c: 1349: c = prec;
  2750  00102A  C0BD  F0C2         	movff	sprintf@prec,sprintf@c
  2751  00102E  D018               	goto	l2927
  2752  001030                     l2923:
  2753                           
  2754                           ; BSR set to: 0
  2755                           ;doprnt.c: 1350: else if(prec < c)
  2756  001030  0100               	movlb	0	; () banked
  2757  001032  51BE               	movf	(sprintf@prec+1)& (0+255),w,b
  2758  001034  0A80               	xorlw	128
  2759  001036  6E47               	movwf	??_sprintf& (0+255),c
  2760  001038  0100               	movlb	0	; () banked
  2761  00103A  51C2               	movf	sprintf@c& (0+255),w,b
  2762  00103C  0100               	movlb	0	; () banked
  2763  00103E  5DBD               	subwf	sprintf@prec& (0+255),w,b
  2764  001040  0E80               	movlw	128
  2765  001042  0100               	movlb	0	; () banked
  2766  001044  BFC2               	btfsc	sprintf@c& (0+255),7,b
  2767  001046  0E7F               	movlw	127
  2768  001048  5847               	subwfb	??_sprintf& (0+255),w,c
  2769  00104A  B0D8               	btfsc	status,0,c
  2770  00104C  D009               	goto	l2927
  2771                           
  2772                           ; BSR set to: 0
  2773                           ;doprnt.c: 1351: prec = c;
  2774  00104E  0100               	movlb	0	; () banked
  2775  001050  51C2               	movf	sprintf@c& (0+255),w,b
  2776  001052  0100               	movlb	0	; () banked
  2777  001054  6FBD               	movwf	sprintf@prec& (0+255),b
  2778  001056  0100               	movlb	0	; () banked
  2779  001058  6BBE               	clrf	(sprintf@prec+1)& (0+255),b
  2780  00105A  0100               	movlb	0	; () banked
  2781  00105C  BFBD               	btfsc	sprintf@prec& (0+255),7,b
  2782  00105E  07BE               	decf	(sprintf@prec+1)& (0+255),f,b
  2783  001060                     l2927:
  2784                           
  2785                           ; BSR set to: 0
  2786                           ;doprnt.c: 1431: {
  2787                           ;doprnt.c: 1447: if(flag & 0x03)
  2788  001060  0E03               	movlw	3
  2789  001062  0100               	movlb	0	; () banked
  2790  001064  15B1               	andwf	sprintf@flag& (0+255),w,b
  2791  001066  6E47               	movwf	??_sprintf& (0+255),c
  2792  001068  0E00               	movlw	0
  2793  00106A  0100               	movlb	0	; () banked
  2794  00106C  15B2               	andwf	(sprintf@flag+1)& (0+255),w,b
  2795  00106E  6E48               	movwf	(??_sprintf+1)& (0+255),c
  2796  001070  5048               	movf	??_sprintf+1,w,c
  2797  001072  1047               	iorwf	??_sprintf,w,c
  2798  001074  B4D8               	btfsc	status,2,c
  2799  001076  D008               	goto	l2933
  2800                           
  2801                           ; BSR set to: 0
  2802                           ;doprnt.c: 1448: ((*sp++ = ('-')));
  2803  001078  C040  FFD9         	movff	sprintf@sp,fsr2l
  2804  00107C  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  2805  001080  0E2D               	movlw	45
  2806  001082  6EDF               	movwf	indf2,c
  2807  001084                     L2:
  2808                           
  2809                           ; BSR set to: 0
  2810  001084  4A40               	infsnz	sprintf@sp,f,c
  2811  001086  2A41               	incf	sprintf@sp+1,f,c
  2812  001088                     l2933:
  2813                           
  2814                           ; BSR set to: 0
  2815  001088  C042  FFF6         	movff	sprintf@f,tblptrl
  2816  00108C  C043  FFF7         	movff	sprintf@f+1,tblptrh
  2817  001090  4A42               	infsnz	sprintf@f,f,c
  2818  001092  2A43               	incf	sprintf@f+1,f,c
  2819  001094                     	if	0	;tblptru may be non-zero
  2820  001094                     	endif
  2821  001094                     	if	0	;tblptru may be non-zero
  2822  001094                     	endif
  2823  001094  0008               	tblrd		*
  2824  001096  0100               	movlb	0	; () banked
  2825  001098  CFF5 F0C2          	movff	tablat,sprintf@c
  2826  00109C  0100               	movlb	0	; () banked
  2827  00109E  67C2               	tstfsz	sprintf@c& (0+255),b
  2828  0010A0  D402               	goto	l2733
  2829  0010A2                     l2935:
  2830                           
  2831                           ; BSR set to: 0
  2832                           ;doprnt.c: 1547: *sp = 0;
  2833  0010A2  C040  FFD9         	movff	sprintf@sp,fsr2l
  2834  0010A6  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  2835  0010AA  0E00               	movlw	0
  2836  0010AC  6EDF               	movwf	indf2,c
  2837                           
  2838                           ; BSR set to: 0
  2839                           
  2840                           ; BSR set to: 0
  2841                           ;doprnt.c: 1549: return 0;
  2842                           ;	Return value of _sprintf is never used
  2843  0010AE  0012               	return	
  2844  0010B0                     __end_of_sprintf:
  2845                           	opt stack 0
  2846                           tblptru	equ	0xFF8
  2847                           tblptrh	equ	0xFF7
  2848                           tblptrl	equ	0xFF6
  2849                           tablat	equ	0xFF5
  2850                           prodh	equ	0xFF4
  2851                           prodl	equ	0xFF3
  2852                           postinc0	equ	0xFEE
  2853                           wreg	equ	0xFE8
  2854                           postdec1	equ	0xFE5
  2855                           fsr1l	equ	0xFE1
  2856                           indf2	equ	0xFDF
  2857                           postinc2	equ	0xFDE
  2858                           postdec2	equ	0xFDD
  2859                           fsr2h	equ	0xFDA
  2860                           fsr2l	equ	0xFD9
  2861                           status	equ	0xFD8
  2862                           
  2863 ;; *************** function _scale *****************
  2864 ;; Defined at:
  2865 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\doprnt.c"
  2866 ;; Parameters:    Size  Location     Type
  2867 ;;  scl             1    wreg     char 
  2868 ;; Auto vars:     Size  Location     Type
  2869 ;;  scl             1   41[COMRAM] char 
  2870 ;; Return value:  Size  Location     Type
  2871 ;;                  3   35[COMRAM] char 
  2872 ;; Registers used:
  2873 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2874 ;; Tracked objects:
  2875 ;;		On entry : 0/0
  2876 ;;		On exit  : 0/0
  2877 ;;		Unchanged: 0/0
  2878 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2879 ;;      Params:         3       0       0       0       0       0       0       0       0
  2880 ;;      Locals:         4       0       0       0       0       0       0       0       0
  2881 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2882 ;;      Totals:         7       0       0       0       0       0       0       0       0
  2883 ;;Total ram usage:        7 bytes
  2884 ;; Hardware stack levels used:    1
  2885 ;; Hardware stack levels required when called:    2
  2886 ;; This function calls:
  2887 ;;		___awdiv
  2888 ;;		___awmod
  2889 ;;		___ftmul
  2890 ;;		___wmul
  2891 ;; This function is called by:
  2892 ;;		_sprintf
  2893 ;; This function uses a non-reentrant model
  2894 ;;
  2895                           
  2896                           	psect	text5
  2897  0010B0                     __ptext5:
  2898                           	opt stack 0
  2899  0010B0                     _scale:
  2900                           	opt stack 26
  2901                           
  2902                           ; BSR set to: 0
  2903                           ;incstack = 0
  2904                           ;scale@scl stored from wreg
  2905  0010B0  6E2A               	movwf	scale@scl,c
  2906                           
  2907                           ;doprnt.c: 428: if(scl < 0) {
  2908  0010B2  AE2A               	btfss	scale@scl,7,c
  2909  0010B4  D0EA               	goto	l2457
  2910                           
  2911                           ;doprnt.c: 429: scl = -scl;
  2912  0010B6  6C2A               	negf	scale@scl,c
  2913                           
  2914                           ;doprnt.c: 430: if(scl>=110)
  2915  0010B8  502A               	movf	scale@scl,w,c
  2916  0010BA  0A80               	xorlw	128
  2917  0010BC  0F12               	addlw	-238
  2918  0010BE  A0D8               	btfss	status,0,c
  2919  0010C0  D08B               	goto	l2447
  2920                           
  2921                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  2922  0010C2  0E00               	movlw	0
  2923  0010C4  6E12               	movwf	___wmul@multiplicand+1,c
  2924  0010C6  0E03               	movlw	3
  2925  0010C8  6E11               	movwf	___wmul@multiplicand,c
  2926  0010CA  0E00               	movlw	0
  2927  0010CC  6E0A               	movwf	___awdiv@divisor+1,c
  2928  0010CE  0E0A               	movlw	10
  2929  0010D0  6E09               	movwf	___awdiv@divisor,c
  2930  0010D2  0E00               	movlw	0
  2931  0010D4  6E04               	movwf	___awmod@divisor+1,c
  2932  0010D6  0E64               	movlw	100
  2933  0010D8  6E03               	movwf	___awmod@divisor,c
  2934  0010DA  502A               	movf	scale@scl,w,c
  2935  0010DC  6E01               	movwf	___awmod@dividend,c
  2936  0010DE  6A02               	clrf	___awmod@dividend+1,c
  2937  0010E0  BE01               	btfsc	___awmod@dividend,7,c
  2938  0010E2  0602               	decf	___awmod@dividend+1,f,c
  2939  0010E4  EC2C  F012         	call	___awmod	;wreg free
  2940  0010E8  C001  F007         	movff	?___awmod,___awdiv@dividend
  2941  0010EC  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  2942  0010F0  ECDA  F011         	call	___awdiv	;wreg free
  2943  0010F4  0E09               	movlw	9
  2944  0010F6  2407               	addwf	?___awdiv,w,c
  2945  0010F8  6E0F               	movwf	___wmul@multiplier,c
  2946  0010FA  0E00               	movlw	0
  2947  0010FC  2008               	addwfc	?___awdiv+1,w,c
  2948  0010FE  6E10               	movwf	___wmul@multiplier+1,c
  2949  001100  EC89  F014         	call	___wmul	;wreg free
  2950  001104  0E29               	movlw	low __npowers_
  2951  001106  240F               	addwf	?___wmul,w,c
  2952  001108  6EF6               	movwf	tblptrl,c
  2953  00110A  0E08               	movlw	high __npowers_
  2954  00110C  2010               	addwfc	?___wmul+1,w,c
  2955  00110E  6EF7               	movwf	tblptrh,c
  2956  001110                     	if	0	;There are less than 3 active tblptr bytes
  2957  001110                     	endif
  2958  001110  0009               	tblrd		*+
  2959  001112  CFF5 F018          	movff	tablat,___ftmul@f2
  2960  001116  0009               	tblrd		*+
  2961  001118  CFF5 F019          	movff	tablat,___ftmul@f2+1
  2962  00111C  000A               	tblrd		*-
  2963  00111E  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  2964  001122  0E00               	movlw	0
  2965  001124  6E0A               	movwf	___awdiv@divisor+1,c
  2966  001126  0E64               	movlw	100
  2967  001128  6E09               	movwf	___awdiv@divisor,c
  2968  00112A  502A               	movf	scale@scl,w,c
  2969  00112C  6E07               	movwf	___awdiv@dividend,c
  2970  00112E  6A08               	clrf	___awdiv@dividend+1,c
  2971  001130  BE07               	btfsc	___awdiv@dividend,7,c
  2972  001132  0608               	decf	___awdiv@dividend+1,f,c
  2973  001134  ECDA  F011         	call	___awdiv	;wreg free
  2974  001138  0E12               	movlw	18
  2975  00113A  2407               	addwf	?___awdiv,w,c
  2976  00113C  6E0F               	movwf	___wmul@multiplier,c
  2977  00113E  0E00               	movlw	0
  2978  001140  2008               	addwfc	?___awdiv+1,w,c
  2979  001142  6E10               	movwf	___wmul@multiplier+1,c
  2980  001144  0E00               	movlw	0
  2981  001146  6E12               	movwf	___wmul@multiplicand+1,c
  2982  001148  0E03               	movlw	3
  2983  00114A  6E11               	movwf	___wmul@multiplicand,c
  2984  00114C  EC89  F014         	call	___wmul	;wreg free
  2985  001150  0E29               	movlw	low __npowers_
  2986  001152  240F               	addwf	?___wmul,w,c
  2987  001154  6EF6               	movwf	tblptrl,c
  2988  001156  0E08               	movlw	high __npowers_
  2989  001158  2010               	addwfc	?___wmul+1,w,c
  2990  00115A  6EF7               	movwf	tblptrh,c
  2991  00115C                     	if	0	;There are less than 3 active tblptr bytes
  2992  00115C                     	endif
  2993  00115C  0009               	tblrd		*+
  2994  00115E  CFF5 F015          	movff	tablat,___ftmul@f1
  2995  001162  0009               	tblrd		*+
  2996  001164  CFF5 F016          	movff	tablat,___ftmul@f1+1
  2997  001168  000A               	tblrd		*-
  2998  00116A  CFF5 F017          	movff	tablat,___ftmul@f1+2
  2999  00116E  ECFB  F00E         	call	___ftmul	;wreg free
  3000  001172  C015  F027         	movff	?___ftmul,_scale$1421
  3001  001176  C016  F028         	movff	?___ftmul+1,_scale$1421+1
  3002  00117A  C017  F029         	movff	?___ftmul+2,_scale$1421+2
  3003                           
  3004                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  3005  00117E  C027  F015         	movff	_scale$1421,___ftmul@f1
  3006  001182  C028  F016         	movff	_scale$1421+1,___ftmul@f1+1
  3007  001186  C029  F017         	movff	_scale$1421+2,___ftmul@f1+2
  3008  00118A  0E00               	movlw	0
  3009  00118C  6E12               	movwf	___wmul@multiplicand+1,c
  3010  00118E  0E03               	movlw	3
  3011  001190  6E11               	movwf	___wmul@multiplicand,c
  3012  001192  0E00               	movlw	0
  3013  001194  6E04               	movwf	___awmod@divisor+1,c
  3014  001196  0E0A               	movlw	10
  3015  001198  6E03               	movwf	___awmod@divisor,c
  3016  00119A  502A               	movf	scale@scl,w,c
  3017  00119C  6E01               	movwf	___awmod@dividend,c
  3018  00119E  6A02               	clrf	___awmod@dividend+1,c
  3019  0011A0  BE01               	btfsc	___awmod@dividend,7,c
  3020  0011A2  0602               	decf	___awmod@dividend+1,f,c
  3021  0011A4  EC2C  F012         	call	___awmod	;wreg free
  3022  0011A8  C001  F00F         	movff	?___awmod,___wmul@multiplier
  3023  0011AC  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  3024  0011B0  EC89  F014         	call	___wmul	;wreg free
  3025  0011B4  0E29               	movlw	low __npowers_
  3026  0011B6  240F               	addwf	?___wmul,w,c
  3027  0011B8  6EF6               	movwf	tblptrl,c
  3028  0011BA  0E08               	movlw	high __npowers_
  3029  0011BC  2010               	addwfc	?___wmul+1,w,c
  3030  0011BE  6EF7               	movwf	tblptrh,c
  3031  0011C0                     	if	0	;There are less than 3 active tblptr bytes
  3032  0011C0                     	endif
  3033  0011C0  0009               	tblrd		*+
  3034  0011C2  CFF5 F018          	movff	tablat,___ftmul@f2
  3035  0011C6  0009               	tblrd		*+
  3036  0011C8  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3037  0011CC  000A               	tblrd		*-
  3038  0011CE  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3039  0011D2  ECFB  F00E         	call	___ftmul	;wreg free
  3040  0011D6  D13A               	goto	L9
  3041  0011D8                     l2447:
  3042                           
  3043                           ;doprnt.c: 432: else if(scl > 10)
  3044  0011D8  502A               	movf	scale@scl,w,c
  3045  0011DA  0A80               	xorlw	128
  3046  0011DC  0F75               	addlw	-139
  3047  0011DE  A0D8               	btfss	status,0,c
  3048  0011E0  D04D               	goto	l2453
  3049                           
  3050                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  3051  0011E2  0E00               	movlw	0
  3052  0011E4  6E0A               	movwf	___awdiv@divisor+1,c
  3053  0011E6  0E0A               	movlw	10
  3054  0011E8  6E09               	movwf	___awdiv@divisor,c
  3055  0011EA  502A               	movf	scale@scl,w,c
  3056  0011EC  6E07               	movwf	___awdiv@dividend,c
  3057  0011EE  6A08               	clrf	___awdiv@dividend+1,c
  3058  0011F0  BE07               	btfsc	___awdiv@dividend,7,c
  3059  0011F2  0608               	decf	___awdiv@dividend+1,f,c
  3060  0011F4  ECDA  F011         	call	___awdiv	;wreg free
  3061  0011F8  0E09               	movlw	9
  3062  0011FA  2407               	addwf	?___awdiv,w,c
  3063  0011FC  6E0F               	movwf	___wmul@multiplier,c
  3064  0011FE  0E00               	movlw	0
  3065  001200  2008               	addwfc	?___awdiv+1,w,c
  3066  001202  6E10               	movwf	___wmul@multiplier+1,c
  3067  001204  0E00               	movlw	0
  3068  001206  6E12               	movwf	___wmul@multiplicand+1,c
  3069  001208  0E03               	movlw	3
  3070  00120A  6E11               	movwf	___wmul@multiplicand,c
  3071  00120C  EC89  F014         	call	___wmul	;wreg free
  3072  001210  0E29               	movlw	low __npowers_
  3073  001212  240F               	addwf	?___wmul,w,c
  3074  001214  6EF6               	movwf	tblptrl,c
  3075  001216  0E08               	movlw	high __npowers_
  3076  001218  2010               	addwfc	?___wmul+1,w,c
  3077  00121A  6EF7               	movwf	tblptrh,c
  3078  00121C                     	if	0	;There are less than 3 active tblptr bytes
  3079  00121C                     	endif
  3080  00121C  0009               	tblrd		*+
  3081  00121E  CFF5 F015          	movff	tablat,___ftmul@f1
  3082  001222  0009               	tblrd		*+
  3083  001224  CFF5 F016          	movff	tablat,___ftmul@f1+1
  3084  001228  000A               	tblrd		*-
  3085  00122A  CFF5 F017          	movff	tablat,___ftmul@f1+2
  3086  00122E  0E00               	movlw	0
  3087  001230  6E12               	movwf	___wmul@multiplicand+1,c
  3088  001232  0E03               	movlw	3
  3089  001234  6E11               	movwf	___wmul@multiplicand,c
  3090  001236  0E00               	movlw	0
  3091  001238  6E04               	movwf	___awmod@divisor+1,c
  3092  00123A  0E0A               	movlw	10
  3093  00123C  6E03               	movwf	___awmod@divisor,c
  3094  00123E  502A               	movf	scale@scl,w,c
  3095  001240  6E01               	movwf	___awmod@dividend,c
  3096  001242  6A02               	clrf	___awmod@dividend+1,c
  3097  001244  BE01               	btfsc	___awmod@dividend,7,c
  3098  001246  0602               	decf	___awmod@dividend+1,f,c
  3099  001248  EC2C  F012         	call	___awmod	;wreg free
  3100  00124C  C001  F00F         	movff	?___awmod,___wmul@multiplier
  3101  001250  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  3102  001254  EC89  F014         	call	___wmul	;wreg free
  3103  001258  0E29               	movlw	low __npowers_
  3104  00125A  240F               	addwf	?___wmul,w,c
  3105  00125C  6EF6               	movwf	tblptrl,c
  3106  00125E  0E08               	movlw	high __npowers_
  3107  001260  2010               	addwfc	?___wmul+1,w,c
  3108  001262  6EF7               	movwf	tblptrh,c
  3109  001264                     	if	0	;There are less than 3 active tblptr bytes
  3110  001264                     	endif
  3111  001264  0009               	tblrd		*+
  3112  001266  CFF5 F018          	movff	tablat,___ftmul@f2
  3113  00126A  0009               	tblrd		*+
  3114  00126C  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3115  001270  000A               	tblrd		*-
  3116  001272  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3117  001276  ECFB  F00E         	call	___ftmul	;wreg free
  3118  00127A  D0E8               	goto	L9
  3119  00127C                     l2453:
  3120                           
  3121                           ;doprnt.c: 434: return _npowers_[scl];
  3122  00127C  502A               	movf	scale@scl,w,c
  3123  00127E  0D03               	mullw	3
  3124  001280  0E29               	movlw	low __npowers_
  3125  001282  24F3               	addwf	prodl,w,c
  3126  001284  6EF6               	movwf	tblptrl,c
  3127  001286  0E08               	movlw	high __npowers_
  3128  001288  D0EE               	goto	L8
  3129  00128A                     l2457:
  3130                           
  3131                           ;doprnt.c: 435: }
  3132                           ;doprnt.c: 436: if(scl>=110)
  3133  00128A  502A               	movf	scale@scl,w,c
  3134  00128C  0A80               	xorlw	128
  3135  00128E  0F12               	addlw	-238
  3136  001290  A0D8               	btfss	status,0,c
  3137  001292  D08B               	goto	l2465
  3138                           
  3139                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  3140  001294  0E00               	movlw	0
  3141  001296  6E12               	movwf	___wmul@multiplicand+1,c
  3142  001298  0E03               	movlw	3
  3143  00129A  6E11               	movwf	___wmul@multiplicand,c
  3144  00129C  0E00               	movlw	0
  3145  00129E  6E0A               	movwf	___awdiv@divisor+1,c
  3146  0012A0  0E0A               	movlw	10
  3147  0012A2  6E09               	movwf	___awdiv@divisor,c
  3148  0012A4  0E00               	movlw	0
  3149  0012A6  6E04               	movwf	___awmod@divisor+1,c
  3150  0012A8  0E64               	movlw	100
  3151  0012AA  6E03               	movwf	___awmod@divisor,c
  3152  0012AC  502A               	movf	scale@scl,w,c
  3153  0012AE  6E01               	movwf	___awmod@dividend,c
  3154  0012B0  6A02               	clrf	___awmod@dividend+1,c
  3155  0012B2  BE01               	btfsc	___awmod@dividend,7,c
  3156  0012B4  0602               	decf	___awmod@dividend+1,f,c
  3157  0012B6  EC2C  F012         	call	___awmod	;wreg free
  3158  0012BA  C001  F007         	movff	?___awmod,___awdiv@dividend
  3159  0012BE  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  3160  0012C2  ECDA  F011         	call	___awdiv	;wreg free
  3161  0012C6  0E09               	movlw	9
  3162  0012C8  2407               	addwf	?___awdiv,w,c
  3163  0012CA  6E0F               	movwf	___wmul@multiplier,c
  3164  0012CC  0E00               	movlw	0
  3165  0012CE  2008               	addwfc	?___awdiv+1,w,c
  3166  0012D0  6E10               	movwf	___wmul@multiplier+1,c
  3167  0012D2  EC89  F014         	call	___wmul	;wreg free
  3168  0012D6  0E50               	movlw	low __powers_
  3169  0012D8  240F               	addwf	?___wmul,w,c
  3170  0012DA  6EF6               	movwf	tblptrl,c
  3171  0012DC  0E08               	movlw	high __powers_
  3172  0012DE  2010               	addwfc	?___wmul+1,w,c
  3173  0012E0  6EF7               	movwf	tblptrh,c
  3174  0012E2                     	if	0	;There are less than 3 active tblptr bytes
  3175  0012E2                     	endif
  3176  0012E2  0009               	tblrd		*+
  3177  0012E4  CFF5 F018          	movff	tablat,___ftmul@f2
  3178  0012E8  0009               	tblrd		*+
  3179  0012EA  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3180  0012EE  000A               	tblrd		*-
  3181  0012F0  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3182  0012F4  0E00               	movlw	0
  3183  0012F6  6E0A               	movwf	___awdiv@divisor+1,c
  3184  0012F8  0E64               	movlw	100
  3185  0012FA  6E09               	movwf	___awdiv@divisor,c
  3186  0012FC  502A               	movf	scale@scl,w,c
  3187  0012FE  6E07               	movwf	___awdiv@dividend,c
  3188  001300  6A08               	clrf	___awdiv@dividend+1,c
  3189  001302  BE07               	btfsc	___awdiv@dividend,7,c
  3190  001304  0608               	decf	___awdiv@dividend+1,f,c
  3191  001306  ECDA  F011         	call	___awdiv	;wreg free
  3192  00130A  0E12               	movlw	18
  3193  00130C  2407               	addwf	?___awdiv,w,c
  3194  00130E  6E0F               	movwf	___wmul@multiplier,c
  3195  001310  0E00               	movlw	0
  3196  001312  2008               	addwfc	?___awdiv+1,w,c
  3197  001314  6E10               	movwf	___wmul@multiplier+1,c
  3198  001316  0E00               	movlw	0
  3199  001318  6E12               	movwf	___wmul@multiplicand+1,c
  3200  00131A  0E03               	movlw	3
  3201  00131C  6E11               	movwf	___wmul@multiplicand,c
  3202  00131E  EC89  F014         	call	___wmul	;wreg free
  3203  001322  0E50               	movlw	low __powers_
  3204  001324  240F               	addwf	?___wmul,w,c
  3205  001326  6EF6               	movwf	tblptrl,c
  3206  001328  0E08               	movlw	high __powers_
  3207  00132A  2010               	addwfc	?___wmul+1,w,c
  3208  00132C  6EF7               	movwf	tblptrh,c
  3209  00132E                     	if	0	;There are less than 3 active tblptr bytes
  3210  00132E                     	endif
  3211  00132E  0009               	tblrd		*+
  3212  001330  CFF5 F015          	movff	tablat,___ftmul@f1
  3213  001334  0009               	tblrd		*+
  3214  001336  CFF5 F016          	movff	tablat,___ftmul@f1+1
  3215  00133A  000A               	tblrd		*-
  3216  00133C  CFF5 F017          	movff	tablat,___ftmul@f1+2
  3217  001340  ECFB  F00E         	call	___ftmul	;wreg free
  3218  001344  C015  F027         	movff	?___ftmul,_scale$1421
  3219  001348  C016  F028         	movff	?___ftmul+1,_scale$1421+1
  3220  00134C  C017  F029         	movff	?___ftmul+2,_scale$1421+2
  3221                           
  3222                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  3223  001350  C027  F015         	movff	_scale$1421,___ftmul@f1
  3224  001354  C028  F016         	movff	_scale$1421+1,___ftmul@f1+1
  3225  001358  C029  F017         	movff	_scale$1421+2,___ftmul@f1+2
  3226  00135C  0E00               	movlw	0
  3227  00135E  6E12               	movwf	___wmul@multiplicand+1,c
  3228  001360  0E03               	movlw	3
  3229  001362  6E11               	movwf	___wmul@multiplicand,c
  3230  001364  0E00               	movlw	0
  3231  001366  6E04               	movwf	___awmod@divisor+1,c
  3232  001368  0E0A               	movlw	10
  3233  00136A  6E03               	movwf	___awmod@divisor,c
  3234  00136C  502A               	movf	scale@scl,w,c
  3235  00136E  6E01               	movwf	___awmod@dividend,c
  3236  001370  6A02               	clrf	___awmod@dividend+1,c
  3237  001372  BE01               	btfsc	___awmod@dividend,7,c
  3238  001374  0602               	decf	___awmod@dividend+1,f,c
  3239  001376  EC2C  F012         	call	___awmod	;wreg free
  3240  00137A  C001  F00F         	movff	?___awmod,___wmul@multiplier
  3241  00137E  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  3242  001382  EC89  F014         	call	___wmul	;wreg free
  3243  001386  0E50               	movlw	low __powers_
  3244  001388  240F               	addwf	?___wmul,w,c
  3245  00138A  6EF6               	movwf	tblptrl,c
  3246  00138C  0E08               	movlw	high __powers_
  3247  00138E  2010               	addwfc	?___wmul+1,w,c
  3248  001390  6EF7               	movwf	tblptrh,c
  3249  001392                     	if	0	;There are less than 3 active tblptr bytes
  3250  001392                     	endif
  3251  001392  0009               	tblrd		*+
  3252  001394  CFF5 F018          	movff	tablat,___ftmul@f2
  3253  001398  0009               	tblrd		*+
  3254  00139A  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3255  00139E  000A               	tblrd		*-
  3256  0013A0  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3257  0013A4  ECFB  F00E         	call	___ftmul	;wreg free
  3258  0013A8  D051               	goto	L9
  3259  0013AA                     l2465:
  3260                           
  3261                           ;doprnt.c: 438: else if(scl > 10)
  3262  0013AA  502A               	movf	scale@scl,w,c
  3263  0013AC  0A80               	xorlw	128
  3264  0013AE  0F75               	addlw	-139
  3265  0013B0  A0D8               	btfss	status,0,c
  3266  0013B2  D053               	goto	l2471
  3267                           
  3268                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  3269  0013B4  0E00               	movlw	0
  3270  0013B6  6E0A               	movwf	___awdiv@divisor+1,c
  3271  0013B8  0E0A               	movlw	10
  3272  0013BA  6E09               	movwf	___awdiv@divisor,c
  3273  0013BC  502A               	movf	scale@scl,w,c
  3274  0013BE  6E07               	movwf	___awdiv@dividend,c
  3275  0013C0  6A08               	clrf	___awdiv@dividend+1,c
  3276  0013C2  BE07               	btfsc	___awdiv@dividend,7,c
  3277  0013C4  0608               	decf	___awdiv@dividend+1,f,c
  3278  0013C6  ECDA  F011         	call	___awdiv	;wreg free
  3279  0013CA  0E09               	movlw	9
  3280  0013CC  2407               	addwf	?___awdiv,w,c
  3281  0013CE  6E0F               	movwf	___wmul@multiplier,c
  3282  0013D0  0E00               	movlw	0
  3283  0013D2  2008               	addwfc	?___awdiv+1,w,c
  3284  0013D4  6E10               	movwf	___wmul@multiplier+1,c
  3285  0013D6  0E00               	movlw	0
  3286  0013D8  6E12               	movwf	___wmul@multiplicand+1,c
  3287  0013DA  0E03               	movlw	3
  3288  0013DC  6E11               	movwf	___wmul@multiplicand,c
  3289  0013DE  EC89  F014         	call	___wmul	;wreg free
  3290  0013E2  0E50               	movlw	low __powers_
  3291  0013E4  240F               	addwf	?___wmul,w,c
  3292  0013E6  6EF6               	movwf	tblptrl,c
  3293  0013E8  0E08               	movlw	high __powers_
  3294  0013EA  2010               	addwfc	?___wmul+1,w,c
  3295  0013EC  6EF7               	movwf	tblptrh,c
  3296  0013EE                     	if	0	;There are less than 3 active tblptr bytes
  3297  0013EE                     	endif
  3298  0013EE  0009               	tblrd		*+
  3299  0013F0  CFF5 F015          	movff	tablat,___ftmul@f1
  3300  0013F4  0009               	tblrd		*+
  3301  0013F6  CFF5 F016          	movff	tablat,___ftmul@f1+1
  3302  0013FA  000A               	tblrd		*-
  3303  0013FC  CFF5 F017          	movff	tablat,___ftmul@f1+2
  3304  001400  0E00               	movlw	0
  3305  001402  6E12               	movwf	___wmul@multiplicand+1,c
  3306  001404  0E03               	movlw	3
  3307  001406  6E11               	movwf	___wmul@multiplicand,c
  3308  001408  0E00               	movlw	0
  3309  00140A  6E04               	movwf	___awmod@divisor+1,c
  3310  00140C  0E0A               	movlw	10
  3311  00140E  6E03               	movwf	___awmod@divisor,c
  3312  001410  502A               	movf	scale@scl,w,c
  3313  001412  6E01               	movwf	___awmod@dividend,c
  3314  001414  6A02               	clrf	___awmod@dividend+1,c
  3315  001416  BE01               	btfsc	___awmod@dividend,7,c
  3316  001418  0602               	decf	___awmod@dividend+1,f,c
  3317  00141A  EC2C  F012         	call	___awmod	;wreg free
  3318  00141E  C001  F00F         	movff	?___awmod,___wmul@multiplier
  3319  001422  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  3320  001426  EC89  F014         	call	___wmul	;wreg free
  3321  00142A  0E50               	movlw	low __powers_
  3322  00142C  240F               	addwf	?___wmul,w,c
  3323  00142E  6EF6               	movwf	tblptrl,c
  3324  001430  0E08               	movlw	high __powers_
  3325  001432  2010               	addwfc	?___wmul+1,w,c
  3326  001434  6EF7               	movwf	tblptrh,c
  3327  001436                     	if	0	;There are less than 3 active tblptr bytes
  3328  001436                     	endif
  3329  001436  0009               	tblrd		*+
  3330  001438  CFF5 F018          	movff	tablat,___ftmul@f2
  3331  00143C  0009               	tblrd		*+
  3332  00143E  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3333  001442  000A               	tblrd		*-
  3334  001444  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3335  001448  ECFB  F00E         	call	___ftmul	;wreg free
  3336  00144C                     L9:
  3337  00144C  C015  F024         	movff	?___ftmul,?_scale
  3338  001450  C016  F025         	movff	?___ftmul+1,?_scale+1
  3339  001454  C017  F026         	movff	?___ftmul+2,?_scale+2
  3340  001458  D011               	goto	l164
  3341  00145A                     l2471:
  3342                           
  3343                           ;doprnt.c: 440: return _powers_[scl];
  3344  00145A  502A               	movf	scale@scl,w,c
  3345  00145C  0D03               	mullw	3
  3346  00145E  0E50               	movlw	low __powers_
  3347  001460  24F3               	addwf	prodl,w,c
  3348  001462  6EF6               	movwf	tblptrl,c
  3349  001464  0E08               	movlw	high __powers_
  3350  001466                     L8:
  3351  001466  20F4               	addwfc	prodh,w,c
  3352  001468  6EF7               	movwf	tblptrh,c
  3353  00146A                     	if	0	;There are less than 3 active tblptr bytes
  3354  00146A                     	endif
  3355  00146A  0009               	tblrd		*+
  3356  00146C  CFF5 F024          	movff	tablat,?_scale
  3357  001470  0009               	tblrd		*+
  3358  001472  CFF5 F025          	movff	tablat,?_scale+1
  3359  001476  000A               	tblrd		*-
  3360  001478  CFF5 F026          	movff	tablat,?_scale+2
  3361  00147C                     l164:
  3362  00147C  0012               	return	
  3363  00147E                     __end_of_scale:
  3364                           	opt stack 0
  3365                           tblptru	equ	0xFF8
  3366                           tblptrh	equ	0xFF7
  3367                           tblptrl	equ	0xFF6
  3368                           tablat	equ	0xFF5
  3369                           prodh	equ	0xFF4
  3370                           prodl	equ	0xFF3
  3371                           postinc0	equ	0xFEE
  3372                           wreg	equ	0xFE8
  3373                           postdec1	equ	0xFE5
  3374                           fsr1l	equ	0xFE1
  3375                           indf2	equ	0xFDF
  3376                           postinc2	equ	0xFDE
  3377                           postdec2	equ	0xFDD
  3378                           fsr2h	equ	0xFDA
  3379                           fsr2l	equ	0xFD9
  3380                           status	equ	0xFD8
  3381                           
  3382 ;; *************** function _isdigit *****************
  3383 ;; Defined at:
  3384 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\isdigit.c"
  3385 ;; Parameters:    Size  Location     Type
  3386 ;;  c               1    wreg     unsigned char 
  3387 ;; Auto vars:     Size  Location     Type
  3388 ;;  c               1    2[COMRAM] unsigned char 
  3389 ;; Return value:  Size  Location     Type
  3390 ;;		None               void
  3391 ;; Registers used:
  3392 ;;		wreg, status,2, status,0
  3393 ;; Tracked objects:
  3394 ;;		On entry : 0/0
  3395 ;;		On exit  : 0/0
  3396 ;;		Unchanged: 0/0
  3397 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3398 ;;      Params:         0       0       0       0       0       0       0       0       0
  3399 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3400 ;;      Temps:          1       0       0       0       0       0       0       0       0
  3401 ;;      Totals:         3       0       0       0       0       0       0       0       0
  3402 ;;Total ram usage:        3 bytes
  3403 ;; Hardware stack levels used:    1
  3404 ;; This function calls:
  3405 ;;		Nothing
  3406 ;; This function is called by:
  3407 ;;		_sprintf
  3408 ;; This function uses a non-reentrant model
  3409 ;;
  3410                           
  3411                           	psect	text6
  3412  00295E                     __ptext6:
  3413                           	opt stack 0
  3414  00295E                     _isdigit:
  3415                           	opt stack 28
  3416                           
  3417                           ;incstack = 0
  3418                           ;isdigit@c stored from wreg
  3419  00295E  6E03               	movwf	isdigit@c,c
  3420  002960  0E00               	movlw	0
  3421  002962  6E02               	movwf	_isdigit$1166,c
  3422  002964  0E3A               	movlw	58
  3423  002966  5C03               	subwf	isdigit@c,w,c
  3424  002968  B0D8               	btfsc	status,0,c
  3425  00296A  D005               	goto	l2483
  3426  00296C  0E2F               	movlw	47
  3427  00296E  6403               	cpfsgt	isdigit@c,c
  3428  002970  D002               	goto	l2483
  3429  002972  0E01               	movlw	1
  3430  002974  6E02               	movwf	_isdigit$1166,c
  3431  002976                     l2483:
  3432  002976  C002  F001         	movff	_isdigit$1166,??_isdigit
  3433  00297A  3001               	rrcf	??_isdigit,w,c
  3434  00297C  0012               	return	
  3435  00297E                     __end_of_isdigit:
  3436                           	opt stack 0
  3437                           tblptru	equ	0xFF8
  3438                           tblptrh	equ	0xFF7
  3439                           tblptrl	equ	0xFF6
  3440                           tablat	equ	0xFF5
  3441                           prodh	equ	0xFF4
  3442                           prodl	equ	0xFF3
  3443                           postinc0	equ	0xFEE
  3444                           wreg	equ	0xFE8
  3445                           postdec1	equ	0xFE5
  3446                           fsr1l	equ	0xFE1
  3447                           indf2	equ	0xFDF
  3448                           postinc2	equ	0xFDE
  3449                           postdec2	equ	0xFDD
  3450                           fsr2h	equ	0xFDA
  3451                           fsr2l	equ	0xFD9
  3452                           status	equ	0xFD8
  3453                           
  3454 ;; *************** function _fround *****************
  3455 ;; Defined at:
  3456 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\doprnt.c"
  3457 ;; Parameters:    Size  Location     Type
  3458 ;;  prec            1    wreg     unsigned char 
  3459 ;; Auto vars:     Size  Location     Type
  3460 ;;  prec            1   44[COMRAM] unsigned char 
  3461 ;; Return value:  Size  Location     Type
  3462 ;;                  3   35[COMRAM] unsigned char 
  3463 ;; Registers used:
  3464 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3465 ;; Tracked objects:
  3466 ;;		On entry : 0/0
  3467 ;;		On exit  : 0/0
  3468 ;;		Unchanged: 0/0
  3469 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3470 ;;      Params:         3       0       0       0       0       0       0       0       0
  3471 ;;      Locals:         7       0       0       0       0       0       0       0       0
  3472 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3473 ;;      Totals:        10       0       0       0       0       0       0       0       0
  3474 ;;Total ram usage:       10 bytes
  3475 ;; Hardware stack levels used:    1
  3476 ;; Hardware stack levels required when called:    2
  3477 ;; This function calls:
  3478 ;;		___awdiv
  3479 ;;		___awmod
  3480 ;;		___ftmul
  3481 ;;		___wmul
  3482 ;; This function is called by:
  3483 ;;		_sprintf
  3484 ;; This function uses a non-reentrant model
  3485 ;;
  3486                           
  3487                           	psect	text7
  3488  00147E                     __ptext7:
  3489                           	opt stack 0
  3490  00147E                     _fround:
  3491                           	opt stack 26
  3492                           
  3493                           ;incstack = 0
  3494                           ;fround@prec stored from wreg
  3495  00147E  6E2D               	movwf	fround@prec,c
  3496                           
  3497                           ;doprnt.c: 413: if(prec>=110)
  3498  001480  0E6D               	movlw	109
  3499  001482  642D               	cpfsgt	fround@prec,c
  3500  001484  D099               	goto	l2425
  3501                           
  3502                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  3503  001486  0E00               	movlw	0
  3504  001488  6E12               	movwf	___wmul@multiplicand+1,c
  3505  00148A  0E03               	movlw	3
  3506  00148C  6E11               	movwf	___wmul@multiplicand,c
  3507  00148E  0E00               	movlw	0
  3508  001490  6E0A               	movwf	___awdiv@divisor+1,c
  3509  001492  0E0A               	movlw	10
  3510  001494  6E09               	movwf	___awdiv@divisor,c
  3511  001496  0E00               	movlw	0
  3512  001498  6E04               	movwf	___awmod@divisor+1,c
  3513  00149A  0E64               	movlw	100
  3514  00149C  6E03               	movwf	___awmod@divisor,c
  3515  00149E  C02D  F001         	movff	fround@prec,___awmod@dividend
  3516  0014A2  6A02               	clrf	___awmod@dividend+1,c
  3517  0014A4  EC2C  F012         	call	___awmod	;wreg free
  3518  0014A8  C001  F007         	movff	?___awmod,___awdiv@dividend
  3519  0014AC  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  3520  0014B0  ECDA  F011         	call	___awdiv	;wreg free
  3521  0014B4  0E09               	movlw	9
  3522  0014B6  2407               	addwf	?___awdiv,w,c
  3523  0014B8  6E0F               	movwf	___wmul@multiplier,c
  3524  0014BA  0E00               	movlw	0
  3525  0014BC  2008               	addwfc	?___awdiv+1,w,c
  3526  0014BE  6E10               	movwf	___wmul@multiplier+1,c
  3527  0014C0  EC89  F014         	call	___wmul	;wreg free
  3528  0014C4  0E29               	movlw	low __npowers_
  3529  0014C6  240F               	addwf	?___wmul,w,c
  3530  0014C8  6EF6               	movwf	tblptrl,c
  3531  0014CA  0E08               	movlw	high __npowers_
  3532  0014CC  2010               	addwfc	?___wmul+1,w,c
  3533  0014CE  6EF7               	movwf	tblptrh,c
  3534  0014D0                     	if	0	;There are less than 3 active tblptr bytes
  3535  0014D0                     	endif
  3536  0014D0  0009               	tblrd		*+
  3537  0014D2  CFF5 F018          	movff	tablat,___ftmul@f2
  3538  0014D6  0009               	tblrd		*+
  3539  0014D8  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3540  0014DC  000A               	tblrd		*-
  3541  0014DE  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3542  0014E2  0E00               	movlw	0
  3543  0014E4  6E0A               	movwf	___awdiv@divisor+1,c
  3544  0014E6  0E64               	movlw	100
  3545  0014E8  6E09               	movwf	___awdiv@divisor,c
  3546  0014EA  C02D  F007         	movff	fround@prec,___awdiv@dividend
  3547  0014EE  6A08               	clrf	___awdiv@dividend+1,c
  3548  0014F0  ECDA  F011         	call	___awdiv	;wreg free
  3549  0014F4  0E12               	movlw	18
  3550  0014F6  2407               	addwf	?___awdiv,w,c
  3551  0014F8  6E0F               	movwf	___wmul@multiplier,c
  3552  0014FA  0E00               	movlw	0
  3553  0014FC  2008               	addwfc	?___awdiv+1,w,c
  3554  0014FE  6E10               	movwf	___wmul@multiplier+1,c
  3555  001500  0E00               	movlw	0
  3556  001502  6E12               	movwf	___wmul@multiplicand+1,c
  3557  001504  0E03               	movlw	3
  3558  001506  6E11               	movwf	___wmul@multiplicand,c
  3559  001508  EC89  F014         	call	___wmul	;wreg free
  3560  00150C  0E29               	movlw	low __npowers_
  3561  00150E  240F               	addwf	?___wmul,w,c
  3562  001510  6EF6               	movwf	tblptrl,c
  3563  001512  0E08               	movlw	high __npowers_
  3564  001514  2010               	addwfc	?___wmul+1,w,c
  3565  001516  6EF7               	movwf	tblptrh,c
  3566  001518                     	if	0	;There are less than 3 active tblptr bytes
  3567  001518                     	endif
  3568  001518  0009               	tblrd		*+
  3569  00151A  CFF5 F015          	movff	tablat,___ftmul@f1
  3570  00151E  0009               	tblrd		*+
  3571  001520  CFF5 F016          	movff	tablat,___ftmul@f1+1
  3572  001524  000A               	tblrd		*-
  3573  001526  CFF5 F017          	movff	tablat,___ftmul@f1+2
  3574  00152A  ECFB  F00E         	call	___ftmul	;wreg free
  3575  00152E  C015  F02A         	movff	?___ftmul,_fround$1419
  3576  001532  C016  F02B         	movff	?___ftmul+1,_fround$1419+1
  3577  001536  C017  F02C         	movff	?___ftmul+2,_fround$1419+2
  3578                           
  3579                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  3580  00153A  0E00               	movlw	0
  3581  00153C  6E12               	movwf	___wmul@multiplicand+1,c
  3582  00153E  0E03               	movlw	3
  3583  001540  6E11               	movwf	___wmul@multiplicand,c
  3584  001542  0E00               	movlw	0
  3585  001544  6E04               	movwf	___awmod@divisor+1,c
  3586  001546  0E0A               	movlw	10
  3587  001548  6E03               	movwf	___awmod@divisor,c
  3588  00154A  C02D  F001         	movff	fround@prec,___awmod@dividend
  3589  00154E  6A02               	clrf	___awmod@dividend+1,c
  3590  001550  EC2C  F012         	call	___awmod	;wreg free
  3591  001554  C001  F00F         	movff	?___awmod,___wmul@multiplier
  3592  001558  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  3593  00155C  EC89  F014         	call	___wmul	;wreg free
  3594  001560  0E29               	movlw	low __npowers_
  3595  001562  240F               	addwf	?___wmul,w,c
  3596  001564  6EF6               	movwf	tblptrl,c
  3597  001566  0E08               	movlw	high __npowers_
  3598  001568  2010               	addwfc	?___wmul+1,w,c
  3599  00156A  6EF7               	movwf	tblptrh,c
  3600  00156C                     	if	0	;There are less than 3 active tblptr bytes
  3601  00156C                     	endif
  3602  00156C  0009               	tblrd		*+
  3603  00156E  CFF5 F018          	movff	tablat,___ftmul@f2
  3604  001572  0009               	tblrd		*+
  3605  001574  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3606  001578  000A               	tblrd		*-
  3607  00157A  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3608  00157E  C02A  F015         	movff	_fround$1419,___ftmul@f1
  3609  001582  C02B  F016         	movff	_fround$1419+1,___ftmul@f1+1
  3610  001586  C02C  F017         	movff	_fround$1419+2,___ftmul@f1+2
  3611  00158A  ECFB  F00E         	call	___ftmul	;wreg free
  3612  00158E  C015  F027         	movff	?___ftmul,_fround$1420
  3613  001592  C016  F028         	movff	?___ftmul+1,_fround$1420+1
  3614  001596  C017  F029         	movff	?___ftmul+2,_fround$1420+2
  3615                           
  3616                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  3617  00159A  C027  F015         	movff	_fround$1420,___ftmul@f1
  3618  00159E  C028  F016         	movff	_fround$1420+1,___ftmul@f1+1
  3619  0015A2  C029  F017         	movff	_fround$1420+2,___ftmul@f1+2
  3620  0015A6  0E00               	movlw	0
  3621  0015A8  6E18               	movwf	___ftmul@f2,c
  3622  0015AA  0E00               	movlw	0
  3623  0015AC  6E19               	movwf	___ftmul@f2+1,c
  3624  0015AE  0E3F               	movlw	63
  3625  0015B0  6E1A               	movwf	___ftmul@f2+2,c
  3626  0015B2  ECFB  F00E         	call	___ftmul	;wreg free
  3627  0015B6  D079               	goto	L11
  3628  0015B8                     l2425:
  3629                           
  3630                           ;doprnt.c: 415: else if(prec > 10)
  3631  0015B8  0E0A               	movlw	10
  3632  0015BA  642D               	cpfsgt	fround@prec,c
  3633  0015BC  D05D               	goto	l2433
  3634                           
  3635                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  3636  0015BE  0E00               	movlw	0
  3637  0015C0  6E12               	movwf	___wmul@multiplicand+1,c
  3638  0015C2  0E03               	movlw	3
  3639  0015C4  6E11               	movwf	___wmul@multiplicand,c
  3640  0015C6  0E00               	movlw	0
  3641  0015C8  6E04               	movwf	___awmod@divisor+1,c
  3642  0015CA  0E0A               	movlw	10
  3643  0015CC  6E03               	movwf	___awmod@divisor,c
  3644  0015CE  C02D  F001         	movff	fround@prec,___awmod@dividend
  3645  0015D2  6A02               	clrf	___awmod@dividend+1,c
  3646  0015D4  EC2C  F012         	call	___awmod	;wreg free
  3647  0015D8  C001  F00F         	movff	?___awmod,___wmul@multiplier
  3648  0015DC  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  3649  0015E0  EC89  F014         	call	___wmul	;wreg free
  3650  0015E4  0E29               	movlw	low __npowers_
  3651  0015E6  240F               	addwf	?___wmul,w,c
  3652  0015E8  6EF6               	movwf	tblptrl,c
  3653  0015EA  0E08               	movlw	high __npowers_
  3654  0015EC  2010               	addwfc	?___wmul+1,w,c
  3655  0015EE  6EF7               	movwf	tblptrh,c
  3656  0015F0                     	if	0	;There are less than 3 active tblptr bytes
  3657  0015F0                     	endif
  3658  0015F0  0009               	tblrd		*+
  3659  0015F2  CFF5 F018          	movff	tablat,___ftmul@f2
  3660  0015F6  0009               	tblrd		*+
  3661  0015F8  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3662  0015FC  000A               	tblrd		*-
  3663  0015FE  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3664  001602  0E00               	movlw	0
  3665  001604  6E0A               	movwf	___awdiv@divisor+1,c
  3666  001606  0E0A               	movlw	10
  3667  001608  6E09               	movwf	___awdiv@divisor,c
  3668  00160A  C02D  F007         	movff	fround@prec,___awdiv@dividend
  3669  00160E  6A08               	clrf	___awdiv@dividend+1,c
  3670  001610  ECDA  F011         	call	___awdiv	;wreg free
  3671  001614  0E09               	movlw	9
  3672  001616  2407               	addwf	?___awdiv,w,c
  3673  001618  6E0F               	movwf	___wmul@multiplier,c
  3674  00161A  0E00               	movlw	0
  3675  00161C  2008               	addwfc	?___awdiv+1,w,c
  3676  00161E  6E10               	movwf	___wmul@multiplier+1,c
  3677  001620  0E00               	movlw	0
  3678  001622  6E12               	movwf	___wmul@multiplicand+1,c
  3679  001624  0E03               	movlw	3
  3680  001626  6E11               	movwf	___wmul@multiplicand,c
  3681  001628  EC89  F014         	call	___wmul	;wreg free
  3682  00162C  0E29               	movlw	low __npowers_
  3683  00162E  240F               	addwf	?___wmul,w,c
  3684  001630  6EF6               	movwf	tblptrl,c
  3685  001632  0E08               	movlw	high __npowers_
  3686  001634  2010               	addwfc	?___wmul+1,w,c
  3687  001636  6EF7               	movwf	tblptrh,c
  3688  001638                     	if	0	;There are less than 3 active tblptr bytes
  3689  001638                     	endif
  3690  001638  0009               	tblrd		*+
  3691  00163A  CFF5 F015          	movff	tablat,___ftmul@f1
  3692  00163E  0009               	tblrd		*+
  3693  001640  CFF5 F016          	movff	tablat,___ftmul@f1+1
  3694  001644  000A               	tblrd		*-
  3695  001646  CFF5 F017          	movff	tablat,___ftmul@f1+2
  3696  00164A  ECFB  F00E         	call	___ftmul	;wreg free
  3697  00164E  C015  F02A         	movff	?___ftmul,_fround$1419
  3698  001652  C016  F02B         	movff	?___ftmul+1,_fround$1419+1
  3699  001656  C017  F02C         	movff	?___ftmul+2,_fround$1419+2
  3700                           
  3701                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  3702  00165A  C02A  F015         	movff	_fround$1419,___ftmul@f1
  3703  00165E  C02B  F016         	movff	_fround$1419+1,___ftmul@f1+1
  3704  001662  C02C  F017         	movff	_fround$1419+2,___ftmul@f1+2
  3705  001666  0E00               	movlw	0
  3706  001668  6E18               	movwf	___ftmul@f2,c
  3707  00166A  0E00               	movlw	0
  3708  00166C  6E19               	movwf	___ftmul@f2+1,c
  3709  00166E  0E3F               	movlw	63
  3710  001670  6E1A               	movwf	___ftmul@f2+2,c
  3711  001672  ECFB  F00E         	call	___ftmul	;wreg free
  3712  001676  D019               	goto	L11
  3713  001678                     l2433:
  3714                           
  3715                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  3716  001678  502D               	movf	fround@prec,w,c
  3717  00167A  0D03               	mullw	3
  3718  00167C  0E29               	movlw	low __npowers_
  3719  00167E  24F3               	addwf	prodl,w,c
  3720  001680  6EF6               	movwf	tblptrl,c
  3721  001682  0E08               	movlw	high __npowers_
  3722  001684  20F4               	addwfc	prodh,w,c
  3723  001686  6EF7               	movwf	tblptrh,c
  3724  001688                     	if	0	;There are less than 3 active tblptr bytes
  3725  001688                     	endif
  3726  001688  0009               	tblrd		*+
  3727  00168A  CFF5 F015          	movff	tablat,___ftmul@f1
  3728  00168E  0009               	tblrd		*+
  3729  001690  CFF5 F016          	movff	tablat,___ftmul@f1+1
  3730  001694  000A               	tblrd		*-
  3731  001696  CFF5 F017          	movff	tablat,___ftmul@f1+2
  3732  00169A  0E00               	movlw	0
  3733  00169C  6E18               	movwf	___ftmul@f2,c
  3734  00169E  0E00               	movlw	0
  3735  0016A0  6E19               	movwf	___ftmul@f2+1,c
  3736  0016A2  0E3F               	movlw	63
  3737  0016A4  6E1A               	movwf	___ftmul@f2+2,c
  3738  0016A6  ECFB  F00E         	call	___ftmul	;wreg free
  3739  0016AA                     L11:
  3740  0016AA  C015  F024         	movff	?___ftmul,?_fround
  3741  0016AE  C016  F025         	movff	?___ftmul+1,?_fround+1
  3742  0016B2  C017  F026         	movff	?___ftmul+2,?_fround+2
  3743  0016B6  0012               	return	
  3744  0016B8                     __end_of_fround:
  3745                           	opt stack 0
  3746                           tblptru	equ	0xFF8
  3747                           tblptrh	equ	0xFF7
  3748                           tblptrl	equ	0xFF6
  3749                           tablat	equ	0xFF5
  3750                           prodh	equ	0xFF4
  3751                           prodl	equ	0xFF3
  3752                           postinc0	equ	0xFEE
  3753                           wreg	equ	0xFE8
  3754                           postdec1	equ	0xFE5
  3755                           fsr1l	equ	0xFE1
  3756                           indf2	equ	0xFDF
  3757                           postinc2	equ	0xFDE
  3758                           postdec2	equ	0xFDD
  3759                           fsr2h	equ	0xFDA
  3760                           fsr2l	equ	0xFD9
  3761                           status	equ	0xFD8
  3762                           
  3763 ;; *************** function ___wmul *****************
  3764 ;; Defined at:
  3765 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\Umul16.c"
  3766 ;; Parameters:    Size  Location     Type
  3767 ;;  multiplier      2   14[COMRAM] unsigned int 
  3768 ;;  multiplicand    2   16[COMRAM] unsigned int 
  3769 ;; Auto vars:     Size  Location     Type
  3770 ;;  product         2   18[COMRAM] unsigned int 
  3771 ;; Return value:  Size  Location     Type
  3772 ;;                  2   14[COMRAM] unsigned int 
  3773 ;; Registers used:
  3774 ;;		wreg, status,2, status,0, prodl, prodh
  3775 ;; Tracked objects:
  3776 ;;		On entry : 0/0
  3777 ;;		On exit  : 0/0
  3778 ;;		Unchanged: 0/0
  3779 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3780 ;;      Params:         4       0       0       0       0       0       0       0       0
  3781 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3782 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3783 ;;      Totals:         6       0       0       0       0       0       0       0       0
  3784 ;;Total ram usage:        6 bytes
  3785 ;; Hardware stack levels used:    1
  3786 ;; This function calls:
  3787 ;;		Nothing
  3788 ;; This function is called by:
  3789 ;;		_fround
  3790 ;;		_scale
  3791 ;;		_sprintf
  3792 ;; This function uses a non-reentrant model
  3793 ;;
  3794                           
  3795                           	psect	text8
  3796  002912                     __ptext8:
  3797                           	opt stack 0
  3798  002912                     ___wmul:
  3799                           	opt stack 27
  3800                           
  3801                           ;incstack = 0
  3802  002912  500F               	movf	___wmul@multiplier,w,c
  3803  002914  0211               	mulwf	___wmul@multiplicand,c
  3804  002916  CFF3 F013          	movff	prodl,___wmul@product
  3805  00291A  CFF4 F014          	movff	prodh,___wmul@product+1
  3806  00291E  500F               	movf	___wmul@multiplier,w,c
  3807  002920  0212               	mulwf	___wmul@multiplicand+1,c
  3808  002922  50F3               	movf	prodl,w,c
  3809  002924  2614               	addwf	___wmul@product+1,f,c
  3810  002926  5010               	movf	___wmul@multiplier+1,w,c
  3811  002928  0211               	mulwf	___wmul@multiplicand,c
  3812  00292A  50F3               	movf	prodl,w,c
  3813  00292C  2614               	addwf	___wmul@product+1,f,c
  3814  00292E  C013  F00F         	movff	___wmul@product,?___wmul
  3815  002932  C014  F010         	movff	___wmul@product+1,?___wmul+1
  3816  002936  0012               	return	
  3817  002938                     __end_of___wmul:
  3818                           	opt stack 0
  3819                           tblptru	equ	0xFF8
  3820                           tblptrh	equ	0xFF7
  3821                           tblptrl	equ	0xFF6
  3822                           tablat	equ	0xFF5
  3823                           prodh	equ	0xFF4
  3824                           prodl	equ	0xFF3
  3825                           postinc0	equ	0xFEE
  3826                           wreg	equ	0xFE8
  3827                           postdec1	equ	0xFE5
  3828                           fsr1l	equ	0xFE1
  3829                           indf2	equ	0xFDF
  3830                           postinc2	equ	0xFDE
  3831                           postdec2	equ	0xFDD
  3832                           fsr2h	equ	0xFDA
  3833                           fsr2l	equ	0xFD9
  3834                           status	equ	0xFD8
  3835                           
  3836 ;; *************** function ___ftmul *****************
  3837 ;; Defined at:
  3838 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\ftmul.c"
  3839 ;; Parameters:    Size  Location     Type
  3840 ;;  f1              3   20[COMRAM] float 
  3841 ;;  f2              3   23[COMRAM] float 
  3842 ;; Auto vars:     Size  Location     Type
  3843 ;;  f3_as_produc    3   30[COMRAM] unsigned um
  3844 ;;  sign            1   34[COMRAM] unsigned char 
  3845 ;;  cntr            1   33[COMRAM] unsigned char 
  3846 ;;  exp             1   29[COMRAM] unsigned char 
  3847 ;; Return value:  Size  Location     Type
  3848 ;;                  3   20[COMRAM] float 
  3849 ;; Registers used:
  3850 ;;		wreg, status,2, status,0, cstack
  3851 ;; Tracked objects:
  3852 ;;		On entry : 0/0
  3853 ;;		On exit  : 0/0
  3854 ;;		Unchanged: 0/0
  3855 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3856 ;;      Params:         6       0       0       0       0       0       0       0       0
  3857 ;;      Locals:         6       0       0       0       0       0       0       0       0
  3858 ;;      Temps:          3       0       0       0       0       0       0       0       0
  3859 ;;      Totals:        15       0       0       0       0       0       0       0       0
  3860 ;;Total ram usage:       15 bytes
  3861 ;; Hardware stack levels used:    1
  3862 ;; Hardware stack levels required when called:    1
  3863 ;; This function calls:
  3864 ;;		___ftpack
  3865 ;; This function is called by:
  3866 ;;		_getX
  3867 ;;		_getY
  3868 ;;		_getZ
  3869 ;;		_fround
  3870 ;;		_scale
  3871 ;;		_sprintf
  3872 ;; This function uses a non-reentrant model
  3873 ;;
  3874                           
  3875                           	psect	text9
  3876  001DF6                     __ptext9:
  3877                           	opt stack 0
  3878  001DF6                     ___ftmul:
  3879                           	opt stack 26
  3880                           
  3881                           ;incstack = 0
  3882  001DF6  C017  F01B         	movff	___ftmul@f1+2,??___ftmul
  3883  001DFA  6A1C               	clrf	(??___ftmul+1)& (0+255),c
  3884  001DFC  6A1D               	clrf	(??___ftmul+2)& (0+255),c
  3885  001DFE  3416               	rlcf	___ftmul@f1+1,w,c
  3886  001E00  361B               	rlcf	??___ftmul& (0+255),f,c
  3887  001E02  E301               	bnc	u2281
  3888  001E04  801C               	bsf	(??___ftmul+1)& (0+255),0,c
  3889  001E06                     u2281:
  3890  001E06  501B               	movf	??___ftmul,w,c
  3891  001E08  6E1E               	movwf	___ftmul@exp,c
  3892  001E0A  661E               	tstfsz	___ftmul@exp& (0+255),c
  3893  001E0C  D001               	goto	l2267
  3894  001E0E  D00C               	goto	u2310
  3895  001E10                     l2267:
  3896  001E10  C01A  F01B         	movff	___ftmul@f2+2,??___ftmul
  3897  001E14  6A1C               	clrf	(??___ftmul+1)& (0+255),c
  3898  001E16  6A1D               	clrf	(??___ftmul+2)& (0+255),c
  3899  001E18  3419               	rlcf	___ftmul@f2+1,w,c
  3900  001E1A  361B               	rlcf	??___ftmul& (0+255),f,c
  3901  001E1C  E301               	bnc	u2301
  3902  001E1E  801C               	bsf	(??___ftmul+1)& (0+255),0,c
  3903  001E20                     u2301:
  3904  001E20  501B               	movf	??___ftmul,w,c
  3905  001E22  6E23               	movwf	___ftmul@sign,c
  3906  001E24  6623               	tstfsz	___ftmul@sign& (0+255),c
  3907  001E26  D007               	goto	l2273
  3908  001E28                     u2310:
  3909  001E28  0E00               	movlw	0
  3910  001E2A  6E15               	movwf	?___ftmul,c
  3911  001E2C  0E00               	movlw	0
  3912  001E2E  6E16               	movwf	?___ftmul+1,c
  3913  001E30  0E00               	movlw	0
  3914  001E32  6E17               	movwf	?___ftmul+2,c
  3915  001E34  D051               	goto	l729
  3916  001E36                     l2273:
  3917  001E36  5023               	movf	___ftmul@sign,w,c
  3918  001E38  0F7B               	addlw	123
  3919  001E3A  261E               	addwf	___ftmul@exp,f,c
  3920  001E3C  C017  F023         	movff	___ftmul@f1+2,___ftmul@sign
  3921  001E40  501A               	movf	___ftmul@f2+2,w,c
  3922  001E42  1A23               	xorwf	___ftmul@sign,f,c
  3923  001E44  0E80               	movlw	128
  3924  001E46  1623               	andwf	___ftmul@sign,f,c
  3925  001E48  8E16               	bsf	___ftmul@f1+1,7,c
  3926  001E4A  8E19               	bsf	___ftmul@f2+1,7,c
  3927  001E4C  0EFF               	movlw	255
  3928  001E4E  1618               	andwf	___ftmul@f2,f,c
  3929  001E50  0EFF               	movlw	255
  3930  001E52  1619               	andwf	___ftmul@f2+1,f,c
  3931  001E54  0E00               	movlw	0
  3932  001E56  161A               	andwf	___ftmul@f2+2,f,c
  3933  001E58  0E00               	movlw	0
  3934  001E5A  6E1F               	movwf	___ftmul@f3_as_product,c
  3935  001E5C  0E00               	movlw	0
  3936  001E5E  6E20               	movwf	___ftmul@f3_as_product+1,c
  3937  001E60  0E00               	movlw	0
  3938  001E62  6E21               	movwf	___ftmul@f3_as_product+2,c
  3939  001E64  0E07               	movlw	7
  3940  001E66  6E22               	movwf	___ftmul@cntr,c
  3941  001E68                     l2287:
  3942  001E68  A015               	btfss	___ftmul@f1,0,c
  3943  001E6A  D006               	goto	l2291
  3944  001E6C  5018               	movf	___ftmul@f2,w,c
  3945  001E6E  261F               	addwf	___ftmul@f3_as_product,f,c
  3946  001E70  5019               	movf	___ftmul@f2+1,w,c
  3947  001E72  2220               	addwfc	___ftmul@f3_as_product+1,f,c
  3948  001E74  501A               	movf	___ftmul@f2+2,w,c
  3949  001E76  2221               	addwfc	___ftmul@f3_as_product+2,f,c
  3950  001E78                     l2291:
  3951  001E78  90D8               	bcf	status,0,c
  3952  001E7A  3217               	rrcf	___ftmul@f1+2,f,c
  3953  001E7C  3216               	rrcf	___ftmul@f1+1,f,c
  3954  001E7E  3215               	rrcf	___ftmul@f1,f,c
  3955  001E80  90D8               	bcf	status,0,c
  3956  001E82  3618               	rlcf	___ftmul@f2,f,c
  3957  001E84  3619               	rlcf	___ftmul@f2+1,f,c
  3958  001E86  361A               	rlcf	___ftmul@f2+2,f,c
  3959  001E88  2E22               	decfsz	___ftmul@cntr,f,c
  3960  001E8A  D7EE               	goto	l2287
  3961  001E8C  0E09               	movlw	9
  3962  001E8E  6E22               	movwf	___ftmul@cntr,c
  3963  001E90                     l2297:
  3964  001E90  A015               	btfss	___ftmul@f1,0,c
  3965  001E92  D006               	goto	l2301
  3966  001E94  5018               	movf	___ftmul@f2,w,c
  3967  001E96  261F               	addwf	___ftmul@f3_as_product,f,c
  3968  001E98  5019               	movf	___ftmul@f2+1,w,c
  3969  001E9A  2220               	addwfc	___ftmul@f3_as_product+1,f,c
  3970  001E9C  501A               	movf	___ftmul@f2+2,w,c
  3971  001E9E  2221               	addwfc	___ftmul@f3_as_product+2,f,c
  3972  001EA0                     l2301:
  3973  001EA0  90D8               	bcf	status,0,c
  3974  001EA2  3217               	rrcf	___ftmul@f1+2,f,c
  3975  001EA4  3216               	rrcf	___ftmul@f1+1,f,c
  3976  001EA6  3215               	rrcf	___ftmul@f1,f,c
  3977  001EA8  90D8               	bcf	status,0,c
  3978  001EAA  3221               	rrcf	___ftmul@f3_as_product+2,f,c
  3979  001EAC  3220               	rrcf	___ftmul@f3_as_product+1,f,c
  3980  001EAE  321F               	rrcf	___ftmul@f3_as_product,f,c
  3981  001EB0  2E22               	decfsz	___ftmul@cntr,f,c
  3982  001EB2  D7EE               	goto	l2297
  3983  001EB4  C01F  F001         	movff	___ftmul@f3_as_product,___ftpack@arg
  3984  001EB8  C020  F002         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  3985  001EBC  C021  F003         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  3986  001EC0  C01E  F004         	movff	___ftmul@exp,___ftpack@exp
  3987  001EC4  C023  F005         	movff	___ftmul@sign,___ftpack@sign
  3988  001EC8  EC90  F010         	call	___ftpack	;wreg free
  3989  001ECC  C001  F015         	movff	?___ftpack,?___ftmul
  3990  001ED0  C002  F016         	movff	?___ftpack+1,?___ftmul+1
  3991  001ED4  C003  F017         	movff	?___ftpack+2,?___ftmul+2
  3992  001ED8                     l729:
  3993  001ED8  0012               	return	
  3994  001EDA                     __end_of___ftmul:
  3995                           	opt stack 0
  3996                           tblptru	equ	0xFF8
  3997                           tblptrh	equ	0xFF7
  3998                           tblptrl	equ	0xFF6
  3999                           tablat	equ	0xFF5
  4000                           prodh	equ	0xFF4
  4001                           prodl	equ	0xFF3
  4002                           postinc0	equ	0xFEE
  4003                           wreg	equ	0xFE8
  4004                           postdec1	equ	0xFE5
  4005                           fsr1l	equ	0xFE1
  4006                           indf2	equ	0xFDF
  4007                           postinc2	equ	0xFDE
  4008                           postdec2	equ	0xFDD
  4009                           fsr2h	equ	0xFDA
  4010                           fsr2l	equ	0xFD9
  4011                           status	equ	0xFD8
  4012                           
  4013 ;; *************** function ___awmod *****************
  4014 ;; Defined at:
  4015 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\awmod.c"
  4016 ;; Parameters:    Size  Location     Type
  4017 ;;  dividend        2    0[COMRAM] int 
  4018 ;;  divisor         2    2[COMRAM] int 
  4019 ;; Auto vars:     Size  Location     Type
  4020 ;;  sign            1    5[COMRAM] unsigned char 
  4021 ;;  counter         1    4[COMRAM] unsigned char 
  4022 ;; Return value:  Size  Location     Type
  4023 ;;                  2    0[COMRAM] int 
  4024 ;; Registers used:
  4025 ;;		wreg, status,2, status,0, prodl
  4026 ;; Tracked objects:
  4027 ;;		On entry : 0/0
  4028 ;;		On exit  : 0/0
  4029 ;;		Unchanged: 0/0
  4030 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4031 ;;      Params:         4       0       0       0       0       0       0       0       0
  4032 ;;      Locals:         2       0       0       0       0       0       0       0       0
  4033 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4034 ;;      Totals:         6       0       0       0       0       0       0       0       0
  4035 ;;Total ram usage:        6 bytes
  4036 ;; Hardware stack levels used:    1
  4037 ;; This function calls:
  4038 ;;		Nothing
  4039 ;; This function is called by:
  4040 ;;		_fround
  4041 ;;		_scale
  4042 ;; This function uses a non-reentrant model
  4043 ;;
  4044                           
  4045                           	psect	text10
  4046  002458                     __ptext10:
  4047                           	opt stack 0
  4048  002458                     ___awmod:
  4049                           	opt stack 27
  4050                           
  4051                           ;incstack = 0
  4052  002458  0E00               	movlw	0
  4053  00245A  6E06               	movwf	___awmod@sign,c
  4054  00245C  5002               	movf	___awmod@dividend+1,w,c
  4055  00245E  0A80               	xorlw	128
  4056  002460  6EF3               	movwf	prodl,c
  4057  002462  0E80               	movlw	128
  4058  002464  5CF3               	subwf	prodl,w,c
  4059  002466  0E00               	movlw	0
  4060  002468  B4D8               	btfsc	status,2,c
  4061  00246A  5C01               	subwf	___awmod@dividend,w,c
  4062  00246C  B0D8               	btfsc	status,0,c
  4063  00246E  D006               	goto	l2361
  4064  002470  6C01               	negf	___awmod@dividend,c
  4065  002472  1E02               	comf	___awmod@dividend+1,f,c
  4066  002474  B0D8               	btfsc	status,0,c
  4067  002476  2A02               	incf	___awmod@dividend+1,f,c
  4068  002478  0E01               	movlw	1
  4069  00247A  6E06               	movwf	___awmod@sign,c
  4070  00247C                     l2361:
  4071  00247C  5004               	movf	___awmod@divisor+1,w,c
  4072  00247E  0A80               	xorlw	128
  4073  002480  6EF3               	movwf	prodl,c
  4074  002482  0E80               	movlw	128
  4075  002484  5CF3               	subwf	prodl,w,c
  4076  002486  0E00               	movlw	0
  4077  002488  B4D8               	btfsc	status,2,c
  4078  00248A  5C03               	subwf	___awmod@divisor,w,c
  4079  00248C  B0D8               	btfsc	status,0,c
  4080  00248E  D004               	goto	l2365
  4081  002490  6C03               	negf	___awmod@divisor,c
  4082  002492  1E04               	comf	___awmod@divisor+1,f,c
  4083  002494  B0D8               	btfsc	status,0,c
  4084  002496  2A04               	incf	___awmod@divisor+1,f,c
  4085  002498                     l2365:
  4086  002498  5004               	movf	___awmod@divisor+1,w,c
  4087  00249A  1003               	iorwf	___awmod@divisor,w,c
  4088  00249C  B4D8               	btfsc	status,2,c
  4089  00249E  D018               	goto	l2381
  4090  0024A0  0E01               	movlw	1
  4091  0024A2  6E05               	movwf	___awmod@counter,c
  4092  0024A4  D004               	goto	l2371
  4093  0024A6                     l2369:
  4094  0024A6  90D8               	bcf	status,0,c
  4095  0024A8  3603               	rlcf	___awmod@divisor,f,c
  4096  0024AA  3604               	rlcf	___awmod@divisor+1,f,c
  4097  0024AC  2A05               	incf	___awmod@counter,f,c
  4098  0024AE                     l2371:
  4099  0024AE  AE04               	btfss	___awmod@divisor+1,7,c
  4100  0024B0  D7FA               	goto	l2369
  4101  0024B2                     l2373:
  4102  0024B2  5003               	movf	___awmod@divisor,w,c
  4103  0024B4  5C01               	subwf	___awmod@dividend,w,c
  4104  0024B6  5004               	movf	___awmod@divisor+1,w,c
  4105  0024B8  5802               	subwfb	___awmod@dividend+1,w,c
  4106  0024BA  A0D8               	btfss	status,0,c
  4107  0024BC  D004               	goto	l2377
  4108  0024BE  5003               	movf	___awmod@divisor,w,c
  4109  0024C0  5E01               	subwf	___awmod@dividend,f,c
  4110  0024C2  5004               	movf	___awmod@divisor+1,w,c
  4111  0024C4  5A02               	subwfb	___awmod@dividend+1,f,c
  4112  0024C6                     l2377:
  4113  0024C6  90D8               	bcf	status,0,c
  4114  0024C8  3204               	rrcf	___awmod@divisor+1,f,c
  4115  0024CA  3203               	rrcf	___awmod@divisor,f,c
  4116  0024CC  2E05               	decfsz	___awmod@counter,f,c
  4117  0024CE  D7F1               	goto	l2373
  4118  0024D0                     l2381:
  4119  0024D0  5006               	movf	___awmod@sign,w,c
  4120  0024D2  B4D8               	btfsc	status,2,c
  4121  0024D4  D004               	goto	l2385
  4122  0024D6  6C01               	negf	___awmod@dividend,c
  4123  0024D8  1E02               	comf	___awmod@dividend+1,f,c
  4124  0024DA  B0D8               	btfsc	status,0,c
  4125  0024DC  2A02               	incf	___awmod@dividend+1,f,c
  4126  0024DE                     l2385:
  4127  0024DE  C001  F001         	movff	___awmod@dividend,?___awmod
  4128  0024E2  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
  4129  0024E6  0012               	return	
  4130  0024E8                     __end_of___awmod:
  4131                           	opt stack 0
  4132                           tblptru	equ	0xFF8
  4133                           tblptrh	equ	0xFF7
  4134                           tblptrl	equ	0xFF6
  4135                           tablat	equ	0xFF5
  4136                           prodh	equ	0xFF4
  4137                           prodl	equ	0xFF3
  4138                           postinc0	equ	0xFEE
  4139                           wreg	equ	0xFE8
  4140                           postdec1	equ	0xFE5
  4141                           fsr1l	equ	0xFE1
  4142                           indf2	equ	0xFDF
  4143                           postinc2	equ	0xFDE
  4144                           postdec2	equ	0xFDD
  4145                           fsr2h	equ	0xFDA
  4146                           fsr2l	equ	0xFD9
  4147                           status	equ	0xFD8
  4148                           
  4149 ;; *************** function ___awdiv *****************
  4150 ;; Defined at:
  4151 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\awdiv.c"
  4152 ;; Parameters:    Size  Location     Type
  4153 ;;  dividend        2    6[COMRAM] int 
  4154 ;;  divisor         2    8[COMRAM] int 
  4155 ;; Auto vars:     Size  Location     Type
  4156 ;;  quotient        2   12[COMRAM] int 
  4157 ;;  sign            1   11[COMRAM] unsigned char 
  4158 ;;  counter         1   10[COMRAM] unsigned char 
  4159 ;; Return value:  Size  Location     Type
  4160 ;;                  2    6[COMRAM] int 
  4161 ;; Registers used:
  4162 ;;		wreg, status,2, status,0, prodl
  4163 ;; Tracked objects:
  4164 ;;		On entry : 0/0
  4165 ;;		On exit  : 0/0
  4166 ;;		Unchanged: 0/0
  4167 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4168 ;;      Params:         4       0       0       0       0       0       0       0       0
  4169 ;;      Locals:         4       0       0       0       0       0       0       0       0
  4170 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4171 ;;      Totals:         8       0       0       0       0       0       0       0       0
  4172 ;;Total ram usage:        8 bytes
  4173 ;; Hardware stack levels used:    1
  4174 ;; This function calls:
  4175 ;;		Nothing
  4176 ;; This function is called by:
  4177 ;;		_fround
  4178 ;;		_scale
  4179 ;;		_sprintf
  4180 ;; This function uses a non-reentrant model
  4181 ;;
  4182                           
  4183                           	psect	text11
  4184  0023B4                     __ptext11:
  4185                           	opt stack 0
  4186  0023B4                     ___awdiv:
  4187                           	opt stack 27
  4188                           
  4189                           ;incstack = 0
  4190  0023B4  0E00               	movlw	0
  4191  0023B6  6E0C               	movwf	___awdiv@sign,c
  4192  0023B8  500A               	movf	___awdiv@divisor+1,w,c
  4193  0023BA  0A80               	xorlw	128
  4194  0023BC  6EF3               	movwf	prodl,c
  4195  0023BE  0E80               	movlw	128
  4196  0023C0  5CF3               	subwf	prodl,w,c
  4197  0023C2  0E00               	movlw	0
  4198  0023C4  B4D8               	btfsc	status,2,c
  4199  0023C6  5C09               	subwf	___awdiv@divisor,w,c
  4200  0023C8  B0D8               	btfsc	status,0,c
  4201  0023CA  D006               	goto	l2317
  4202  0023CC  6C09               	negf	___awdiv@divisor,c
  4203  0023CE  1E0A               	comf	___awdiv@divisor+1,f,c
  4204  0023D0  B0D8               	btfsc	status,0,c
  4205  0023D2  2A0A               	incf	___awdiv@divisor+1,f,c
  4206  0023D4  0E01               	movlw	1
  4207  0023D6  6E0C               	movwf	___awdiv@sign,c
  4208  0023D8                     l2317:
  4209  0023D8  5008               	movf	___awdiv@dividend+1,w,c
  4210  0023DA  0A80               	xorlw	128
  4211  0023DC  6EF3               	movwf	prodl,c
  4212  0023DE  0E80               	movlw	128
  4213  0023E0  5CF3               	subwf	prodl,w,c
  4214  0023E2  0E00               	movlw	0
  4215  0023E4  B4D8               	btfsc	status,2,c
  4216  0023E6  5C07               	subwf	___awdiv@dividend,w,c
  4217  0023E8  B0D8               	btfsc	status,0,c
  4218  0023EA  D006               	goto	l2323
  4219  0023EC  6C07               	negf	___awdiv@dividend,c
  4220  0023EE  1E08               	comf	___awdiv@dividend+1,f,c
  4221  0023F0  B0D8               	btfsc	status,0,c
  4222  0023F2  2A08               	incf	___awdiv@dividend+1,f,c
  4223  0023F4  0E01               	movlw	1
  4224  0023F6  1A0C               	xorwf	___awdiv@sign,f,c
  4225  0023F8                     l2323:
  4226  0023F8  0E00               	movlw	0
  4227  0023FA  6E0E               	movwf	___awdiv@quotient+1,c
  4228  0023FC  0E00               	movlw	0
  4229  0023FE  6E0D               	movwf	___awdiv@quotient,c
  4230  002400  500A               	movf	___awdiv@divisor+1,w,c
  4231  002402  1009               	iorwf	___awdiv@divisor,w,c
  4232  002404  B4D8               	btfsc	status,2,c
  4233  002406  D01C               	goto	l2345
  4234  002408  0E01               	movlw	1
  4235  00240A  6E0B               	movwf	___awdiv@counter,c
  4236  00240C  D004               	goto	l2331
  4237  00240E                     l2329:
  4238  00240E  90D8               	bcf	status,0,c
  4239  002410  3609               	rlcf	___awdiv@divisor,f,c
  4240  002412  360A               	rlcf	___awdiv@divisor+1,f,c
  4241  002414  2A0B               	incf	___awdiv@counter,f,c
  4242  002416                     l2331:
  4243  002416  AE0A               	btfss	___awdiv@divisor+1,7,c
  4244  002418  D7FA               	goto	l2329
  4245  00241A                     l2333:
  4246  00241A  90D8               	bcf	status,0,c
  4247  00241C  360D               	rlcf	___awdiv@quotient,f,c
  4248  00241E  360E               	rlcf	___awdiv@quotient+1,f,c
  4249  002420  5009               	movf	___awdiv@divisor,w,c
  4250  002422  5C07               	subwf	___awdiv@dividend,w,c
  4251  002424  500A               	movf	___awdiv@divisor+1,w,c
  4252  002426  5808               	subwfb	___awdiv@dividend+1,w,c
  4253  002428  A0D8               	btfss	status,0,c
  4254  00242A  D005               	goto	l2341
  4255  00242C  5009               	movf	___awdiv@divisor,w,c
  4256  00242E  5E07               	subwf	___awdiv@dividend,f,c
  4257  002430  500A               	movf	___awdiv@divisor+1,w,c
  4258  002432  5A08               	subwfb	___awdiv@dividend+1,f,c
  4259  002434  800D               	bsf	___awdiv@quotient,0,c
  4260  002436                     l2341:
  4261  002436  90D8               	bcf	status,0,c
  4262  002438  320A               	rrcf	___awdiv@divisor+1,f,c
  4263  00243A  3209               	rrcf	___awdiv@divisor,f,c
  4264  00243C  2E0B               	decfsz	___awdiv@counter,f,c
  4265  00243E  D7ED               	goto	l2333
  4266  002440                     l2345:
  4267  002440  500C               	movf	___awdiv@sign,w,c
  4268  002442  B4D8               	btfsc	status,2,c
  4269  002444  D004               	goto	l2349
  4270  002446  6C0D               	negf	___awdiv@quotient,c
  4271  002448  1E0E               	comf	___awdiv@quotient+1,f,c
  4272  00244A  B0D8               	btfsc	status,0,c
  4273  00244C  2A0E               	incf	___awdiv@quotient+1,f,c
  4274  00244E                     l2349:
  4275  00244E  C00D  F007         	movff	___awdiv@quotient,?___awdiv
  4276  002452  C00E  F008         	movff	___awdiv@quotient+1,?___awdiv+1
  4277  002456  0012               	return	
  4278  002458                     __end_of___awdiv:
  4279                           	opt stack 0
  4280                           tblptru	equ	0xFF8
  4281                           tblptrh	equ	0xFF7
  4282                           tblptrl	equ	0xFF6
  4283                           tablat	equ	0xFF5
  4284                           prodh	equ	0xFF4
  4285                           prodl	equ	0xFF3
  4286                           postinc0	equ	0xFEE
  4287                           wreg	equ	0xFE8
  4288                           postdec1	equ	0xFE5
  4289                           fsr1l	equ	0xFE1
  4290                           indf2	equ	0xFDF
  4291                           postinc2	equ	0xFDE
  4292                           postdec2	equ	0xFDD
  4293                           fsr2h	equ	0xFDA
  4294                           fsr2l	equ	0xFD9
  4295                           status	equ	0xFD8
  4296                           
  4297 ;; *************** function __tdiv_to_l_ *****************
  4298 ;; Defined at:
  4299 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\ftdivl.c"
  4300 ;; Parameters:    Size  Location     Type
  4301 ;;  f1              3    0[COMRAM] float 
  4302 ;;  f2              3    3[COMRAM] float 
  4303 ;; Auto vars:     Size  Location     Type
  4304 ;;  quot            4    9[COMRAM] unsigned long 
  4305 ;;  exp1            1   14[COMRAM] unsigned char 
  4306 ;;  cntr            1   13[COMRAM] unsigned char 
  4307 ;; Return value:  Size  Location     Type
  4308 ;;                  4    0[COMRAM] unsigned long 
  4309 ;; Registers used:
  4310 ;;		wreg, status,2, status,0
  4311 ;; Tracked objects:
  4312 ;;		On entry : 0/0
  4313 ;;		On exit  : 0/0
  4314 ;;		Unchanged: 0/0
  4315 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4316 ;;      Params:         6       0       0       0       0       0       0       0       0
  4317 ;;      Locals:         6       0       0       0       0       0       0       0       0
  4318 ;;      Temps:          3       0       0       0       0       0       0       0       0
  4319 ;;      Totals:        15       0       0       0       0       0       0       0       0
  4320 ;;Total ram usage:       15 bytes
  4321 ;; Hardware stack levels used:    1
  4322 ;; This function calls:
  4323 ;;		Nothing
  4324 ;; This function is called by:
  4325 ;;		_sprintf
  4326 ;; This function uses a non-reentrant model
  4327 ;;
  4328                           
  4329                           	psect	text12
  4330  001CF6                     __ptext12:
  4331                           	opt stack 0
  4332  001CF6                     __tdiv_to_l_:
  4333                           	opt stack 28
  4334                           
  4335                           ;incstack = 0
  4336  001CF6  C003  F007         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  4337  001CFA  6A08               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  4338  001CFC  6A09               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  4339  001CFE  3402               	rlcf	__tdiv_to_l_@f1+1,w,c
  4340  001D00  3607               	rlcf	??__tdiv_to_l_& (0+255),f,c
  4341  001D02  E301               	bnc	u2611
  4342  001D04  8008               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  4343  001D06                     u2611:
  4344  001D06  5007               	movf	??__tdiv_to_l_,w,c
  4345  001D08  6E0F               	movwf	__tdiv_to_l_@exp1,c
  4346  001D0A  660F               	tstfsz	__tdiv_to_l_@exp1& (0+255),c
  4347  001D0C  D001               	goto	l2493
  4348  001D0E  D059               	goto	u2680
  4349  001D10                     l2493:
  4350  001D10  C006  F007         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  4351  001D14  6A08               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  4352  001D16  6A09               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  4353  001D18  3405               	rlcf	__tdiv_to_l_@f2+1,w,c
  4354  001D1A  3607               	rlcf	??__tdiv_to_l_& (0+255),f,c
  4355  001D1C  E301               	bnc	u2631
  4356  001D1E  8008               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  4357  001D20                     u2631:
  4358  001D20  5007               	movf	??__tdiv_to_l_,w,c
  4359  001D22  6E0E               	movwf	__tdiv_to_l_@cntr,c
  4360  001D24  660E               	tstfsz	__tdiv_to_l_@cntr& (0+255),c
  4361  001D26  D001               	goto	l2499
  4362  001D28  D04C               	goto	u2680
  4363  001D2A                     l2499:
  4364  001D2A  8E02               	bsf	__tdiv_to_l_@f1+1,7,c
  4365  001D2C  0EFF               	movlw	255
  4366  001D2E  1601               	andwf	__tdiv_to_l_@f1,f,c
  4367  001D30  0EFF               	movlw	255
  4368  001D32  1602               	andwf	__tdiv_to_l_@f1+1,f,c
  4369  001D34  0E00               	movlw	0
  4370  001D36  1603               	andwf	__tdiv_to_l_@f1+2,f,c
  4371  001D38  8E05               	bsf	__tdiv_to_l_@f2+1,7,c
  4372  001D3A  0EFF               	movlw	255
  4373  001D3C  1604               	andwf	__tdiv_to_l_@f2,f,c
  4374  001D3E  0EFF               	movlw	255
  4375  001D40  1605               	andwf	__tdiv_to_l_@f2+1,f,c
  4376  001D42  0E00               	movlw	0
  4377  001D44  1606               	andwf	__tdiv_to_l_@f2+2,f,c
  4378  001D46  0E00               	movlw	0
  4379  001D48  6E0A               	movwf	__tdiv_to_l_@quot,c
  4380  001D4A  0E00               	movlw	0
  4381  001D4C  6E0B               	movwf	__tdiv_to_l_@quot+1,c
  4382  001D4E  0E00               	movlw	0
  4383  001D50  6E0C               	movwf	__tdiv_to_l_@quot+2,c
  4384  001D52  0E00               	movlw	0
  4385  001D54  6E0D               	movwf	__tdiv_to_l_@quot+3,c
  4386  001D56  0E7F               	movlw	127
  4387  001D58  5E0F               	subwf	__tdiv_to_l_@exp1,f,c
  4388  001D5A  500E               	movf	__tdiv_to_l_@cntr,w,c
  4389  001D5C  0F98               	addlw	152
  4390  001D5E  5E0F               	subwf	__tdiv_to_l_@exp1,f,c
  4391  001D60  0E18               	movlw	24
  4392  001D62  6E0E               	movwf	__tdiv_to_l_@cntr,c
  4393  001D64                     l707:
  4394  001D64  90D8               	bcf	status,0,c
  4395  001D66  360A               	rlcf	__tdiv_to_l_@quot,f,c
  4396  001D68  360B               	rlcf	__tdiv_to_l_@quot+1,f,c
  4397  001D6A  360C               	rlcf	__tdiv_to_l_@quot+2,f,c
  4398  001D6C  360D               	rlcf	__tdiv_to_l_@quot+3,f,c
  4399  001D6E  5004               	movf	__tdiv_to_l_@f2,w,c
  4400  001D70  5C01               	subwf	__tdiv_to_l_@f1,w,c
  4401  001D72  5005               	movf	__tdiv_to_l_@f2+1,w,c
  4402  001D74  5802               	subwfb	__tdiv_to_l_@f1+1,w,c
  4403  001D76  5006               	movf	__tdiv_to_l_@f2+2,w,c
  4404  001D78  5803               	subwfb	__tdiv_to_l_@f1+2,w,c
  4405  001D7A  A0D8               	btfss	status,0,c
  4406  001D7C  D007               	goto	l708
  4407  001D7E  5004               	movf	__tdiv_to_l_@f2,w,c
  4408  001D80  5E01               	subwf	__tdiv_to_l_@f1,f,c
  4409  001D82  5005               	movf	__tdiv_to_l_@f2+1,w,c
  4410  001D84  5A02               	subwfb	__tdiv_to_l_@f1+1,f,c
  4411  001D86  5006               	movf	__tdiv_to_l_@f2+2,w,c
  4412  001D88  5A03               	subwfb	__tdiv_to_l_@f1+2,f,c
  4413  001D8A  800A               	bsf	__tdiv_to_l_@quot,0,c
  4414  001D8C                     l708:
  4415  001D8C  90D8               	bcf	status,0,c
  4416  001D8E  3601               	rlcf	__tdiv_to_l_@f1,f,c
  4417  001D90  3602               	rlcf	__tdiv_to_l_@f1+1,f,c
  4418  001D92  3603               	rlcf	__tdiv_to_l_@f1+2,f,c
  4419  001D94  2E0E               	decfsz	__tdiv_to_l_@cntr,f,c
  4420  001D96  D7E6               	goto	l707
  4421  001D98  AE0F               	btfss	__tdiv_to_l_@exp1,7,c
  4422  001D9A  D010               	goto	l2531
  4423  001D9C  500F               	movf	__tdiv_to_l_@exp1,w,c
  4424  001D9E  0A80               	xorlw	128
  4425  001DA0  6E07               	movwf	??__tdiv_to_l_& (0+255),c
  4426  001DA2  0EE9               	movlw	233
  4427  001DA4  0A80               	xorlw	128
  4428  001DA6  5C07               	subwf	??__tdiv_to_l_,w,c
  4429  001DA8  A0D8               	btfss	status,0,c
  4430  001DAA  D00B               	goto	u2680
  4431  001DAC                     l2527:
  4432  001DAC  90D8               	bcf	status,0,c
  4433  001DAE  320D               	rrcf	__tdiv_to_l_@quot+3,f,c
  4434  001DB0  320C               	rrcf	__tdiv_to_l_@quot+2,f,c
  4435  001DB2  320B               	rrcf	__tdiv_to_l_@quot+1,f,c
  4436  001DB4  320A               	rrcf	__tdiv_to_l_@quot,f,c
  4437  001DB6  3E0F               	incfsz	__tdiv_to_l_@exp1,f,c
  4438  001DB8  D7F9               	goto	l2527
  4439  001DBA  D014               	goto	l714
  4440  001DBC                     l2531:
  4441  001DBC  0E17               	movlw	23
  4442  001DBE  640F               	cpfsgt	__tdiv_to_l_@exp1,c
  4443  001DC0  D00F               	goto	l2539
  4444  001DC2                     u2680:
  4445  001DC2  0E00               	movlw	0
  4446  001DC4  6E01               	movwf	?__tdiv_to_l_,c
  4447  001DC6  0E00               	movlw	0
  4448  001DC8  6E02               	movwf	?__tdiv_to_l_+1,c
  4449  001DCA  0E00               	movlw	0
  4450  001DCC  6E03               	movwf	?__tdiv_to_l_+2,c
  4451  001DCE  0E00               	movlw	0
  4452  001DD0  6E04               	movwf	?__tdiv_to_l_+3,c
  4453  001DD2  D010               	goto	l705
  4454  001DD4                     l2537:
  4455  001DD4  90D8               	bcf	status,0,c
  4456  001DD6  360A               	rlcf	__tdiv_to_l_@quot,f,c
  4457  001DD8  360B               	rlcf	__tdiv_to_l_@quot+1,f,c
  4458  001DDA  360C               	rlcf	__tdiv_to_l_@quot+2,f,c
  4459  001DDC  360D               	rlcf	__tdiv_to_l_@quot+3,f,c
  4460  001DDE  060F               	decf	__tdiv_to_l_@exp1,f,c
  4461  001DE0                     l2539:
  4462  001DE0  660F               	tstfsz	__tdiv_to_l_@exp1,c
  4463  001DE2  D7F8               	goto	l2537
  4464  001DE4                     l714:
  4465  001DE4  C00A  F001         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  4466  001DE8  C00B  F002         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  4467  001DEC  C00C  F003         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  4468  001DF0  C00D  F004         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  4469  001DF4                     l705:
  4470  001DF4  0012               	return	
  4471  001DF6                     __end_of__tdiv_to_l_:
  4472                           	opt stack 0
  4473                           tblptru	equ	0xFF8
  4474                           tblptrh	equ	0xFF7
  4475                           tblptrl	equ	0xFF6
  4476                           tablat	equ	0xFF5
  4477                           prodh	equ	0xFF4
  4478                           prodl	equ	0xFF3
  4479                           postinc0	equ	0xFEE
  4480                           wreg	equ	0xFE8
  4481                           postdec1	equ	0xFE5
  4482                           fsr1l	equ	0xFE1
  4483                           indf2	equ	0xFDF
  4484                           postinc2	equ	0xFDE
  4485                           postdec2	equ	0xFDD
  4486                           fsr2h	equ	0xFDA
  4487                           fsr2l	equ	0xFD9
  4488                           status	equ	0xFD8
  4489                           
  4490 ;; *************** function __div_to_l_ *****************
  4491 ;; Defined at:
  4492 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\fldivl.c"
  4493 ;; Parameters:    Size  Location     Type
  4494 ;;  f1              3    0[COMRAM] unsigned long 
  4495 ;;  f2              3    3[COMRAM] unsigned long 
  4496 ;; Auto vars:     Size  Location     Type
  4497 ;;  quot            4   10[COMRAM] unsigned long 
  4498 ;;  exp1            1   15[COMRAM] unsigned char 
  4499 ;;  cntr            1   14[COMRAM] unsigned char 
  4500 ;; Return value:  Size  Location     Type
  4501 ;;                  4    0[COMRAM] unsigned long 
  4502 ;; Registers used:
  4503 ;;		wreg, status,2, status,0
  4504 ;; Tracked objects:
  4505 ;;		On entry : 0/0
  4506 ;;		On exit  : 0/0
  4507 ;;		Unchanged: 0/0
  4508 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4509 ;;      Params:         6       0       0       0       0       0       0       0       0
  4510 ;;      Locals:         6       0       0       0       0       0       0       0       0
  4511 ;;      Temps:          4       0       0       0       0       0       0       0       0
  4512 ;;      Totals:        16       0       0       0       0       0       0       0       0
  4513 ;;Total ram usage:       16 bytes
  4514 ;; Hardware stack levels used:    1
  4515 ;; This function calls:
  4516 ;;		Nothing
  4517 ;; This function is called by:
  4518 ;;		_sprintf
  4519 ;; This function uses a non-reentrant model
  4520 ;;
  4521                           
  4522                           	psect	text13
  4523  0019AE                     __ptext13:
  4524                           	opt stack 0
  4525  0019AE                     __div_to_l_:
  4526                           	opt stack 28
  4527                           
  4528                           ;incstack = 0
  4529  0019AE  C001  F007         	movff	__div_to_l_@f1,??__div_to_l_
  4530  0019B2  C002  F008         	movff	__div_to_l_@f1+1,??__div_to_l_+1
  4531  0019B6  C003  F009         	movff	__div_to_l_@f1+2,??__div_to_l_+2
  4532  0019BA  C004  F00A         	movff	__div_to_l_@f1+3,??__div_to_l_+3
  4533  0019BE  0E18               	movlw	24
  4534  0019C0  D005               	goto	u2700
  4535  0019C2                     u2705:
  4536  0019C2  90D8               	bcf	status,0,c
  4537  0019C4  320A               	rrcf	??__div_to_l_+3,f,c
  4538  0019C6  3209               	rrcf	??__div_to_l_+2,f,c
  4539  0019C8  3208               	rrcf	??__div_to_l_+1,f,c
  4540  0019CA  3207               	rrcf	??__div_to_l_,f,c
  4541  0019CC                     u2700:
  4542  0019CC  2EE8               	decfsz	wreg,f,c
  4543  0019CE  D7F9               	goto	u2705
  4544  0019D0  5007               	movf	??__div_to_l_,w,c
  4545  0019D2  6E10               	movwf	__div_to_l_@exp1,c
  4546  0019D4  6610               	tstfsz	__div_to_l_@exp1& (0+255),c
  4547  0019D6  D001               	goto	l2547
  4548  0019D8  D06B               	goto	u2770
  4549  0019DA                     l2547:
  4550  0019DA  C004  F007         	movff	__div_to_l_@f2,??__div_to_l_
  4551  0019DE  C005  F008         	movff	__div_to_l_@f2+1,??__div_to_l_+1
  4552  0019E2  C006  F009         	movff	__div_to_l_@f2+2,??__div_to_l_+2
  4553  0019E6  C007  F00A         	movff	__div_to_l_@f2+3,??__div_to_l_+3
  4554  0019EA  0E18               	movlw	24
  4555  0019EC  D005               	goto	u2720
  4556  0019EE                     u2725:
  4557  0019EE  90D8               	bcf	status,0,c
  4558  0019F0  320A               	rrcf	??__div_to_l_+3,f,c
  4559  0019F2  3209               	rrcf	??__div_to_l_+2,f,c
  4560  0019F4  3208               	rrcf	??__div_to_l_+1,f,c
  4561  0019F6  3207               	rrcf	??__div_to_l_,f,c
  4562  0019F8                     u2720:
  4563  0019F8  2EE8               	decfsz	wreg,f,c
  4564  0019FA  D7F9               	goto	u2725
  4565  0019FC  5007               	movf	??__div_to_l_,w,c
  4566  0019FE  6E0F               	movwf	__div_to_l_@cntr,c
  4567  001A00  660F               	tstfsz	__div_to_l_@cntr& (0+255),c
  4568  001A02  D001               	goto	l2553
  4569  001A04  D055               	goto	u2770
  4570  001A06                     l2553:
  4571  001A06  8E03               	bsf	__div_to_l_@f1+2,7,c
  4572  001A08  0EFF               	movlw	255
  4573  001A0A  1601               	andwf	__div_to_l_@f1,f,c
  4574  001A0C  0EFF               	movlw	255
  4575  001A0E  1602               	andwf	__div_to_l_@f1+1,f,c
  4576  001A10  0EFF               	movlw	255
  4577  001A12  1603               	andwf	__div_to_l_@f1+2,f,c
  4578  001A14  0E00               	movlw	0
  4579  001A16  1604               	andwf	__div_to_l_@f1+3,f,c
  4580  001A18  8E06               	bsf	__div_to_l_@f2+2,7,c
  4581  001A1A  0EFF               	movlw	255
  4582  001A1C  1604               	andwf	__div_to_l_@f2,f,c
  4583  001A1E  0EFF               	movlw	255
  4584  001A20  1605               	andwf	__div_to_l_@f2+1,f,c
  4585  001A22  0EFF               	movlw	255
  4586  001A24  1606               	andwf	__div_to_l_@f2+2,f,c
  4587  001A26  0E00               	movlw	0
  4588  001A28  1607               	andwf	__div_to_l_@f2+3,f,c
  4589  001A2A  0E00               	movlw	0
  4590  001A2C  6E0B               	movwf	__div_to_l_@quot,c
  4591  001A2E  0E00               	movlw	0
  4592  001A30  6E0C               	movwf	__div_to_l_@quot+1,c
  4593  001A32  0E00               	movlw	0
  4594  001A34  6E0D               	movwf	__div_to_l_@quot+2,c
  4595  001A36  0E00               	movlw	0
  4596  001A38  6E0E               	movwf	__div_to_l_@quot+3,c
  4597  001A3A  0E7F               	movlw	127
  4598  001A3C  5E10               	subwf	__div_to_l_@exp1,f,c
  4599  001A3E  500F               	movf	__div_to_l_@cntr,w,c
  4600  001A40  0FA0               	addlw	160
  4601  001A42  5E10               	subwf	__div_to_l_@exp1,f,c
  4602  001A44  0E20               	movlw	32
  4603  001A46  6E0F               	movwf	__div_to_l_@cntr,c
  4604  001A48                     l2567:
  4605  001A48  90D8               	bcf	status,0,c
  4606  001A4A  360B               	rlcf	__div_to_l_@quot,f,c
  4607  001A4C  360C               	rlcf	__div_to_l_@quot+1,f,c
  4608  001A4E  360D               	rlcf	__div_to_l_@quot+2,f,c
  4609  001A50  360E               	rlcf	__div_to_l_@quot+3,f,c
  4610  001A52  5004               	movf	__div_to_l_@f2,w,c
  4611  001A54  5C01               	subwf	__div_to_l_@f1,w,c
  4612  001A56  5005               	movf	__div_to_l_@f2+1,w,c
  4613  001A58  5802               	subwfb	__div_to_l_@f1+1,w,c
  4614  001A5A  5006               	movf	__div_to_l_@f2+2,w,c
  4615  001A5C  5803               	subwfb	__div_to_l_@f1+2,w,c
  4616  001A5E  5007               	movf	__div_to_l_@f2+3,w,c
  4617  001A60  5804               	subwfb	__div_to_l_@f1+3,w,c
  4618  001A62  A0D8               	btfss	status,0,c
  4619  001A64  D009               	goto	l2575
  4620  001A66  5004               	movf	__div_to_l_@f2,w,c
  4621  001A68  5E01               	subwf	__div_to_l_@f1,f,c
  4622  001A6A  5005               	movf	__div_to_l_@f2+1,w,c
  4623  001A6C  5A02               	subwfb	__div_to_l_@f1+1,f,c
  4624  001A6E  5006               	movf	__div_to_l_@f2+2,w,c
  4625  001A70  5A03               	subwfb	__div_to_l_@f1+2,f,c
  4626  001A72  5007               	movf	__div_to_l_@f2+3,w,c
  4627  001A74  5A04               	subwfb	__div_to_l_@f1+3,f,c
  4628  001A76  800B               	bsf	__div_to_l_@quot,0,c
  4629  001A78                     l2575:
  4630  001A78  90D8               	bcf	status,0,c
  4631  001A7A  3601               	rlcf	__div_to_l_@f1,f,c
  4632  001A7C  3602               	rlcf	__div_to_l_@f1+1,f,c
  4633  001A7E  3603               	rlcf	__div_to_l_@f1+2,f,c
  4634  001A80  3604               	rlcf	__div_to_l_@f1+3,f,c
  4635  001A82  2E0F               	decfsz	__div_to_l_@cntr,f,c
  4636  001A84  D7E1               	goto	l2567
  4637  001A86  AE10               	btfss	__div_to_l_@exp1,7,c
  4638  001A88  D010               	goto	l2589
  4639  001A8A  5010               	movf	__div_to_l_@exp1,w,c
  4640  001A8C  0A80               	xorlw	128
  4641  001A8E  6E07               	movwf	??__div_to_l_& (0+255),c
  4642  001A90  0EE1               	movlw	225
  4643  001A92  0A80               	xorlw	128
  4644  001A94  5C07               	subwf	??__div_to_l_,w,c
  4645  001A96  A0D8               	btfss	status,0,c
  4646  001A98  D00B               	goto	u2770
  4647  001A9A                     l2585:
  4648  001A9A  90D8               	bcf	status,0,c
  4649  001A9C  320E               	rrcf	__div_to_l_@quot+3,f,c
  4650  001A9E  320D               	rrcf	__div_to_l_@quot+2,f,c
  4651  001AA0  320C               	rrcf	__div_to_l_@quot+1,f,c
  4652  001AA2  320B               	rrcf	__div_to_l_@quot,f,c
  4653  001AA4  3E10               	incfsz	__div_to_l_@exp1,f,c
  4654  001AA6  D7F9               	goto	l2585
  4655  001AA8  D014               	goto	l596
  4656  001AAA                     l2589:
  4657  001AAA  0E1F               	movlw	31
  4658  001AAC  6410               	cpfsgt	__div_to_l_@exp1,c
  4659  001AAE  D00F               	goto	l2597
  4660  001AB0                     u2770:
  4661  001AB0  0E00               	movlw	0
  4662  001AB2  6E01               	movwf	?__div_to_l_,c
  4663  001AB4  0E00               	movlw	0
  4664  001AB6  6E02               	movwf	?__div_to_l_+1,c
  4665  001AB8  0E00               	movlw	0
  4666  001ABA  6E03               	movwf	?__div_to_l_+2,c
  4667  001ABC  0E00               	movlw	0
  4668  001ABE  6E04               	movwf	?__div_to_l_+3,c
  4669  001AC0  D010               	goto	l587
  4670  001AC2                     l2595:
  4671  001AC2  90D8               	bcf	status,0,c
  4672  001AC4  360B               	rlcf	__div_to_l_@quot,f,c
  4673  001AC6  360C               	rlcf	__div_to_l_@quot+1,f,c
  4674  001AC8  360D               	rlcf	__div_to_l_@quot+2,f,c
  4675  001ACA  360E               	rlcf	__div_to_l_@quot+3,f,c
  4676  001ACC  0610               	decf	__div_to_l_@exp1,f,c
  4677  001ACE                     l2597:
  4678  001ACE  6610               	tstfsz	__div_to_l_@exp1,c
  4679  001AD0  D7F8               	goto	l2595
  4680  001AD2                     l596:
  4681  001AD2  C00B  F001         	movff	__div_to_l_@quot,?__div_to_l_
  4682  001AD6  C00C  F002         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  4683  001ADA  C00D  F003         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  4684  001ADE  C00E  F004         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  4685  001AE2                     l587:
  4686  001AE2  0012               	return	
  4687  001AE4                     __end_of__div_to_l_:
  4688                           	opt stack 0
  4689                           tblptru	equ	0xFF8
  4690                           tblptrh	equ	0xFF7
  4691                           tblptrl	equ	0xFF6
  4692                           tablat	equ	0xFF5
  4693                           prodh	equ	0xFF4
  4694                           prodl	equ	0xFF3
  4695                           postinc0	equ	0xFEE
  4696                           wreg	equ	0xFE8
  4697                           postdec1	equ	0xFE5
  4698                           fsr1l	equ	0xFE1
  4699                           indf2	equ	0xFDF
  4700                           postinc2	equ	0xFDE
  4701                           postdec2	equ	0xFDD
  4702                           fsr2h	equ	0xFDA
  4703                           fsr2l	equ	0xFD9
  4704                           status	equ	0xFD8
  4705                           
  4706 ;; *************** function ___lltoft *****************
  4707 ;; Defined at:
  4708 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\lltoft.c"
  4709 ;; Parameters:    Size  Location     Type
  4710 ;;  c               4    8[COMRAM] unsigned long 
  4711 ;; Auto vars:     Size  Location     Type
  4712 ;;  exp             1   16[COMRAM] unsigned char 
  4713 ;; Return value:  Size  Location     Type
  4714 ;;                  3    8[COMRAM] float 
  4715 ;; Registers used:
  4716 ;;		wreg, status,2, status,0, cstack
  4717 ;; Tracked objects:
  4718 ;;		On entry : 0/0
  4719 ;;		On exit  : 0/0
  4720 ;;		Unchanged: 0/0
  4721 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4722 ;;      Params:         4       0       0       0       0       0       0       0       0
  4723 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4724 ;;      Temps:          4       0       0       0       0       0       0       0       0
  4725 ;;      Totals:         9       0       0       0       0       0       0       0       0
  4726 ;;Total ram usage:        9 bytes
  4727 ;; Hardware stack levels used:    1
  4728 ;; Hardware stack levels required when called:    1
  4729 ;; This function calls:
  4730 ;;		___ftpack
  4731 ;; This function is called by:
  4732 ;;		_sprintf
  4733 ;; This function uses a non-reentrant model
  4734 ;;
  4735                           
  4736                           	psect	text14
  4737  0026C4                     __ptext14:
  4738                           	opt stack 0
  4739  0026C4                     ___lltoft:
  4740                           	opt stack 27
  4741                           
  4742                           ;incstack = 0
  4743  0026C4  0E8E               	movlw	142
  4744  0026C6  6E11               	movwf	___lltoft@exp,c
  4745  0026C8  D006               	goto	l2715
  4746  0026CA                     l2713:
  4747  0026CA  90D8               	bcf	status,0,c
  4748  0026CC  320C               	rrcf	___lltoft@c+3,f,c
  4749  0026CE  320B               	rrcf	___lltoft@c+2,f,c
  4750  0026D0  320A               	rrcf	___lltoft@c+1,f,c
  4751  0026D2  3209               	rrcf	___lltoft@c,f,c
  4752  0026D4  2A11               	incf	___lltoft@exp,f,c
  4753  0026D6                     l2715:
  4754  0026D6  0E00               	movlw	0
  4755  0026D8  1409               	andwf	___lltoft@c,w,c
  4756  0026DA  6E0D               	movwf	??___lltoft& (0+255),c
  4757  0026DC  0E00               	movlw	0
  4758  0026DE  140A               	andwf	___lltoft@c+1,w,c
  4759  0026E0  6E0E               	movwf	(??___lltoft+1)& (0+255),c
  4760  0026E2  0E00               	movlw	0
  4761  0026E4  140B               	andwf	___lltoft@c+2,w,c
  4762  0026E6  6E0F               	movwf	(??___lltoft+2)& (0+255),c
  4763  0026E8  0EFF               	movlw	255
  4764  0026EA  140C               	andwf	___lltoft@c+3,w,c
  4765  0026EC  6E10               	movwf	(??___lltoft+3)& (0+255),c
  4766  0026EE  5010               	movf	??___lltoft+3,w,c
  4767  0026F0  100D               	iorwf	??___lltoft,w,c
  4768  0026F2  100E               	iorwf	??___lltoft+1,w,c
  4769  0026F4  100F               	iorwf	??___lltoft+2,w,c
  4770  0026F6  A4D8               	btfss	status,2,c
  4771  0026F8  D7E8               	goto	l2713
  4772  0026FA  C009  F001         	movff	___lltoft@c,___ftpack@arg
  4773  0026FE  C00A  F002         	movff	___lltoft@c+1,___ftpack@arg+1
  4774  002702  C00B  F003         	movff	___lltoft@c+2,___ftpack@arg+2
  4775  002706  C011  F004         	movff	___lltoft@exp,___ftpack@exp
  4776  00270A  0E00               	movlw	0
  4777  00270C  6E05               	movwf	___ftpack@sign,c
  4778  00270E  EC90  F010         	call	___ftpack	;wreg free
  4779  002712  C001  F009         	movff	?___ftpack,?___lltoft
  4780  002716  C002  F00A         	movff	?___ftpack+1,?___lltoft+1
  4781  00271A  C003  F00B         	movff	?___ftpack+2,?___lltoft+2
  4782  00271E  0012               	return	
  4783  002720                     __end_of___lltoft:
  4784                           	opt stack 0
  4785                           tblptru	equ	0xFF8
  4786                           tblptrh	equ	0xFF7
  4787                           tblptrl	equ	0xFF6
  4788                           tablat	equ	0xFF5
  4789                           prodh	equ	0xFF4
  4790                           prodl	equ	0xFF3
  4791                           postinc0	equ	0xFEE
  4792                           wreg	equ	0xFE8
  4793                           postdec1	equ	0xFE5
  4794                           fsr1l	equ	0xFE1
  4795                           indf2	equ	0xFDF
  4796                           postinc2	equ	0xFDE
  4797                           postdec2	equ	0xFDD
  4798                           fsr2h	equ	0xFDA
  4799                           fsr2l	equ	0xFD9
  4800                           status	equ	0xFD8
  4801                           
  4802 ;; *************** function ___llmod *****************
  4803 ;; Defined at:
  4804 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\llmod.c"
  4805 ;; Parameters:    Size  Location     Type
  4806 ;;  dividend        4    0[COMRAM] unsigned long 
  4807 ;;  divisor         4    4[COMRAM] unsigned long 
  4808 ;; Auto vars:     Size  Location     Type
  4809 ;;  counter         1    8[COMRAM] unsigned char 
  4810 ;; Return value:  Size  Location     Type
  4811 ;;                  4    0[COMRAM] unsigned long 
  4812 ;; Registers used:
  4813 ;;		wreg, status,2, status,0
  4814 ;; Tracked objects:
  4815 ;;		On entry : 0/0
  4816 ;;		On exit  : 0/0
  4817 ;;		Unchanged: 0/0
  4818 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4819 ;;      Params:         8       0       0       0       0       0       0       0       0
  4820 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4821 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4822 ;;      Totals:         9       0       0       0       0       0       0       0       0
  4823 ;;Total ram usage:        9 bytes
  4824 ;; Hardware stack levels used:    1
  4825 ;; This function calls:
  4826 ;;		Nothing
  4827 ;; This function is called by:
  4828 ;;		_sprintf
  4829 ;; This function uses a non-reentrant model
  4830 ;;
  4831                           
  4832                           	psect	text15
  4833  0025FA                     __ptext15:
  4834                           	opt stack 0
  4835  0025FA                     ___llmod:
  4836                           	opt stack 28
  4837                           
  4838                           ;incstack = 0
  4839  0025FA  5008               	movf	___llmod@divisor+3,w,c
  4840  0025FC  1005               	iorwf	___llmod@divisor,w,c
  4841  0025FE  1006               	iorwf	___llmod@divisor+1,w,c
  4842  002600  1007               	iorwf	___llmod@divisor+2,w,c
  4843  002602  B4D8               	btfsc	status,2,c
  4844  002604  D024               	goto	l803
  4845  002606  0E01               	movlw	1
  4846  002608  6E09               	movwf	___llmod@counter,c
  4847  00260A  D006               	goto	l2701
  4848  00260C                     l2699:
  4849  00260C  90D8               	bcf	status,0,c
  4850  00260E  3605               	rlcf	___llmod@divisor,f,c
  4851  002610  3606               	rlcf	___llmod@divisor+1,f,c
  4852  002612  3607               	rlcf	___llmod@divisor+2,f,c
  4853  002614  3608               	rlcf	___llmod@divisor+3,f,c
  4854  002616  2A09               	incf	___llmod@counter,f,c
  4855  002618                     l2701:
  4856  002618  AE08               	btfss	___llmod@divisor+3,7,c
  4857  00261A  D7F8               	goto	l2699
  4858  00261C                     l2703:
  4859  00261C  5005               	movf	___llmod@divisor,w,c
  4860  00261E  5C01               	subwf	___llmod@dividend,w,c
  4861  002620  5006               	movf	___llmod@divisor+1,w,c
  4862  002622  5802               	subwfb	___llmod@dividend+1,w,c
  4863  002624  5007               	movf	___llmod@divisor+2,w,c
  4864  002626  5803               	subwfb	___llmod@dividend+2,w,c
  4865  002628  5008               	movf	___llmod@divisor+3,w,c
  4866  00262A  5804               	subwfb	___llmod@dividend+3,w,c
  4867  00262C  A0D8               	btfss	status,0,c
  4868  00262E  D008               	goto	l2707
  4869  002630  5005               	movf	___llmod@divisor,w,c
  4870  002632  5E01               	subwf	___llmod@dividend,f,c
  4871  002634  5006               	movf	___llmod@divisor+1,w,c
  4872  002636  5A02               	subwfb	___llmod@dividend+1,f,c
  4873  002638  5007               	movf	___llmod@divisor+2,w,c
  4874  00263A  5A03               	subwfb	___llmod@dividend+2,f,c
  4875  00263C  5008               	movf	___llmod@divisor+3,w,c
  4876  00263E  5A04               	subwfb	___llmod@dividend+3,f,c
  4877  002640                     l2707:
  4878  002640  90D8               	bcf	status,0,c
  4879  002642  3208               	rrcf	___llmod@divisor+3,f,c
  4880  002644  3207               	rrcf	___llmod@divisor+2,f,c
  4881  002646  3206               	rrcf	___llmod@divisor+1,f,c
  4882  002648  3205               	rrcf	___llmod@divisor,f,c
  4883  00264A  2E09               	decfsz	___llmod@counter,f,c
  4884  00264C  D7E7               	goto	l2703
  4885  00264E                     l803:
  4886  00264E  C001  F001         	movff	___llmod@dividend,?___llmod
  4887  002652  C002  F002         	movff	___llmod@dividend+1,?___llmod+1
  4888  002656  C003  F003         	movff	___llmod@dividend+2,?___llmod+2
  4889  00265A  C004  F004         	movff	___llmod@dividend+3,?___llmod+3
  4890  00265E  0012               	return	
  4891  002660                     __end_of___llmod:
  4892                           	opt stack 0
  4893                           tblptru	equ	0xFF8
  4894                           tblptrh	equ	0xFF7
  4895                           tblptrl	equ	0xFF6
  4896                           tablat	equ	0xFF5
  4897                           prodh	equ	0xFF4
  4898                           prodl	equ	0xFF3
  4899                           postinc0	equ	0xFEE
  4900                           wreg	equ	0xFE8
  4901                           postdec1	equ	0xFE5
  4902                           fsr1l	equ	0xFE1
  4903                           indf2	equ	0xFDF
  4904                           postinc2	equ	0xFDE
  4905                           postdec2	equ	0xFDD
  4906                           fsr2h	equ	0xFDA
  4907                           fsr2l	equ	0xFD9
  4908                           status	equ	0xFD8
  4909                           
  4910 ;; *************** function ___lldiv *****************
  4911 ;; Defined at:
  4912 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\lldiv.c"
  4913 ;; Parameters:    Size  Location     Type
  4914 ;;  dividend        4    0[COMRAM] unsigned long 
  4915 ;;  divisor         4    4[COMRAM] unsigned long 
  4916 ;; Auto vars:     Size  Location     Type
  4917 ;;  quotient        4    8[COMRAM] unsigned long 
  4918 ;;  counter         1   12[COMRAM] unsigned char 
  4919 ;; Return value:  Size  Location     Type
  4920 ;;                  4    0[COMRAM] unsigned long 
  4921 ;; Registers used:
  4922 ;;		wreg, status,2, status,0
  4923 ;; Tracked objects:
  4924 ;;		On entry : 0/0
  4925 ;;		On exit  : 0/0
  4926 ;;		Unchanged: 0/0
  4927 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4928 ;;      Params:         8       0       0       0       0       0       0       0       0
  4929 ;;      Locals:         5       0       0       0       0       0       0       0       0
  4930 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4931 ;;      Totals:        13       0       0       0       0       0       0       0       0
  4932 ;;Total ram usage:       13 bytes
  4933 ;; Hardware stack levels used:    1
  4934 ;; This function calls:
  4935 ;;		Nothing
  4936 ;; This function is called by:
  4937 ;;		_sprintf
  4938 ;; This function uses a non-reentrant model
  4939 ;;
  4940                           
  4941                           	psect	text16
  4942  002578                     __ptext16:
  4943                           	opt stack 0
  4944  002578                     ___lldiv:
  4945                           	opt stack 28
  4946                           
  4947                           ;incstack = 0
  4948  002578  0E00               	movlw	0
  4949  00257A  6E09               	movwf	___lldiv@quotient,c
  4950  00257C  0E00               	movlw	0
  4951  00257E  6E0A               	movwf	___lldiv@quotient+1,c
  4952  002580  0E00               	movlw	0
  4953  002582  6E0B               	movwf	___lldiv@quotient+2,c
  4954  002584  0E00               	movlw	0
  4955  002586  6E0C               	movwf	___lldiv@quotient+3,c
  4956  002588  5008               	movf	___lldiv@divisor+3,w,c
  4957  00258A  1005               	iorwf	___lldiv@divisor,w,c
  4958  00258C  1006               	iorwf	___lldiv@divisor+1,w,c
  4959  00258E  1007               	iorwf	___lldiv@divisor+2,w,c
  4960  002590  B4D8               	btfsc	status,2,c
  4961  002592  D02A               	goto	l793
  4962  002594  0E01               	movlw	1
  4963  002596  6E0D               	movwf	___lldiv@counter,c
  4964  002598  D006               	goto	l2681
  4965  00259A                     l2679:
  4966  00259A  90D8               	bcf	status,0,c
  4967  00259C  3605               	rlcf	___lldiv@divisor,f,c
  4968  00259E  3606               	rlcf	___lldiv@divisor+1,f,c
  4969  0025A0  3607               	rlcf	___lldiv@divisor+2,f,c
  4970  0025A2  3608               	rlcf	___lldiv@divisor+3,f,c
  4971  0025A4  2A0D               	incf	___lldiv@counter,f,c
  4972  0025A6                     l2681:
  4973  0025A6  AE08               	btfss	___lldiv@divisor+3,7,c
  4974  0025A8  D7F8               	goto	l2679
  4975  0025AA                     l2683:
  4976  0025AA  90D8               	bcf	status,0,c
  4977  0025AC  3609               	rlcf	___lldiv@quotient,f,c
  4978  0025AE  360A               	rlcf	___lldiv@quotient+1,f,c
  4979  0025B0  360B               	rlcf	___lldiv@quotient+2,f,c
  4980  0025B2  360C               	rlcf	___lldiv@quotient+3,f,c
  4981  0025B4  5005               	movf	___lldiv@divisor,w,c
  4982  0025B6  5C01               	subwf	___lldiv@dividend,w,c
  4983  0025B8  5006               	movf	___lldiv@divisor+1,w,c
  4984  0025BA  5802               	subwfb	___lldiv@dividend+1,w,c
  4985  0025BC  5007               	movf	___lldiv@divisor+2,w,c
  4986  0025BE  5803               	subwfb	___lldiv@dividend+2,w,c
  4987  0025C0  5008               	movf	___lldiv@divisor+3,w,c
  4988  0025C2  5804               	subwfb	___lldiv@dividend+3,w,c
  4989  0025C4  A0D8               	btfss	status,0,c
  4990  0025C6  D009               	goto	l2691
  4991  0025C8  5005               	movf	___lldiv@divisor,w,c
  4992  0025CA  5E01               	subwf	___lldiv@dividend,f,c
  4993  0025CC  5006               	movf	___lldiv@divisor+1,w,c
  4994  0025CE  5A02               	subwfb	___lldiv@dividend+1,f,c
  4995  0025D0  5007               	movf	___lldiv@divisor+2,w,c
  4996  0025D2  5A03               	subwfb	___lldiv@dividend+2,f,c
  4997  0025D4  5008               	movf	___lldiv@divisor+3,w,c
  4998  0025D6  5A04               	subwfb	___lldiv@dividend+3,f,c
  4999  0025D8  8009               	bsf	___lldiv@quotient,0,c
  5000  0025DA                     l2691:
  5001  0025DA  90D8               	bcf	status,0,c
  5002  0025DC  3208               	rrcf	___lldiv@divisor+3,f,c
  5003  0025DE  3207               	rrcf	___lldiv@divisor+2,f,c
  5004  0025E0  3206               	rrcf	___lldiv@divisor+1,f,c
  5005  0025E2  3205               	rrcf	___lldiv@divisor,f,c
  5006  0025E4  2E0D               	decfsz	___lldiv@counter,f,c
  5007  0025E6  D7E1               	goto	l2683
  5008  0025E8                     l793:
  5009  0025E8  C009  F001         	movff	___lldiv@quotient,?___lldiv
  5010  0025EC  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
  5011  0025F0  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
  5012  0025F4  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
  5013  0025F8  0012               	return	
  5014  0025FA                     __end_of___lldiv:
  5015                           	opt stack 0
  5016                           tblptru	equ	0xFF8
  5017                           tblptrh	equ	0xFF7
  5018                           tblptrl	equ	0xFF6
  5019                           tablat	equ	0xFF5
  5020                           prodh	equ	0xFF4
  5021                           prodl	equ	0xFF3
  5022                           postinc0	equ	0xFEE
  5023                           wreg	equ	0xFE8
  5024                           postdec1	equ	0xFE5
  5025                           fsr1l	equ	0xFE1
  5026                           indf2	equ	0xFDF
  5027                           postinc2	equ	0xFDE
  5028                           postdec2	equ	0xFDD
  5029                           fsr2h	equ	0xFDA
  5030                           fsr2l	equ	0xFD9
  5031                           status	equ	0xFD8
  5032                           
  5033 ;; *************** function ___fttol *****************
  5034 ;; Defined at:
  5035 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\fttol.c"
  5036 ;; Parameters:    Size  Location     Type
  5037 ;;  f1              3   42[COMRAM] float 
  5038 ;; Auto vars:     Size  Location     Type
  5039 ;;  lval            4   52[COMRAM] unsigned long 
  5040 ;;  exp1            1   56[COMRAM] unsigned char 
  5041 ;;  sign1           1   51[COMRAM] unsigned char 
  5042 ;; Return value:  Size  Location     Type
  5043 ;;                  4   42[COMRAM] long 
  5044 ;; Registers used:
  5045 ;;		wreg, status,2, status,0
  5046 ;; Tracked objects:
  5047 ;;		On entry : 0/0
  5048 ;;		On exit  : 0/0
  5049 ;;		Unchanged: 0/0
  5050 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5051 ;;      Params:         4       0       0       0       0       0       0       0       0
  5052 ;;      Locals:         6       0       0       0       0       0       0       0       0
  5053 ;;      Temps:          5       0       0       0       0       0       0       0       0
  5054 ;;      Totals:        15       0       0       0       0       0       0       0       0
  5055 ;;Total ram usage:       15 bytes
  5056 ;; Hardware stack levels used:    1
  5057 ;; This function calls:
  5058 ;;		Nothing
  5059 ;; This function is called by:
  5060 ;;		_sprintf
  5061 ;; This function uses a non-reentrant model
  5062 ;;
  5063                           
  5064                           	psect	text17
  5065  001EDA                     __ptext17:
  5066                           	opt stack 0
  5067  001EDA                     ___fttol:
  5068                           	opt stack 28
  5069                           
  5070                           ;incstack = 0
  5071  001EDA  C02D  F02F         	movff	___fttol@f1+2,??___fttol
  5072  001EDE  6A30               	clrf	(??___fttol+1)& (0+255),c
  5073  001EE0  6A31               	clrf	(??___fttol+2)& (0+255),c
  5074  001EE2  342C               	rlcf	___fttol@f1+1,w,c
  5075  001EE4  362F               	rlcf	??___fttol& (0+255),f,c
  5076  001EE6  E301               	bnc	u2831
  5077  001EE8  8030               	bsf	(??___fttol+1)& (0+255),0,c
  5078  001EEA                     u2831:
  5079  001EEA  502F               	movf	??___fttol,w,c
  5080  001EEC  6E39               	movwf	___fttol@exp1,c
  5081  001EEE  6639               	tstfsz	___fttol@exp1& (0+255),c
  5082  001EF0  D001               	goto	l2633
  5083  001EF2  D038               	goto	u2880
  5084  001EF4                     l2633:
  5085  001EF4  0E17               	movlw	23
  5086  001EF6  6E2F               	movwf	??___fttol& (0+255),c
  5087  001EF8  C02B  F030         	movff	___fttol@f1,??___fttol+1
  5088  001EFC  C02C  F031         	movff	___fttol@f1+1,??___fttol+2
  5089  001F00  C02D  F032         	movff	___fttol@f1+2,??___fttol+3
  5090  001F04  282F               	incf	??___fttol,w,c
  5091  001F06  6E33               	movwf	(??___fttol+4)& (0+255),c
  5092  001F08  D004               	goto	u2850
  5093  001F0A                     u2855:
  5094  001F0A  90D8               	bcf	status,0,c
  5095  001F0C  3232               	rrcf	??___fttol+3,f,c
  5096  001F0E  3231               	rrcf	??___fttol+2,f,c
  5097  001F10  3230               	rrcf	??___fttol+1,f,c
  5098  001F12                     u2850:
  5099  001F12  2E33               	decfsz	(??___fttol+4)& (0+255),f,c
  5100  001F14  D7FA               	goto	u2855
  5101  001F16  5030               	movf	??___fttol+1,w,c
  5102  001F18  6E34               	movwf	___fttol@sign1,c
  5103  001F1A  8E2C               	bsf	___fttol@f1+1,7,c
  5104  001F1C  0EFF               	movlw	255
  5105  001F1E  162B               	andwf	___fttol@f1,f,c
  5106  001F20  0EFF               	movlw	255
  5107  001F22  162C               	andwf	___fttol@f1+1,f,c
  5108  001F24  0E00               	movlw	0
  5109  001F26  162D               	andwf	___fttol@f1+2,f,c
  5110  001F28  502B               	movf	___fttol@f1,w,c
  5111  001F2A  6E35               	movwf	___fttol@lval,c
  5112  001F2C  502C               	movf	___fttol@f1+1,w,c
  5113  001F2E  6E36               	movwf	___fttol@lval+1,c
  5114  001F30  502D               	movf	___fttol@f1+2,w,c
  5115  001F32  6E37               	movwf	___fttol@lval+2,c
  5116  001F34  6A38               	clrf	___fttol@lval+3,c
  5117  001F36  0E8E               	movlw	142
  5118  001F38  5E39               	subwf	___fttol@exp1,f,c
  5119  001F3A  AE39               	btfss	___fttol@exp1,7,c
  5120  001F3C  D010               	goto	l2655
  5121  001F3E  5039               	movf	___fttol@exp1,w,c
  5122  001F40  0A80               	xorlw	128
  5123  001F42  6E2F               	movwf	??___fttol& (0+255),c
  5124  001F44  0EF1               	movlw	241
  5125  001F46  0A80               	xorlw	128
  5126  001F48  5C2F               	subwf	??___fttol,w,c
  5127  001F4A  A0D8               	btfss	status,0,c
  5128  001F4C  D00B               	goto	u2880
  5129  001F4E                     l2651:
  5130  001F4E  90D8               	bcf	status,0,c
  5131  001F50  3238               	rrcf	___fttol@lval+3,f,c
  5132  001F52  3237               	rrcf	___fttol@lval+2,f,c
  5133  001F54  3236               	rrcf	___fttol@lval+1,f,c
  5134  001F56  3235               	rrcf	___fttol@lval,f,c
  5135  001F58  3E39               	incfsz	___fttol@exp1,f,c
  5136  001F5A  D7F9               	goto	l2651
  5137  001F5C  D014               	goto	l2665
  5138  001F5E                     l2655:
  5139  001F5E  0E17               	movlw	23
  5140  001F60  6439               	cpfsgt	___fttol@exp1,c
  5141  001F62  D00F               	goto	l2663
  5142  001F64                     u2880:
  5143  001F64  0E00               	movlw	0
  5144  001F66  6E2B               	movwf	?___fttol,c
  5145  001F68  0E00               	movlw	0
  5146  001F6A  6E2C               	movwf	?___fttol+1,c
  5147  001F6C  0E00               	movlw	0
  5148  001F6E  6E2D               	movwf	?___fttol+2,c
  5149  001F70  0E00               	movlw	0
  5150  001F72  6E2E               	movwf	?___fttol+3,c
  5151  001F74  D01B               	goto	l749
  5152  001F76                     l2661:
  5153  001F76  90D8               	bcf	status,0,c
  5154  001F78  3635               	rlcf	___fttol@lval,f,c
  5155  001F7A  3636               	rlcf	___fttol@lval+1,f,c
  5156  001F7C  3637               	rlcf	___fttol@lval+2,f,c
  5157  001F7E  3638               	rlcf	___fttol@lval+3,f,c
  5158  001F80  0639               	decf	___fttol@exp1,f,c
  5159  001F82                     l2663:
  5160  001F82  6639               	tstfsz	___fttol@exp1,c
  5161  001F84  D7F8               	goto	l2661
  5162  001F86                     l2665:
  5163  001F86  5034               	movf	___fttol@sign1,w,c
  5164  001F88  B4D8               	btfsc	status,2,c
  5165  001F8A  D008               	goto	l2669
  5166  001F8C  1E38               	comf	___fttol@lval+3,f,c
  5167  001F8E  1E37               	comf	___fttol@lval+2,f,c
  5168  001F90  1E36               	comf	___fttol@lval+1,f,c
  5169  001F92  6C35               	negf	___fttol@lval,c
  5170  001F94  0E00               	movlw	0
  5171  001F96  2236               	addwfc	___fttol@lval+1,f,c
  5172  001F98  2237               	addwfc	___fttol@lval+2,f,c
  5173  001F9A  2238               	addwfc	___fttol@lval+3,f,c
  5174  001F9C                     l2669:
  5175  001F9C  C035  F02B         	movff	___fttol@lval,?___fttol
  5176  001FA0  C036  F02C         	movff	___fttol@lval+1,?___fttol+1
  5177  001FA4  C037  F02D         	movff	___fttol@lval+2,?___fttol+2
  5178  001FA8  C038  F02E         	movff	___fttol@lval+3,?___fttol+3
  5179  001FAC                     l749:
  5180  001FAC  0012               	return	
  5181  001FAE                     __end_of___fttol:
  5182                           	opt stack 0
  5183                           tblptru	equ	0xFF8
  5184                           tblptrh	equ	0xFF7
  5185                           tblptrl	equ	0xFF6
  5186                           tablat	equ	0xFF5
  5187                           prodh	equ	0xFF4
  5188                           prodl	equ	0xFF3
  5189                           postinc0	equ	0xFEE
  5190                           wreg	equ	0xFE8
  5191                           postdec1	equ	0xFE5
  5192                           fsr1l	equ	0xFE1
  5193                           indf2	equ	0xFDF
  5194                           postinc2	equ	0xFDE
  5195                           postdec2	equ	0xFDD
  5196                           fsr2h	equ	0xFDA
  5197                           fsr2l	equ	0xFD9
  5198                           status	equ	0xFD8
  5199                           
  5200 ;; *************** function ___ftsub *****************
  5201 ;; Defined at:
  5202 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\ftsub.c"
  5203 ;; Parameters:    Size  Location     Type
  5204 ;;  f1              3   57[COMRAM] float 
  5205 ;;  f2              3   60[COMRAM] float 
  5206 ;; Auto vars:     Size  Location     Type
  5207 ;;		None
  5208 ;; Return value:  Size  Location     Type
  5209 ;;                  3   57[COMRAM] float 
  5210 ;; Registers used:
  5211 ;;		wreg, status,2, status,0, cstack
  5212 ;; Tracked objects:
  5213 ;;		On entry : 0/0
  5214 ;;		On exit  : 0/0
  5215 ;;		Unchanged: 0/0
  5216 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5217 ;;      Params:         6       0       0       0       0       0       0       0       0
  5218 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5219 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5220 ;;      Totals:         6       0       0       0       0       0       0       0       0
  5221 ;;Total ram usage:        6 bytes
  5222 ;; Hardware stack levels used:    1
  5223 ;; Hardware stack levels required when called:    2
  5224 ;; This function calls:
  5225 ;;		___ftadd
  5226 ;; This function is called by:
  5227 ;;		_sprintf
  5228 ;; This function uses a non-reentrant model
  5229 ;;
  5230                           
  5231                           	psect	text18
  5232  0027F2                     __ptext18:
  5233                           	opt stack 0
  5234  0027F2                     ___ftsub:
  5235                           	opt stack 26
  5236                           
  5237                           ;incstack = 0
  5238  0027F2  0E00               	movlw	0
  5239  0027F4  1A3D               	xorwf	___ftsub@f2,f,c
  5240  0027F6  0E00               	movlw	0
  5241  0027F8  1A3E               	xorwf	___ftsub@f2+1,f,c
  5242  0027FA  0E80               	movlw	128
  5243  0027FC  1A3F               	xorwf	___ftsub@f2+2,f,c
  5244  0027FE  C03A  F02E         	movff	___ftsub@f1,___ftadd@f1
  5245  002802  C03B  F02F         	movff	___ftsub@f1+1,___ftadd@f1+1
  5246  002806  C03C  F030         	movff	___ftsub@f1+2,___ftadd@f1+2
  5247  00280A  C03D  F031         	movff	___ftsub@f2,___ftadd@f2
  5248  00280E  C03E  F032         	movff	___ftsub@f2+1,___ftadd@f2+1
  5249  002812  C03F  F033         	movff	___ftsub@f2+2,___ftadd@f2+2
  5250  002816  EC5C  F00B         	call	___ftadd	;wreg free
  5251  00281A  C02E  F03A         	movff	?___ftadd,?___ftsub
  5252  00281E  C02F  F03B         	movff	?___ftadd+1,?___ftsub+1
  5253  002822  C030  F03C         	movff	?___ftadd+2,?___ftsub+2
  5254  002826  0012               	return	
  5255  002828                     __end_of___ftsub:
  5256                           	opt stack 0
  5257                           tblptru	equ	0xFF8
  5258                           tblptrh	equ	0xFF7
  5259                           tblptrl	equ	0xFF6
  5260                           tablat	equ	0xFF5
  5261                           prodh	equ	0xFF4
  5262                           prodl	equ	0xFF3
  5263                           postinc0	equ	0xFEE
  5264                           wreg	equ	0xFE8
  5265                           postdec1	equ	0xFE5
  5266                           fsr1l	equ	0xFE1
  5267                           indf2	equ	0xFDF
  5268                           postinc2	equ	0xFDE
  5269                           postdec2	equ	0xFDD
  5270                           fsr2h	equ	0xFDA
  5271                           fsr2l	equ	0xFD9
  5272                           status	equ	0xFD8
  5273                           
  5274 ;; *************** function ___ftadd *****************
  5275 ;; Defined at:
  5276 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\ftadd.c"
  5277 ;; Parameters:    Size  Location     Type
  5278 ;;  f1              3   45[COMRAM] float 
  5279 ;;  f2              3   48[COMRAM] float 
  5280 ;; Auto vars:     Size  Location     Type
  5281 ;;  exp1            1   56[COMRAM] unsigned char 
  5282 ;;  exp2            1   55[COMRAM] unsigned char 
  5283 ;;  sign            1   54[COMRAM] unsigned char 
  5284 ;; Return value:  Size  Location     Type
  5285 ;;                  3   45[COMRAM] float 
  5286 ;; Registers used:
  5287 ;;		wreg, status,2, status,0, cstack
  5288 ;; Tracked objects:
  5289 ;;		On entry : 0/0
  5290 ;;		On exit  : 0/0
  5291 ;;		Unchanged: 0/0
  5292 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5293 ;;      Params:         6       0       0       0       0       0       0       0       0
  5294 ;;      Locals:         3       0       0       0       0       0       0       0       0
  5295 ;;      Temps:          3       0       0       0       0       0       0       0       0
  5296 ;;      Totals:        12       0       0       0       0       0       0       0       0
  5297 ;;Total ram usage:       12 bytes
  5298 ;; Hardware stack levels used:    1
  5299 ;; Hardware stack levels required when called:    1
  5300 ;; This function calls:
  5301 ;;		___ftpack
  5302 ;; This function is called by:
  5303 ;;		_sprintf
  5304 ;;		___ftsub
  5305 ;; This function uses a non-reentrant model
  5306 ;;
  5307                           
  5308                           	psect	text19
  5309  0016B8                     __ptext19:
  5310                           	opt stack 0
  5311  0016B8                     ___ftadd:
  5312                           	opt stack 26
  5313                           
  5314                           ;incstack = 0
  5315  0016B8  C030  F034         	movff	___ftadd@f1+2,??___ftadd
  5316  0016BC  6A35               	clrf	(??___ftadd+1)& (0+255),c
  5317  0016BE  6A36               	clrf	(??___ftadd+2)& (0+255),c
  5318  0016C0  342F               	rlcf	___ftadd@f1+1,w,c
  5319  0016C2  3634               	rlcf	??___ftadd& (0+255),f,c
  5320  0016C4  E301               	bnc	u2071
  5321  0016C6  8035               	bsf	(??___ftadd+1)& (0+255),0,c
  5322  0016C8                     u2071:
  5323  0016C8  5034               	movf	??___ftadd,w,c
  5324  0016CA  6E39               	movwf	___ftadd@exp1,c
  5325  0016CC  C033  F034         	movff	___ftadd@f2+2,??___ftadd
  5326  0016D0  6A35               	clrf	(??___ftadd+1)& (0+255),c
  5327  0016D2  6A36               	clrf	(??___ftadd+2)& (0+255),c
  5328  0016D4  3432               	rlcf	___ftadd@f2+1,w,c
  5329  0016D6  3634               	rlcf	??___ftadd& (0+255),f,c
  5330  0016D8  E301               	bnc	u2081
  5331  0016DA  8035               	bsf	(??___ftadd+1)& (0+255),0,c
  5332  0016DC                     u2081:
  5333  0016DC  5034               	movf	??___ftadd,w,c
  5334  0016DE  6E38               	movwf	___ftadd@exp2,c
  5335  0016E0  5039               	movf	___ftadd@exp1,w,c
  5336  0016E2  B4D8               	btfsc	status,2,c
  5337  0016E4  D00C               	goto	l665
  5338  0016E6  5038               	movf	___ftadd@exp2,w,c
  5339  0016E8  5C39               	subwf	___ftadd@exp1,w,c
  5340  0016EA  B0D8               	btfsc	status,0,c
  5341  0016EC  D00F               	goto	l2199
  5342  0016EE  5039               	movf	___ftadd@exp1,w,c
  5343  0016F0  0800               	sublw	0
  5344  0016F2  2438               	addwf	___ftadd@exp2,w,c
  5345  0016F4  6E34               	movwf	??___ftadd& (0+255),c
  5346  0016F6  0E19               	movlw	25
  5347  0016F8  5C34               	subwf	??___ftadd,w,c
  5348  0016FA  A0D8               	btfss	status,0,c
  5349  0016FC  D007               	goto	l2199
  5350  0016FE                     l665:
  5351  0016FE  C031  F02E         	movff	___ftadd@f2,?___ftadd
  5352  001702  C032  F02F         	movff	___ftadd@f2+1,?___ftadd+1
  5353  001706  C033  F030         	movff	___ftadd@f2+2,?___ftadd+2
  5354  00170A  D0AB               	goto	l666
  5355  00170C                     l2199:
  5356  00170C  5038               	movf	___ftadd@exp2,w,c
  5357  00170E  B4D8               	btfsc	status,2,c
  5358  001710  D00C               	goto	l669
  5359  001712  5039               	movf	___ftadd@exp1,w,c
  5360  001714  5C38               	subwf	___ftadd@exp2,w,c
  5361  001716  B0D8               	btfsc	status,0,c
  5362  001718  D00F               	goto	l2205
  5363  00171A  5038               	movf	___ftadd@exp2,w,c
  5364  00171C  0800               	sublw	0
  5365  00171E  2439               	addwf	___ftadd@exp1,w,c
  5366  001720  6E34               	movwf	??___ftadd& (0+255),c
  5367  001722  0E19               	movlw	25
  5368  001724  5C34               	subwf	??___ftadd,w,c
  5369  001726  A0D8               	btfss	status,0,c
  5370  001728  D007               	goto	l2205
  5371  00172A                     l669:
  5372  00172A  C02E  F02E         	movff	___ftadd@f1,?___ftadd
  5373  00172E  C02F  F02F         	movff	___ftadd@f1+1,?___ftadd+1
  5374  001732  C030  F030         	movff	___ftadd@f1+2,?___ftadd+2
  5375  001736  D095               	goto	l666
  5376  001738                     l2205:
  5377  001738  0E06               	movlw	6
  5378  00173A  6E37               	movwf	___ftadd@sign,c
  5379  00173C  BE30               	btfsc	___ftadd@f1+2,7,c
  5380  00173E  8E37               	bsf	___ftadd@sign,7,c
  5381  001740  BE33               	btfsc	___ftadd@f2+2,7,c
  5382  001742  8C37               	bsf	___ftadd@sign,6,c
  5383  001744  8E2F               	bsf	___ftadd@f1+1,7,c
  5384  001746  0EFF               	movlw	255
  5385  001748  162E               	andwf	___ftadd@f1,f,c
  5386  00174A  0EFF               	movlw	255
  5387  00174C  162F               	andwf	___ftadd@f1+1,f,c
  5388  00174E  0E00               	movlw	0
  5389  001750  1630               	andwf	___ftadd@f1+2,f,c
  5390  001752  8E32               	bsf	___ftadd@f2+1,7,c
  5391  001754  0EFF               	movlw	255
  5392  001756  1631               	andwf	___ftadd@f2,f,c
  5393  001758  0EFF               	movlw	255
  5394  00175A  1632               	andwf	___ftadd@f2+1,f,c
  5395  00175C  0E00               	movlw	0
  5396  00175E  1633               	andwf	___ftadd@f2+2,f,c
  5397  001760  5038               	movf	___ftadd@exp2,w,c
  5398  001762  5C39               	subwf	___ftadd@exp1,w,c
  5399  001764  B0D8               	btfsc	status,0,c
  5400  001766  D01A               	goto	l2231
  5401  001768                     l2221:
  5402  001768  90D8               	bcf	status,0,c
  5403  00176A  3631               	rlcf	___ftadd@f2,f,c
  5404  00176C  3632               	rlcf	___ftadd@f2+1,f,c
  5405  00176E  3633               	rlcf	___ftadd@f2+2,f,c
  5406  001770  0638               	decf	___ftadd@exp2,f,c
  5407  001772  5038               	movf	___ftadd@exp2,w,c
  5408  001774  1839               	xorwf	___ftadd@exp1,w,c
  5409  001776  B4D8               	btfsc	status,2,c
  5410  001778  D00D               	goto	l2229
  5411  00177A  0637               	decf	___ftadd@sign,f,c
  5412  00177C  C037  F034         	movff	___ftadd@sign,??___ftadd
  5413  001780  0E07               	movlw	7
  5414  001782  1634               	andwf	??___ftadd,f,c
  5415  001784  B4D8               	btfsc	status,2,c
  5416  001786  D006               	goto	l2229
  5417  001788  D7EF               	goto	l2221
  5418  00178A                     l2227:
  5419  00178A  90D8               	bcf	status,0,c
  5420  00178C  3230               	rrcf	___ftadd@f1+2,f,c
  5421  00178E  322F               	rrcf	___ftadd@f1+1,f,c
  5422  001790  322E               	rrcf	___ftadd@f1,f,c
  5423  001792  2A39               	incf	___ftadd@exp1,f,c
  5424  001794                     l2229:
  5425  001794  5038               	movf	___ftadd@exp2,w,c
  5426  001796  6239               	cpfseq	___ftadd@exp1,c
  5427  001798  D7F8               	goto	l2227
  5428  00179A  D01D               	goto	l680
  5429  00179C                     l2231:
  5430  00179C  5039               	movf	___ftadd@exp1,w,c
  5431  00179E  5C38               	subwf	___ftadd@exp2,w,c
  5432  0017A0  B0D8               	btfsc	status,0,c
  5433  0017A2  D019               	goto	l680
  5434  0017A4                     l2233:
  5435  0017A4  90D8               	bcf	status,0,c
  5436  0017A6  362E               	rlcf	___ftadd@f1,f,c
  5437  0017A8  362F               	rlcf	___ftadd@f1+1,f,c
  5438  0017AA  3630               	rlcf	___ftadd@f1+2,f,c
  5439  0017AC  0639               	decf	___ftadd@exp1,f,c
  5440  0017AE  5038               	movf	___ftadd@exp2,w,c
  5441  0017B0  1839               	xorwf	___ftadd@exp1,w,c
  5442  0017B2  B4D8               	btfsc	status,2,c
  5443  0017B4  D00D               	goto	l2241
  5444  0017B6  0637               	decf	___ftadd@sign,f,c
  5445  0017B8  C037  F034         	movff	___ftadd@sign,??___ftadd
  5446  0017BC  0E07               	movlw	7
  5447  0017BE  1634               	andwf	??___ftadd,f,c
  5448  0017C0  B4D8               	btfsc	status,2,c
  5449  0017C2  D006               	goto	l2241
  5450  0017C4  D7EF               	goto	l2233
  5451  0017C6                     l2239:
  5452  0017C6  90D8               	bcf	status,0,c
  5453  0017C8  3233               	rrcf	___ftadd@f2+2,f,c
  5454  0017CA  3232               	rrcf	___ftadd@f2+1,f,c
  5455  0017CC  3231               	rrcf	___ftadd@f2,f,c
  5456  0017CE  2A38               	incf	___ftadd@exp2,f,c
  5457  0017D0                     l2241:
  5458  0017D0  5038               	movf	___ftadd@exp2,w,c
  5459  0017D2  6239               	cpfseq	___ftadd@exp1,c
  5460  0017D4  D7F8               	goto	l2239
  5461  0017D6                     l680:
  5462  0017D6  AE37               	btfss	___ftadd@sign,7,c
  5463  0017D8  D00C               	goto	l689
  5464  0017DA  0EFF               	movlw	255
  5465  0017DC  1A2E               	xorwf	___ftadd@f1,f,c
  5466  0017DE  0EFF               	movlw	255
  5467  0017E0  1A2F               	xorwf	___ftadd@f1+1,f,c
  5468  0017E2  0EFF               	movlw	255
  5469  0017E4  1A30               	xorwf	___ftadd@f1+2,f,c
  5470  0017E6  0E01               	movlw	1
  5471  0017E8  262E               	addwf	___ftadd@f1,f,c
  5472  0017EA  0E00               	movlw	0
  5473  0017EC  222F               	addwfc	___ftadd@f1+1,f,c
  5474  0017EE  0E00               	movlw	0
  5475  0017F0  2230               	addwfc	___ftadd@f1+2,f,c
  5476  0017F2                     l689:
  5477  0017F2  AC37               	btfss	___ftadd@sign,6,c
  5478  0017F4  D00C               	goto	l2247
  5479  0017F6  0EFF               	movlw	255
  5480  0017F8  1A31               	xorwf	___ftadd@f2,f,c
  5481  0017FA  0EFF               	movlw	255
  5482  0017FC  1A32               	xorwf	___ftadd@f2+1,f,c
  5483  0017FE  0EFF               	movlw	255
  5484  001800  1A33               	xorwf	___ftadd@f2+2,f,c
  5485  001802  0E01               	movlw	1
  5486  001804  2631               	addwf	___ftadd@f2,f,c
  5487  001806  0E00               	movlw	0
  5488  001808  2232               	addwfc	___ftadd@f2+1,f,c
  5489  00180A  0E00               	movlw	0
  5490  00180C  2233               	addwfc	___ftadd@f2+2,f,c
  5491  00180E                     l2247:
  5492  00180E  0E00               	movlw	0
  5493  001810  6E37               	movwf	___ftadd@sign,c
  5494  001812  502E               	movf	___ftadd@f1,w,c
  5495  001814  2631               	addwf	___ftadd@f2,f,c
  5496  001816  502F               	movf	___ftadd@f1+1,w,c
  5497  001818  2232               	addwfc	___ftadd@f2+1,f,c
  5498  00181A  5030               	movf	___ftadd@f1+2,w,c
  5499  00181C  2233               	addwfc	___ftadd@f2+2,f,c
  5500  00181E  AE33               	btfss	___ftadd@f2+2,7,c
  5501  001820  D00E               	goto	l2257
  5502  001822  0EFF               	movlw	255
  5503  001824  1A31               	xorwf	___ftadd@f2,f,c
  5504  001826  0EFF               	movlw	255
  5505  001828  1A32               	xorwf	___ftadd@f2+1,f,c
  5506  00182A  0EFF               	movlw	255
  5507  00182C  1A33               	xorwf	___ftadd@f2+2,f,c
  5508  00182E  0E01               	movlw	1
  5509  001830  2631               	addwf	___ftadd@f2,f,c
  5510  001832  0E00               	movlw	0
  5511  001834  2232               	addwfc	___ftadd@f2+1,f,c
  5512  001836  0E00               	movlw	0
  5513  001838  2233               	addwfc	___ftadd@f2+2,f,c
  5514  00183A  0E01               	movlw	1
  5515  00183C  6E37               	movwf	___ftadd@sign,c
  5516  00183E                     l2257:
  5517  00183E  C031  F001         	movff	___ftadd@f2,___ftpack@arg
  5518  001842  C032  F002         	movff	___ftadd@f2+1,___ftpack@arg+1
  5519  001846  C033  F003         	movff	___ftadd@f2+2,___ftpack@arg+2
  5520  00184A  C039  F004         	movff	___ftadd@exp1,___ftpack@exp
  5521  00184E  C037  F005         	movff	___ftadd@sign,___ftpack@sign
  5522  001852  EC90  F010         	call	___ftpack	;wreg free
  5523  001856  C001  F02E         	movff	?___ftpack,?___ftadd
  5524  00185A  C002  F02F         	movff	?___ftpack+1,?___ftadd+1
  5525  00185E  C003  F030         	movff	?___ftpack+2,?___ftadd+2
  5526  001862                     l666:
  5527  001862  0012               	return	
  5528  001864                     __end_of___ftadd:
  5529                           	opt stack 0
  5530                           tblptru	equ	0xFF8
  5531                           tblptrh	equ	0xFF7
  5532                           tblptrl	equ	0xFF6
  5533                           tablat	equ	0xFF5
  5534                           prodh	equ	0xFF4
  5535                           prodl	equ	0xFF3
  5536                           postinc0	equ	0xFEE
  5537                           wreg	equ	0xFE8
  5538                           postdec1	equ	0xFE5
  5539                           fsr1l	equ	0xFE1
  5540                           indf2	equ	0xFDF
  5541                           postinc2	equ	0xFDE
  5542                           postdec2	equ	0xFDD
  5543                           fsr2h	equ	0xFDA
  5544                           fsr2l	equ	0xFD9
  5545                           status	equ	0xFD8
  5546                           
  5547 ;; *************** function ___ftneg *****************
  5548 ;; Defined at:
  5549 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\ftneg.c"
  5550 ;; Parameters:    Size  Location     Type
  5551 ;;  f1              3    0[COMRAM] float 
  5552 ;; Auto vars:     Size  Location     Type
  5553 ;;		None
  5554 ;; Return value:  Size  Location     Type
  5555 ;;                  3    0[COMRAM] float 
  5556 ;; Registers used:
  5557 ;;		wreg, status,2, status,0
  5558 ;; Tracked objects:
  5559 ;;		On entry : 0/0
  5560 ;;		On exit  : 0/0
  5561 ;;		Unchanged: 0/0
  5562 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5563 ;;      Params:         3       0       0       0       0       0       0       0       0
  5564 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5565 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5566 ;;      Totals:         3       0       0       0       0       0       0       0       0
  5567 ;;Total ram usage:        3 bytes
  5568 ;; Hardware stack levels used:    1
  5569 ;; This function calls:
  5570 ;;		Nothing
  5571 ;; This function is called by:
  5572 ;;		_sprintf
  5573 ;; This function uses a non-reentrant model
  5574 ;;
  5575                           
  5576                           	psect	text20
  5577  002938                     __ptext20:
  5578                           	opt stack 0
  5579  002938                     ___ftneg:
  5580                           	opt stack 28
  5581                           
  5582                           ;incstack = 0
  5583  002938  0E7F               	movlw	127
  5584  00293A  1403               	andwf	___ftneg@f1+2,w,c
  5585  00293C  1002               	iorwf	___ftneg@f1+1,w,c
  5586  00293E  1001               	iorwf	___ftneg@f1,w,c
  5587  002940  B4D8               	btfsc	status,2,c
  5588  002942  D006               	goto	l739
  5589  002944  0E00               	movlw	0
  5590  002946  1A01               	xorwf	___ftneg@f1,f,c
  5591  002948  0E00               	movlw	0
  5592  00294A  1A02               	xorwf	___ftneg@f1+1,f,c
  5593  00294C  0E80               	movlw	128
  5594  00294E  1A03               	xorwf	___ftneg@f1+2,f,c
  5595  002950                     l739:
  5596  002950  C001  F001         	movff	___ftneg@f1,?___ftneg
  5597  002954  C002  F002         	movff	___ftneg@f1+1,?___ftneg+1
  5598  002958  C003  F003         	movff	___ftneg@f1+2,?___ftneg+2
  5599  00295C  0012               	return	
  5600  00295E                     __end_of___ftneg:
  5601                           	opt stack 0
  5602                           tblptru	equ	0xFF8
  5603                           tblptrh	equ	0xFF7
  5604                           tblptrl	equ	0xFF6
  5605                           tablat	equ	0xFF5
  5606                           prodh	equ	0xFF4
  5607                           prodl	equ	0xFF3
  5608                           postinc0	equ	0xFEE
  5609                           wreg	equ	0xFE8
  5610                           postdec1	equ	0xFE5
  5611                           fsr1l	equ	0xFE1
  5612                           indf2	equ	0xFDF
  5613                           postinc2	equ	0xFDE
  5614                           postdec2	equ	0xFDD
  5615                           fsr2h	equ	0xFDA
  5616                           fsr2l	equ	0xFD9
  5617                           status	equ	0xFD8
  5618                           
  5619 ;; *************** function ___ftge *****************
  5620 ;; Defined at:
  5621 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\ftge.c"
  5622 ;; Parameters:    Size  Location     Type
  5623 ;;  ff1             3    0[COMRAM] float 
  5624 ;;  ff2             3    3[COMRAM] float 
  5625 ;; Auto vars:     Size  Location     Type
  5626 ;;		None
  5627 ;; Return value:  Size  Location     Type
  5628 ;;		None               void
  5629 ;; Registers used:
  5630 ;;		wreg, status,2, status,0
  5631 ;; Tracked objects:
  5632 ;;		On entry : 0/0
  5633 ;;		On exit  : 0/0
  5634 ;;		Unchanged: 0/0
  5635 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5636 ;;      Params:         6       0       0       0       0       0       0       0       0
  5637 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5638 ;;      Temps:          3       0       0       0       0       0       0       0       0
  5639 ;;      Totals:         9       0       0       0       0       0       0       0       0
  5640 ;;Total ram usage:        9 bytes
  5641 ;; Hardware stack levels used:    1
  5642 ;; This function calls:
  5643 ;;		Nothing
  5644 ;; This function is called by:
  5645 ;;		_sprintf
  5646 ;; This function uses a non-reentrant model
  5647 ;;
  5648                           
  5649                           	psect	text21
  5650  0024E8                     __ptext21:
  5651                           	opt stack 0
  5652  0024E8                     ___ftge:
  5653                           	opt stack 28
  5654                           
  5655                           ;incstack = 0
  5656  0024E8  AE03               	btfss	___ftge@ff1+2,7,c
  5657  0024EA  D016               	goto	l2609
  5658  0024EC  C001  F007         	movff	___ftge@ff1,??___ftge
  5659  0024F0  C002  F008         	movff	___ftge@ff1+1,??___ftge+1
  5660  0024F4  C003  F009         	movff	___ftge@ff1+2,??___ftge+2
  5661  0024F8  1E07               	comf	??___ftge,f,c
  5662  0024FA  1E08               	comf	??___ftge+1,f,c
  5663  0024FC  1E09               	comf	??___ftge+2,f,c
  5664  0024FE  2A07               	incf	??___ftge,f,c
  5665  002500  0E00               	movlw	0
  5666  002502  2208               	addwfc	??___ftge+1,f,c
  5667  002504  2209               	addwfc	??___ftge+2,f,c
  5668  002506  0E00               	movlw	0
  5669  002508  2407               	addwf	??___ftge,w,c
  5670  00250A  6E01               	movwf	___ftge@ff1,c
  5671  00250C  0E00               	movlw	0
  5672  00250E  2008               	addwfc	??___ftge+1,w,c
  5673  002510  6E02               	movwf	___ftge@ff1+1,c
  5674  002512  0E80               	movlw	128
  5675  002514  2009               	addwfc	??___ftge+2,w,c
  5676  002516  6E03               	movwf	___ftge@ff1+2,c
  5677  002518                     l2609:
  5678  002518  AE06               	btfss	___ftge@ff2+2,7,c
  5679  00251A  D016               	goto	l2613
  5680  00251C  C004  F007         	movff	___ftge@ff2,??___ftge
  5681  002520  C005  F008         	movff	___ftge@ff2+1,??___ftge+1
  5682  002524  C006  F009         	movff	___ftge@ff2+2,??___ftge+2
  5683  002528  1E07               	comf	??___ftge,f,c
  5684  00252A  1E08               	comf	??___ftge+1,f,c
  5685  00252C  1E09               	comf	??___ftge+2,f,c
  5686  00252E  2A07               	incf	??___ftge,f,c
  5687  002530  0E00               	movlw	0
  5688  002532  2208               	addwfc	??___ftge+1,f,c
  5689  002534  2209               	addwfc	??___ftge+2,f,c
  5690  002536  0E00               	movlw	0
  5691  002538  2407               	addwf	??___ftge,w,c
  5692  00253A  6E04               	movwf	___ftge@ff2,c
  5693  00253C  0E00               	movlw	0
  5694  00253E  2008               	addwfc	??___ftge+1,w,c
  5695  002540  6E05               	movwf	___ftge@ff2+1,c
  5696  002542  0E80               	movlw	128
  5697  002544  2009               	addwfc	??___ftge+2,w,c
  5698  002546  6E06               	movwf	___ftge@ff2+2,c
  5699  002548                     l2613:
  5700  002548  0E00               	movlw	0
  5701  00254A  1A01               	xorwf	___ftge@ff1,f,c
  5702  00254C  0E00               	movlw	0
  5703  00254E  1A02               	xorwf	___ftge@ff1+1,f,c
  5704  002550  0E80               	movlw	128
  5705  002552  1A03               	xorwf	___ftge@ff1+2,f,c
  5706  002554  0E00               	movlw	0
  5707  002556  1A04               	xorwf	___ftge@ff2,f,c
  5708  002558  0E00               	movlw	0
  5709  00255A  1A05               	xorwf	___ftge@ff2+1,f,c
  5710  00255C  0E80               	movlw	128
  5711  00255E  1A06               	xorwf	___ftge@ff2+2,f,c
  5712  002560  5004               	movf	___ftge@ff2,w,c
  5713  002562  5C01               	subwf	___ftge@ff1,w,c
  5714  002564  5005               	movf	___ftge@ff2+1,w,c
  5715  002566  5802               	subwfb	___ftge@ff1+1,w,c
  5716  002568  5006               	movf	___ftge@ff2+2,w,c
  5717  00256A  5803               	subwfb	___ftge@ff1+2,w,c
  5718  00256C  B0D8               	btfsc	status,0,c
  5719  00256E  D002               	goto	l2619
  5720  002570  90D8               	bcf	status,0,c
  5721  002572  D001               	goto	l723
  5722  002574                     l2619:
  5723  002574  80D8               	bsf	status,0,c
  5724  002576                     l723:
  5725  002576  0012               	return	
  5726  002578                     __end_of___ftge:
  5727                           	opt stack 0
  5728                           tblptru	equ	0xFF8
  5729                           tblptrh	equ	0xFF7
  5730                           tblptrl	equ	0xFF6
  5731                           tablat	equ	0xFF5
  5732                           prodh	equ	0xFF4
  5733                           prodl	equ	0xFF3
  5734                           postinc0	equ	0xFEE
  5735                           wreg	equ	0xFE8
  5736                           postdec1	equ	0xFE5
  5737                           fsr1l	equ	0xFE1
  5738                           indf2	equ	0xFDF
  5739                           postinc2	equ	0xFDE
  5740                           postdec2	equ	0xFDD
  5741                           fsr2h	equ	0xFDA
  5742                           fsr2l	equ	0xFD9
  5743                           status	equ	0xFD8
  5744                           
  5745 ;; *************** function ___awtoft *****************
  5746 ;; Defined at:
  5747 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\awtoft.c"
  5748 ;; Parameters:    Size  Location     Type
  5749 ;;  c               2    8[COMRAM] int 
  5750 ;; Auto vars:     Size  Location     Type
  5751 ;;  sign            1   11[COMRAM] unsigned char 
  5752 ;; Return value:  Size  Location     Type
  5753 ;;                  3    8[COMRAM] float 
  5754 ;; Registers used:
  5755 ;;		wreg, status,2, status,0, prodl, cstack
  5756 ;; Tracked objects:
  5757 ;;		On entry : 0/0
  5758 ;;		On exit  : 0/0
  5759 ;;		Unchanged: 0/0
  5760 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5761 ;;      Params:         3       0       0       0       0       0       0       0       0
  5762 ;;      Locals:         1       0       0       0       0       0       0       0       0
  5763 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5764 ;;      Totals:         4       0       0       0       0       0       0       0       0
  5765 ;;Total ram usage:        4 bytes
  5766 ;; Hardware stack levels used:    1
  5767 ;; Hardware stack levels required when called:    1
  5768 ;; This function calls:
  5769 ;;		___ftpack
  5770 ;; This function is called by:
  5771 ;;		_getX
  5772 ;;		_getY
  5773 ;;		_getZ
  5774 ;; This function uses a non-reentrant model
  5775 ;;
  5776                           
  5777                           	psect	text22
  5778  00276A                     __ptext22:
  5779                           	opt stack 0
  5780  00276A                     ___awtoft:
  5781                           	opt stack 28
  5782                           
  5783                           ;incstack = 0
  5784  00276A  0E00               	movlw	0
  5785  00276C  6E0C               	movwf	___awtoft@sign,c
  5786  00276E  500A               	movf	___awtoft@c+1,w,c
  5787  002770  0A80               	xorlw	128
  5788  002772  6EF3               	movwf	prodl,c
  5789  002774  0E80               	movlw	128
  5790  002776  5CF3               	subwf	prodl,w,c
  5791  002778  0E00               	movlw	0
  5792  00277A  B4D8               	btfsc	status,2,c
  5793  00277C  5C09               	subwf	___awtoft@c,w,c
  5794  00277E  B0D8               	btfsc	status,0,c
  5795  002780  D006               	goto	l2973
  5796  002782  6C09               	negf	___awtoft@c,c
  5797  002784  1E0A               	comf	___awtoft@c+1,f,c
  5798  002786  B0D8               	btfsc	status,0,c
  5799  002788  2A0A               	incf	___awtoft@c+1,f,c
  5800  00278A  0E01               	movlw	1
  5801  00278C  6E0C               	movwf	___awtoft@sign,c
  5802  00278E                     l2973:
  5803  00278E  C009  F001         	movff	___awtoft@c,___ftpack@arg
  5804  002792  C00A  F002         	movff	___awtoft@c+1,___ftpack@arg+1
  5805  002796  6A03               	clrf	___ftpack@arg+2,c
  5806  002798  0E8E               	movlw	142
  5807  00279A  6E04               	movwf	___ftpack@exp,c
  5808  00279C  C00C  F005         	movff	___awtoft@sign,___ftpack@sign
  5809  0027A0  EC90  F010         	call	___ftpack	;wreg free
  5810  0027A4  C001  F009         	movff	?___ftpack,?___awtoft
  5811  0027A8  C002  F00A         	movff	?___ftpack+1,?___awtoft+1
  5812  0027AC  C003  F00B         	movff	?___ftpack+2,?___awtoft+2
  5813  0027B0  0012               	return	
  5814  0027B2                     __end_of___awtoft:
  5815                           	opt stack 0
  5816                           tblptru	equ	0xFF8
  5817                           tblptrh	equ	0xFF7
  5818                           tblptrl	equ	0xFF6
  5819                           tablat	equ	0xFF5
  5820                           prodh	equ	0xFF4
  5821                           prodl	equ	0xFF3
  5822                           postinc0	equ	0xFEE
  5823                           wreg	equ	0xFE8
  5824                           postdec1	equ	0xFE5
  5825                           fsr1l	equ	0xFE1
  5826                           indf2	equ	0xFDF
  5827                           postinc2	equ	0xFDE
  5828                           postdec2	equ	0xFDD
  5829                           fsr2h	equ	0xFDA
  5830                           fsr2l	equ	0xFD9
  5831                           status	equ	0xFD8
  5832                           
  5833 ;; *************** function ___ftpack *****************
  5834 ;; Defined at:
  5835 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\float.c"
  5836 ;; Parameters:    Size  Location     Type
  5837 ;;  arg             3    0[COMRAM] unsigned um
  5838 ;;  exp             1    3[COMRAM] unsigned char 
  5839 ;;  sign            1    4[COMRAM] unsigned char 
  5840 ;; Auto vars:     Size  Location     Type
  5841 ;;		None
  5842 ;; Return value:  Size  Location     Type
  5843 ;;                  3    0[COMRAM] float 
  5844 ;; Registers used:
  5845 ;;		wreg, status,2, status,0
  5846 ;; Tracked objects:
  5847 ;;		On entry : 0/0
  5848 ;;		On exit  : 0/0
  5849 ;;		Unchanged: 0/0
  5850 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5851 ;;      Params:         5       0       0       0       0       0       0       0       0
  5852 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5853 ;;      Temps:          3       0       0       0       0       0       0       0       0
  5854 ;;      Totals:         8       0       0       0       0       0       0       0       0
  5855 ;;Total ram usage:        8 bytes
  5856 ;; Hardware stack levels used:    1
  5857 ;; This function calls:
  5858 ;;		Nothing
  5859 ;; This function is called by:
  5860 ;;		___awtoft
  5861 ;;		___ftadd
  5862 ;;		___ftmul
  5863 ;;		___lltoft
  5864 ;; This function uses a non-reentrant model
  5865 ;;
  5866                           
  5867                           	psect	text23
  5868  002120                     __ptext23:
  5869                           	opt stack 0
  5870  002120                     ___ftpack:
  5871                           	opt stack 26
  5872                           
  5873                           ;incstack = 0
  5874  002120  5004               	movf	___ftpack@exp,w,c
  5875  002122  B4D8               	btfsc	status,2,c
  5876  002124  D005               	goto	l2115
  5877  002126  5001               	movf	___ftpack@arg,w,c
  5878  002128  1002               	iorwf	___ftpack@arg+1,w,c
  5879  00212A  1003               	iorwf	___ftpack@arg+2,w,c
  5880  00212C  A4D8               	btfss	status,2,c
  5881  00212E  D00C               	goto	l2121
  5882  002130                     l2115:
  5883  002130  0E00               	movlw	0
  5884  002132  6E01               	movwf	?___ftpack,c
  5885  002134  0E00               	movlw	0
  5886  002136  6E02               	movwf	?___ftpack+1,c
  5887  002138  0E00               	movlw	0
  5888  00213A  6E03               	movwf	?___ftpack+2,c
  5889  00213C  D044               	goto	l628
  5890  00213E                     l2119:
  5891  00213E  2A04               	incf	___ftpack@exp,f,c
  5892  002140  90D8               	bcf	status,0,c
  5893  002142  3203               	rrcf	___ftpack@arg+2,f,c
  5894  002144  3202               	rrcf	___ftpack@arg+1,f,c
  5895  002146  3201               	rrcf	___ftpack@arg,f,c
  5896  002148                     l2121:
  5897  002148  0E00               	movlw	0
  5898  00214A  1401               	andwf	___ftpack@arg,w,c
  5899  00214C  6E06               	movwf	??___ftpack& (0+255),c
  5900  00214E  0E00               	movlw	0
  5901  002150  1402               	andwf	___ftpack@arg+1,w,c
  5902  002152  6E07               	movwf	(??___ftpack+1)& (0+255),c
  5903  002154  0EFE               	movlw	254
  5904  002156  1403               	andwf	___ftpack@arg+2,w,c
  5905  002158  6E08               	movwf	(??___ftpack+2)& (0+255),c
  5906  00215A  5006               	movf	??___ftpack,w,c
  5907  00215C  1007               	iorwf	??___ftpack+1,w,c
  5908  00215E  1008               	iorwf	??___ftpack+2,w,c
  5909  002160  B4D8               	btfsc	status,2,c
  5910  002162  D00C               	goto	l2127
  5911  002164  D7EC               	goto	l2119
  5912  002166                     l2123:
  5913  002166  2A04               	incf	___ftpack@exp,f,c
  5914  002168  0E01               	movlw	1
  5915  00216A  2601               	addwf	___ftpack@arg,f,c
  5916  00216C  0E00               	movlw	0
  5917  00216E  2202               	addwfc	___ftpack@arg+1,f,c
  5918  002170  0E00               	movlw	0
  5919  002172  2203               	addwfc	___ftpack@arg+2,f,c
  5920  002174  90D8               	bcf	status,0,c
  5921  002176  3203               	rrcf	___ftpack@arg+2,f,c
  5922  002178  3202               	rrcf	___ftpack@arg+1,f,c
  5923  00217A  3201               	rrcf	___ftpack@arg,f,c
  5924  00217C                     l2127:
  5925  00217C  0E00               	movlw	0
  5926  00217E  1401               	andwf	___ftpack@arg,w,c
  5927  002180  6E06               	movwf	??___ftpack& (0+255),c
  5928  002182  0E00               	movlw	0
  5929  002184  1402               	andwf	___ftpack@arg+1,w,c
  5930  002186  6E07               	movwf	(??___ftpack+1)& (0+255),c
  5931  002188  0EFF               	movlw	255
  5932  00218A  1403               	andwf	___ftpack@arg+2,w,c
  5933  00218C  6E08               	movwf	(??___ftpack+2)& (0+255),c
  5934  00218E  5006               	movf	??___ftpack,w,c
  5935  002190  1007               	iorwf	??___ftpack+1,w,c
  5936  002192  1008               	iorwf	??___ftpack+2,w,c
  5937  002194  B4D8               	btfsc	status,2,c
  5938  002196  D006               	goto	l2131
  5939  002198  D7E6               	goto	l2123
  5940  00219A                     l2129:
  5941  00219A  0604               	decf	___ftpack@exp,f,c
  5942  00219C  90D8               	bcf	status,0,c
  5943  00219E  3601               	rlcf	___ftpack@arg,f,c
  5944  0021A0  3602               	rlcf	___ftpack@arg+1,f,c
  5945  0021A2  3603               	rlcf	___ftpack@arg+2,f,c
  5946  0021A4                     l2131:
  5947  0021A4  AE02               	btfss	___ftpack@arg+1,7,c
  5948  0021A6  D7F9               	goto	l2129
  5949  0021A8  A004               	btfss	___ftpack@exp,0,c
  5950  0021AA  9E02               	bcf	___ftpack@arg+1,7,c
  5951  0021AC  90D8               	bcf	status,0,c
  5952  0021AE  3204               	rrcf	___ftpack@exp,f,c
  5953  0021B0  5004               	movf	___ftpack@exp,w,c
  5954  0021B2  1203               	iorwf	___ftpack@arg+2,f,c
  5955  0021B4  5005               	movf	___ftpack@sign,w,c
  5956  0021B6  A4D8               	btfss	status,2,c
  5957  0021B8  8E03               	bsf	___ftpack@arg+2,7,c
  5958  0021BA  C001  F001         	movff	___ftpack@arg,?___ftpack
  5959  0021BE  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
  5960  0021C2  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
  5961  0021C6                     l628:
  5962  0021C6  0012               	return	
  5963  0021C8                     __end_of___ftpack:
  5964                           	opt stack 0
  5965                           tblptru	equ	0xFF8
  5966                           tblptrh	equ	0xFF7
  5967                           tblptrl	equ	0xFF6
  5968                           tablat	equ	0xFF5
  5969                           prodh	equ	0xFF4
  5970                           prodl	equ	0xFF3
  5971                           postinc0	equ	0xFEE
  5972                           wreg	equ	0xFE8
  5973                           postdec1	equ	0xFE5
  5974                           fsr1l	equ	0xFE1
  5975                           indf2	equ	0xFDF
  5976                           postinc2	equ	0xFDE
  5977                           postdec2	equ	0xFDD
  5978                           fsr2h	equ	0xFDA
  5979                           fsr2l	equ	0xFD9
  5980                           status	equ	0xFD8
  5981                           
  5982 ;; *************** function _OpenI2C *****************
  5983 ;; Defined at:
  5984 ;;		line 14 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\pic18\plib\i2c\i2c_open.c"
  5985 ;; Parameters:    Size  Location     Type
  5986 ;;  sync_mode       1    wreg     unsigned char 
  5987 ;;  slew            1    0[COMRAM] unsigned char 
  5988 ;; Auto vars:     Size  Location     Type
  5989 ;;  sync_mode       1    1[COMRAM] unsigned char 
  5990 ;; Return value:  Size  Location     Type
  5991 ;;		None               void
  5992 ;; Registers used:
  5993 ;;		wreg, status,2, status,0
  5994 ;; Tracked objects:
  5995 ;;		On entry : 0/0
  5996 ;;		On exit  : 0/0
  5997 ;;		Unchanged: 0/0
  5998 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5999 ;;      Params:         1       0       0       0       0       0       0       0       0
  6000 ;;      Locals:         1       0       0       0       0       0       0       0       0
  6001 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6002 ;;      Totals:         2       0       0       0       0       0       0       0       0
  6003 ;;Total ram usage:        2 bytes
  6004 ;; Hardware stack levels used:    1
  6005 ;; This function calls:
  6006 ;;		Nothing
  6007 ;; This function is called by:
  6008 ;;		_main
  6009 ;; This function uses a non-reentrant model
  6010 ;;
  6011                           
  6012                           	psect	text24
  6013  00297E                     __ptext24:
  6014                           	opt stack 0
  6015  00297E                     _OpenI2C:
  6016                           	opt stack 30
  6017                           
  6018                           ;incstack = 0
  6019                           ;OpenI2C@sync_mode stored from wreg
  6020  00297E  6E02               	movwf	OpenI2C@sync_mode,c
  6021  002980  0E3F               	movlw	63
  6022  002982  16C7               	andwf	4039,f,c	;volatile
  6023  002984  0E00               	movlw	0
  6024  002986  6EC6               	movwf	4038,c	;volatile
  6025  002988  0E00               	movlw	0
  6026  00298A  6EC5               	movwf	4037,c	;volatile
  6027  00298C  5002               	movf	OpenI2C@sync_mode,w,c
  6028  00298E  12C6               	iorwf	4038,f,c	;volatile
  6029  002990  5001               	movf	OpenI2C@slew,w,c
  6030  002992  12C7               	iorwf	4039,f,c	;volatile
  6031  002994  8293               	bsf	3987,1,c	;volatile
  6032  002996  8093               	bsf	3987,0,c	;volatile
  6033  002998  8AC6               	bsf	4038,5,c	;volatile
  6034  00299A  0012               	return	
  6035  00299C                     __end_of_OpenI2C:
  6036                           	opt stack 0
  6037                           tblptru	equ	0xFF8
  6038                           tblptrh	equ	0xFF7
  6039                           tblptrl	equ	0xFF6
  6040                           tablat	equ	0xFF5
  6041                           prodh	equ	0xFF4
  6042                           prodl	equ	0xFF3
  6043                           postinc0	equ	0xFEE
  6044                           wreg	equ	0xFE8
  6045                           postdec1	equ	0xFE5
  6046                           fsr1l	equ	0xFE1
  6047                           indf2	equ	0xFDF
  6048                           postinc2	equ	0xFDE
  6049                           postdec2	equ	0xFDD
  6050                           fsr2h	equ	0xFDA
  6051                           fsr2l	equ	0xFD9
  6052                           status	equ	0xFD8
  6053                           
  6054 ;; *************** function _LcdText *****************
  6055 ;; Defined at:
  6056 ;;		line 123 in file "hd44780.h"
  6057 ;; Parameters:    Size  Location     Type
  6058 ;;  x               1    wreg     unsigned char 
  6059 ;;  y               1   80[COMRAM] unsigned char 
  6060 ;;  text            2   81[COMRAM] PTR const unsigned char 
  6061 ;;		 -> STR_9(4), STR_8(4), STR_7(4), STR_6(14), 
  6062 ;;		 -> STR_5(5), STR_4(8), getZ@z(10), getY@y(10), 
  6063 ;;		 -> getX@x(10), 
  6064 ;; Auto vars:     Size  Location     Type
  6065 ;;  x               1   86[COMRAM] unsigned char 
  6066 ;;  i               2   87[COMRAM] int 
  6067 ;; Return value:  Size  Location     Type
  6068 ;;		None               void
  6069 ;; Registers used:
  6070 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6071 ;; Tracked objects:
  6072 ;;		On entry : 0/0
  6073 ;;		On exit  : 0/0
  6074 ;;		Unchanged: 0/0
  6075 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6076 ;;      Params:         3       0       0       0       0       0       0       0       0
  6077 ;;      Locals:         3       0       0       0       0       0       0       0       0
  6078 ;;      Temps:          3       0       0       0       0       0       0       0       0
  6079 ;;      Totals:         9       0       0       0       0       0       0       0       0
  6080 ;;Total ram usage:        9 bytes
  6081 ;; Hardware stack levels used:    1
  6082 ;; Hardware stack levels required when called:    1
  6083 ;; This function calls:
  6084 ;;		_LcdCmd
  6085 ;;		_LcdData
  6086 ;; This function is called by:
  6087 ;;		_main
  6088 ;; This function uses a non-reentrant model
  6089 ;;
  6090                           
  6091                           	psect	text25
  6092  002074                     __ptext25:
  6093                           	opt stack 0
  6094  002074                     _LcdText:
  6095                           	opt stack 29
  6096                           
  6097                           ;incstack = 0
  6098                           ;LcdText@x stored from wreg
  6099  002074  6E57               	movwf	LcdText@x,c
  6100                           
  6101                           ;hd44780.h: 124: LcdCmd(2);
  6102  002076  0E02               	movlw	2
  6103  002078  ECF7  F00D         	call	_LcdCmd
  6104                           
  6105                           ;hd44780.h: 125: if (y == 2) {
  6106  00207C  5051               	movf	LcdText@y,w,c
  6107  00207E  0A02               	xorlw	2
  6108  002080  A4D8               	btfss	status,2,c
  6109  002082  D004               	goto	l3041
  6110                           
  6111                           ;hd44780.h: 126: LcdCmd(192);
  6112  002084  0EC0               	movlw	192
  6113  002086  ECF7  F00D         	call	_LcdCmd
  6114                           
  6115                           ;hd44780.h: 127: }
  6116  00208A  D003               	goto	l3043
  6117  00208C                     l3041:
  6118                           
  6119                           ;hd44780.h: 128: else {
  6120                           ;hd44780.h: 129: LcdCmd(2);
  6121  00208C  0E02               	movlw	2
  6122  00208E  ECF7  F00D         	call	_LcdCmd
  6123  002092                     l3043:
  6124                           
  6125                           ;hd44780.h: 130: }
  6126                           ;hd44780.h: 132: for (int i=0; i<x; i++) {
  6127  002092  0E00               	movlw	0
  6128  002094  6E59               	movwf	LcdText@i+1,c
  6129  002096  0E00               	movlw	0
  6130  002098  6E58               	movwf	LcdText@i,c
  6131  00209A  D005               	goto	l3049
  6132  00209C                     l3045:
  6133                           
  6134                           ;hd44780.h: 133: LcdCmd(20);
  6135  00209C  0E14               	movlw	20
  6136  00209E  ECF7  F00D         	call	_LcdCmd
  6137  0020A2  4A58               	infsnz	LcdText@i,f,c
  6138  0020A4  2A59               	incf	LcdText@i+1,f,c
  6139  0020A6                     l3049:
  6140  0020A6  5057               	movf	LcdText@x,w,c
  6141  0020A8  6E54               	movwf	??_LcdText& (0+255),c
  6142  0020AA  6A55               	clrf	(??_LcdText+1)& (0+255),c
  6143  0020AC  5059               	movf	LcdText@i+1,w,c
  6144  0020AE  0A80               	xorlw	128
  6145  0020B0  6E56               	movwf	(??_LcdText+2)& (0+255),c
  6146  0020B2  5054               	movf	??_LcdText,w,c
  6147  0020B4  5C58               	subwf	LcdText@i,w,c
  6148  0020B6  5055               	movf	??_LcdText+1,w,c
  6149  0020B8  0A80               	xorlw	128
  6150  0020BA  5856               	subwfb	(??_LcdText+2)& (0+255),w,c
  6151  0020BC  B0D8               	btfsc	status,0,c
  6152  0020BE  D01C               	goto	l3057
  6153  0020C0  D7ED               	goto	l3045
  6154  0020C2                     l3051:
  6155                           
  6156                           ;hd44780.h: 137: LcdData(*text);
  6157  0020C2  C052  FFF6         	movff	LcdText@text,tblptrl
  6158  0020C6  C053  FFF7         	movff	LcdText@text+1,tblptrh
  6159  0020CA  6AF8               	clrf	tblptru,c
  6160  0020CC  0E07               	movlw	(high __ramtop+-1)
  6161  0020CE  64F7               	cpfsgt	tblptrh,c
  6162  0020D0  D003               	bra	u3407
  6163  0020D2  0008               	tblrd		*
  6164  0020D4  50F5               	movf	tablat,w,c
  6165  0020D6  D005               	bra	u3400
  6166  0020D8                     u3407:
  6167  0020D8  CFF6 FFE1          	movff	tblptrl,fsr1l
  6168  0020DC  CFF7 FFE2          	movff	tblptrh,fsr1h
  6169  0020E0  50E7               	movf	indf1,w,c
  6170  0020E2                     u3400:
  6171  0020E2  EC72  F00D         	call	_LcdData
  6172                           
  6173                           ;hd44780.h: 138: text++;
  6174  0020E6  4A52               	infsnz	LcdText@text,f,c
  6175  0020E8  2A53               	incf	LcdText@text+1,f,c
  6176                           
  6177                           ;hd44780.h: 139: _delay((unsigned long)((2)*(20000000/4000.0)));
  6178  0020EA  0E0D               	movlw	13
  6179  0020EC  6E54               	movwf	??_LcdText& (0+255),c
  6180  0020EE  0EFC               	movlw	252
  6181  0020F0                     u3757:
  6182  0020F0  2EE8               	decfsz	wreg,f,c
  6183  0020F2  D7FE               	goto	u3757
  6184  0020F4  2E54               	decfsz	??_LcdText& (0+255),f,c
  6185  0020F6  D7FC               	goto	u3757
  6186  0020F8                     l3057:
  6187  0020F8  C052  FFF6         	movff	LcdText@text,tblptrl
  6188  0020FC  C053  FFF7         	movff	LcdText@text+1,tblptrh
  6189  002100  6AF8               	clrf	tblptru,c
  6190  002102  0E07               	movlw	(high __ramtop+-1)
  6191  002104  64F7               	cpfsgt	tblptrh,c
  6192  002106  D003               	bra	u3417
  6193  002108  0008               	tblrd		*
  6194  00210A  50F5               	movf	tablat,w,c
  6195  00210C  D005               	bra	u3410
  6196  00210E                     u3417:
  6197  00210E  CFF6 FFE1          	movff	tblptrl,fsr1l
  6198  002112  CFF7 FFE2          	movff	tblptrh,fsr1h
  6199  002116  50E7               	movf	indf1,w,c
  6200  002118                     u3410:
  6201  002118  0900               	iorlw	0
  6202  00211A  B4D8               	btfsc	status,2,c
  6203  00211C  0012               	return	
  6204  00211E  D7D1               	goto	l3051
  6205  002120                     __end_of_LcdText:
  6206                           	opt stack 0
  6207                           tblptru	equ	0xFF8
  6208                           tblptrh	equ	0xFF7
  6209                           tblptrl	equ	0xFF6
  6210                           tablat	equ	0xFF5
  6211                           prodh	equ	0xFF4
  6212                           prodl	equ	0xFF3
  6213                           postinc0	equ	0xFEE
  6214                           wreg	equ	0xFE8
  6215                           indf1	equ	0xFE7
  6216                           postdec1	equ	0xFE5
  6217                           fsr1h	equ	0xFE2
  6218                           fsr1l	equ	0xFE1
  6219                           indf2	equ	0xFDF
  6220                           postinc2	equ	0xFDE
  6221                           postdec2	equ	0xFDD
  6222                           fsr2h	equ	0xFDA
  6223                           fsr2l	equ	0xFD9
  6224                           status	equ	0xFD8
  6225                           
  6226 ;; *************** function _LcdData *****************
  6227 ;; Defined at:
  6228 ;;		line 104 in file "hd44780.h"
  6229 ;; Parameters:    Size  Location     Type
  6230 ;;  data            1    wreg     const unsigned char 
  6231 ;; Auto vars:     Size  Location     Type
  6232 ;;  data            1    2[COMRAM] const unsigned char 
  6233 ;; Return value:  Size  Location     Type
  6234 ;;		None               void
  6235 ;; Registers used:
  6236 ;;		wreg, status,2, status,0
  6237 ;; Tracked objects:
  6238 ;;		On entry : 0/0
  6239 ;;		On exit  : 0/0
  6240 ;;		Unchanged: 0/0
  6241 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6242 ;;      Params:         0       0       0       0       0       0       0       0       0
  6243 ;;      Locals:         1       0       0       0       0       0       0       0       0
  6244 ;;      Temps:          2       0       0       0       0       0       0       0       0
  6245 ;;      Totals:         3       0       0       0       0       0       0       0       0
  6246 ;;Total ram usage:        3 bytes
  6247 ;; Hardware stack levels used:    1
  6248 ;; This function calls:
  6249 ;;		Nothing
  6250 ;; This function is called by:
  6251 ;;		_LcdText
  6252 ;;		_znaki_pl_i_stopien
  6253 ;; This function uses a non-reentrant model
  6254 ;;
  6255                           
  6256                           	psect	text26
  6257  001AE4                     __ptext26:
  6258                           	opt stack 0
  6259  001AE4                     _LcdData:
  6260                           	opt stack 29
  6261                           
  6262                           ;incstack = 0
  6263                           ;LcdData@data stored from wreg
  6264  001AE4  6E03               	movwf	LcdData@data,c
  6265                           
  6266                           ;hd44780.h: 105: LATBbits.LATB2 = 1;
  6267  001AE6  848A               	bsf	3978,2,c	;volatile
  6268                           
  6269                           ;hd44780.h: 106: LATBbits.LATB3 = 1;
  6270  001AE8  868A               	bsf	3978,3,c	;volatile
  6271                           
  6272                           ;hd44780.h: 107: LATBbits.LATB7 = (data & 0b10000000) >> 7;
  6273  001AEA  6A01               	clrf	??_LcdData& (0+255),c
  6274  001AEC  AE03               	btfss	LcdData@data,7,c
  6275  001AEE  D001               	bra	u3345
  6276  001AF0  2A01               	incf	??_LcdData& (0+255),f,c
  6277  001AF2                     u3345:
  6278  001AF2  0E01               	movlw	1
  6279  001AF4  1601               	andwf	??_LcdData,f,c
  6280  001AF6  3201               	rrcf	??_LcdData,f,c
  6281  001AF8  3201               	rrcf	??_LcdData,f,c
  6282  001AFA  508A               	movf	3978,w,c	;volatile
  6283  001AFC  1801               	xorwf	??_LcdData,w,c
  6284  001AFE  0B7F               	andlw	-129
  6285  001B00  1801               	xorwf	??_LcdData,w,c
  6286  001B02  6E8A               	movwf	3978,c	;volatile
  6287                           
  6288                           ;hd44780.h: 108: LATBbits.LATB6 = (data & 0b01000000) >> 6;
  6289  001B04  C003  F001         	movff	LcdData@data,??_LcdData
  6290  001B08  0E06               	movlw	6
  6291  001B0A  6E02               	movwf	(??_LcdData+1)& (0+255),c
  6292  001B0C                     u3355:
  6293  001B0C  90D8               	bcf	status,0,c
  6294  001B0E  3201               	rrcf	??_LcdData,f,c
  6295  001B10  2E02               	decfsz	(??_LcdData+1)& (0+255),f,c
  6296  001B12  D7FC               	goto	u3355
  6297  001B14  0E01               	movlw	1
  6298  001B16  1601               	andwf	??_LcdData,f,c
  6299  001B18  3A01               	swapf	??_LcdData,f,c
  6300  001B1A  4601               	rlncf	??_LcdData,f,c
  6301  001B1C  4601               	rlncf	??_LcdData,f,c
  6302  001B1E  508A               	movf	3978,w,c	;volatile
  6303  001B20  1801               	xorwf	??_LcdData,w,c
  6304  001B22  0BBF               	andlw	-65
  6305  001B24  1801               	xorwf	??_LcdData,w,c
  6306  001B26  6E8A               	movwf	3978,c	;volatile
  6307                           
  6308                           ;hd44780.h: 109: LATBbits.LATB5 = (data & 0b00100000) >> 5;
  6309  001B28  C003  F001         	movff	LcdData@data,??_LcdData
  6310  001B2C  0E05               	movlw	5
  6311  001B2E  6E02               	movwf	(??_LcdData+1)& (0+255),c
  6312  001B30                     u3365:
  6313  001B30  90D8               	bcf	status,0,c
  6314  001B32  3201               	rrcf	??_LcdData,f,c
  6315  001B34  2E02               	decfsz	(??_LcdData+1)& (0+255),f,c
  6316  001B36  D7FC               	goto	u3365
  6317  001B38  0E01               	movlw	1
  6318  001B3A  1601               	andwf	??_LcdData,f,c
  6319  001B3C  3A01               	swapf	??_LcdData,f,c
  6320  001B3E  4601               	rlncf	??_LcdData,f,c
  6321  001B40  508A               	movf	3978,w,c	;volatile
  6322  001B42  1801               	xorwf	??_LcdData,w,c
  6323  001B44  0BDF               	andlw	-33
  6324  001B46  1801               	xorwf	??_LcdData,w,c
  6325  001B48  6E8A               	movwf	3978,c	;volatile
  6326                           
  6327                           ;hd44780.h: 110: LATBbits.LATB4 = (data & 0b00010000) >> 4;
  6328  001B4A  C003  F001         	movff	LcdData@data,??_LcdData
  6329  001B4E  3A01               	swapf	??_LcdData,f,c
  6330  001B50  0E0F               	movlw	15
  6331  001B52  1601               	andwf	??_LcdData,f,c
  6332  001B54  0E01               	movlw	1
  6333  001B56  1601               	andwf	??_LcdData,f,c
  6334  001B58  3A01               	swapf	??_LcdData,f,c
  6335  001B5A  508A               	movf	3978,w,c	;volatile
  6336  001B5C  1801               	xorwf	??_LcdData,w,c
  6337  001B5E  0BEF               	andlw	-17
  6338  001B60  1801               	xorwf	??_LcdData,w,c
  6339  001B62  6E8A               	movwf	3978,c	;volatile
  6340                           
  6341                           ;hd44780.h: 111: LATBbits.LATB3 = 0;
  6342  001B64  968A               	bcf	3978,3,c	;volatile
  6343                           
  6344                           ;hd44780.h: 113: LATBbits.LATB3 = 1;
  6345  001B66  868A               	bsf	3978,3,c	;volatile
  6346                           
  6347                           ;hd44780.h: 114: LATBbits.LATB7 = (data & 0b00001000) >> 3;
  6348  001B68  C003  F001         	movff	LcdData@data,??_LcdData
  6349  001B6C  90D8               	bcf	status,0,c
  6350  001B6E  3201               	rrcf	??_LcdData,f,c
  6351  001B70  90D8               	bcf	status,0,c
  6352  001B72  3201               	rrcf	??_LcdData,f,c
  6353  001B74  90D8               	bcf	status,0,c
  6354  001B76  3201               	rrcf	??_LcdData,f,c
  6355  001B78  0E01               	movlw	1
  6356  001B7A  1601               	andwf	??_LcdData,f,c
  6357  001B7C  3201               	rrcf	??_LcdData,f,c
  6358  001B7E  3201               	rrcf	??_LcdData,f,c
  6359  001B80  508A               	movf	3978,w,c	;volatile
  6360  001B82  1801               	xorwf	??_LcdData,w,c
  6361  001B84  0B7F               	andlw	-129
  6362  001B86  1801               	xorwf	??_LcdData,w,c
  6363  001B88  6E8A               	movwf	3978,c	;volatile
  6364                           
  6365                           ;hd44780.h: 115: LATBbits.LATB6 = (data & 0b00000100) >> 2;
  6366  001B8A  C003  F001         	movff	LcdData@data,??_LcdData
  6367  001B8E  90D8               	bcf	status,0,c
  6368  001B90  3201               	rrcf	??_LcdData,f,c
  6369  001B92  90D8               	bcf	status,0,c
  6370  001B94  3201               	rrcf	??_LcdData,f,c
  6371  001B96  0E01               	movlw	1
  6372  001B98  1601               	andwf	??_LcdData,f,c
  6373  001B9A  3A01               	swapf	??_LcdData,f,c
  6374  001B9C  4601               	rlncf	??_LcdData,f,c
  6375  001B9E  4601               	rlncf	??_LcdData,f,c
  6376  001BA0  508A               	movf	3978,w,c	;volatile
  6377  001BA2  1801               	xorwf	??_LcdData,w,c
  6378  001BA4  0BBF               	andlw	-65
  6379  001BA6  1801               	xorwf	??_LcdData,w,c
  6380  001BA8  6E8A               	movwf	3978,c	;volatile
  6381                           
  6382                           ;hd44780.h: 116: LATBbits.LATB5 = (data & 0b00000010) >> 1;
  6383  001BAA  C003  F001         	movff	LcdData@data,??_LcdData
  6384  001BAE  90D8               	bcf	status,0,c
  6385  001BB0  3201               	rrcf	??_LcdData,f,c
  6386  001BB2  0E01               	movlw	1
  6387  001BB4  1601               	andwf	??_LcdData,f,c
  6388  001BB6  3A01               	swapf	??_LcdData,f,c
  6389  001BB8  4601               	rlncf	??_LcdData,f,c
  6390  001BBA  508A               	movf	3978,w,c	;volatile
  6391  001BBC  1801               	xorwf	??_LcdData,w,c
  6392  001BBE  0BDF               	andlw	-33
  6393  001BC0  1801               	xorwf	??_LcdData,w,c
  6394  001BC2  6E8A               	movwf	3978,c	;volatile
  6395                           
  6396                           ;hd44780.h: 117: LATBbits.LATB4 = (data & 0b00000001);
  6397  001BC4  C003  F001         	movff	LcdData@data,??_LcdData
  6398  001BC8  0E01               	movlw	1
  6399  001BCA  1601               	andwf	??_LcdData,f,c
  6400  001BCC  3A01               	swapf	??_LcdData,f,c
  6401  001BCE  508A               	movf	3978,w,c	;volatile
  6402  001BD0  1801               	xorwf	??_LcdData,w,c
  6403  001BD2  0BEF               	andlw	-17
  6404  001BD4  1801               	xorwf	??_LcdData,w,c
  6405  001BD6  6E8A               	movwf	3978,c	;volatile
  6406                           
  6407                           ;hd44780.h: 118: LATBbits.LATB3 = 0;
  6408  001BD8  968A               	bcf	3978,3,c	;volatile
  6409                           
  6410                           ;hd44780.h: 119: LATBbits.LATB2 = 0;
  6411  001BDA  948A               	bcf	3978,2,c	;volatile
  6412                           
  6413                           ;hd44780.h: 120: _delay((unsigned long)((5)*(20000000/4000.0)));
  6414  001BDC  0E21               	movlw	33
  6415  001BDE  6E01               	movwf	??_LcdData& (0+255),c
  6416  001BE0  0E76               	movlw	118
  6417  001BE2                     u3767:
  6418  001BE2  2EE8               	decfsz	wreg,f,c
  6419  001BE4  D7FE               	goto	u3767
  6420  001BE6  2E01               	decfsz	??_LcdData& (0+255),f,c
  6421  001BE8  D7FC               	goto	u3767
  6422  001BEA  D000               	nop2	
  6423  001BEC  0012               	return	
  6424  001BEE                     __end_of_LcdData:
  6425                           	opt stack 0
  6426                           tblptru	equ	0xFF8
  6427                           tblptrh	equ	0xFF7
  6428                           tblptrl	equ	0xFF6
  6429                           tablat	equ	0xFF5
  6430                           prodh	equ	0xFF4
  6431                           prodl	equ	0xFF3
  6432                           postinc0	equ	0xFEE
  6433                           wreg	equ	0xFE8
  6434                           indf1	equ	0xFE7
  6435                           postdec1	equ	0xFE5
  6436                           fsr1h	equ	0xFE2
  6437                           fsr1l	equ	0xFE1
  6438                           indf2	equ	0xFDF
  6439                           postinc2	equ	0xFDE
  6440                           postdec2	equ	0xFDD
  6441                           fsr2h	equ	0xFDA
  6442                           fsr2l	equ	0xFD9
  6443                           status	equ	0xFD8
  6444                           
  6445 ;; *************** function _LcdCmd *****************
  6446 ;; Defined at:
  6447 ;;		line 85 in file "hd44780.h"
  6448 ;; Parameters:    Size  Location     Type
  6449 ;;  command         1    wreg     unsigned char 
  6450 ;; Auto vars:     Size  Location     Type
  6451 ;;  command         1    2[COMRAM] unsigned char 
  6452 ;; Return value:  Size  Location     Type
  6453 ;;		None               void
  6454 ;; Registers used:
  6455 ;;		wreg, status,2, status,0
  6456 ;; Tracked objects:
  6457 ;;		On entry : 0/0
  6458 ;;		On exit  : 0/0
  6459 ;;		Unchanged: 0/0
  6460 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6461 ;;      Params:         0       0       0       0       0       0       0       0       0
  6462 ;;      Locals:         1       0       0       0       0       0       0       0       0
  6463 ;;      Temps:          2       0       0       0       0       0       0       0       0
  6464 ;;      Totals:         3       0       0       0       0       0       0       0       0
  6465 ;;Total ram usage:        3 bytes
  6466 ;; Hardware stack levels used:    1
  6467 ;; This function calls:
  6468 ;;		Nothing
  6469 ;; This function is called by:
  6470 ;;		_LcdText
  6471 ;;		_main
  6472 ;;		_LcdClr
  6473 ;;		_SetCursor
  6474 ;;		_znaki_pl_i_stopien
  6475 ;; This function uses a non-reentrant model
  6476 ;;
  6477                           
  6478                           	psect	text27
  6479  001BEE                     __ptext27:
  6480                           	opt stack 0
  6481  001BEE                     _LcdCmd:
  6482                           	opt stack 29
  6483                           
  6484                           ;incstack = 0
  6485                           ;LcdCmd@command stored from wreg
  6486  001BEE  6E03               	movwf	LcdCmd@command,c
  6487                           
  6488                           ;hd44780.h: 86: LATBbits.LATB2 = 0;
  6489  001BF0  948A               	bcf	3978,2,c	;volatile
  6490                           
  6491                           ;hd44780.h: 87: LATBbits.LATB3 = 1;
  6492  001BF2  868A               	bsf	3978,3,c	;volatile
  6493                           
  6494                           ;hd44780.h: 88: LATBbits.LATB7 = (command & 0b10000000) >> 7;
  6495  001BF4  6A01               	clrf	??_LcdCmd& (0+255),c
  6496  001BF6  AE03               	btfss	LcdCmd@command,7,c
  6497  001BF8  D001               	bra	u3315
  6498  001BFA  2A01               	incf	??_LcdCmd& (0+255),f,c
  6499  001BFC                     u3315:
  6500  001BFC  0E01               	movlw	1
  6501  001BFE  1601               	andwf	??_LcdCmd,f,c
  6502  001C00  3201               	rrcf	??_LcdCmd,f,c
  6503  001C02  3201               	rrcf	??_LcdCmd,f,c
  6504  001C04  508A               	movf	3978,w,c	;volatile
  6505  001C06  1801               	xorwf	??_LcdCmd,w,c
  6506  001C08  0B7F               	andlw	-129
  6507  001C0A  1801               	xorwf	??_LcdCmd,w,c
  6508  001C0C  6E8A               	movwf	3978,c	;volatile
  6509                           
  6510                           ;hd44780.h: 89: LATBbits.LATB6 = (command & 0b01000000) >> 6;
  6511  001C0E  C003  F001         	movff	LcdCmd@command,??_LcdCmd
  6512  001C12  0E06               	movlw	6
  6513  001C14  6E02               	movwf	(??_LcdCmd+1)& (0+255),c
  6514  001C16                     u3325:
  6515  001C16  90D8               	bcf	status,0,c
  6516  001C18  3201               	rrcf	??_LcdCmd,f,c
  6517  001C1A  2E02               	decfsz	(??_LcdCmd+1)& (0+255),f,c
  6518  001C1C  D7FC               	goto	u3325
  6519  001C1E  0E01               	movlw	1
  6520  001C20  1601               	andwf	??_LcdCmd,f,c
  6521  001C22  3A01               	swapf	??_LcdCmd,f,c
  6522  001C24  4601               	rlncf	??_LcdCmd,f,c
  6523  001C26  4601               	rlncf	??_LcdCmd,f,c
  6524  001C28  508A               	movf	3978,w,c	;volatile
  6525  001C2A  1801               	xorwf	??_LcdCmd,w,c
  6526  001C2C  0BBF               	andlw	-65
  6527  001C2E  1801               	xorwf	??_LcdCmd,w,c
  6528  001C30  6E8A               	movwf	3978,c	;volatile
  6529                           
  6530                           ;hd44780.h: 90: LATBbits.LATB5 = (command & 0b00100000) >> 5;
  6531  001C32  C003  F001         	movff	LcdCmd@command,??_LcdCmd
  6532  001C36  0E05               	movlw	5
  6533  001C38  6E02               	movwf	(??_LcdCmd+1)& (0+255),c
  6534  001C3A                     u3335:
  6535  001C3A  90D8               	bcf	status,0,c
  6536  001C3C  3201               	rrcf	??_LcdCmd,f,c
  6537  001C3E  2E02               	decfsz	(??_LcdCmd+1)& (0+255),f,c
  6538  001C40  D7FC               	goto	u3335
  6539  001C42  0E01               	movlw	1
  6540  001C44  1601               	andwf	??_LcdCmd,f,c
  6541  001C46  3A01               	swapf	??_LcdCmd,f,c
  6542  001C48  4601               	rlncf	??_LcdCmd,f,c
  6543  001C4A  508A               	movf	3978,w,c	;volatile
  6544  001C4C  1801               	xorwf	??_LcdCmd,w,c
  6545  001C4E  0BDF               	andlw	-33
  6546  001C50  1801               	xorwf	??_LcdCmd,w,c
  6547  001C52  6E8A               	movwf	3978,c	;volatile
  6548                           
  6549                           ;hd44780.h: 91: LATBbits.LATB4 = (command & 0b00010000) >> 4;
  6550  001C54  C003  F001         	movff	LcdCmd@command,??_LcdCmd
  6551  001C58  3A01               	swapf	??_LcdCmd,f,c
  6552  001C5A  0E0F               	movlw	15
  6553  001C5C  1601               	andwf	??_LcdCmd,f,c
  6554  001C5E  0E01               	movlw	1
  6555  001C60  1601               	andwf	??_LcdCmd,f,c
  6556  001C62  3A01               	swapf	??_LcdCmd,f,c
  6557  001C64  508A               	movf	3978,w,c	;volatile
  6558  001C66  1801               	xorwf	??_LcdCmd,w,c
  6559  001C68  0BEF               	andlw	-17
  6560  001C6A  1801               	xorwf	??_LcdCmd,w,c
  6561  001C6C  6E8A               	movwf	3978,c	;volatile
  6562                           
  6563                           ;hd44780.h: 92: LATBbits.LATB3 = 0;
  6564  001C6E  968A               	bcf	3978,3,c	;volatile
  6565                           
  6566                           ;hd44780.h: 94: LATBbits.LATB3 = 1;
  6567  001C70  868A               	bsf	3978,3,c	;volatile
  6568                           
  6569                           ;hd44780.h: 95: LATBbits.LATB7 = (command & 0b00001000) >> 3;
  6570  001C72  C003  F001         	movff	LcdCmd@command,??_LcdCmd
  6571  001C76  90D8               	bcf	status,0,c
  6572  001C78  3201               	rrcf	??_LcdCmd,f,c
  6573  001C7A  90D8               	bcf	status,0,c
  6574  001C7C  3201               	rrcf	??_LcdCmd,f,c
  6575  001C7E  90D8               	bcf	status,0,c
  6576  001C80  3201               	rrcf	??_LcdCmd,f,c
  6577  001C82  0E01               	movlw	1
  6578  001C84  1601               	andwf	??_LcdCmd,f,c
  6579  001C86  3201               	rrcf	??_LcdCmd,f,c
  6580  001C88  3201               	rrcf	??_LcdCmd,f,c
  6581  001C8A  508A               	movf	3978,w,c	;volatile
  6582  001C8C  1801               	xorwf	??_LcdCmd,w,c
  6583  001C8E  0B7F               	andlw	-129
  6584  001C90  1801               	xorwf	??_LcdCmd,w,c
  6585  001C92  6E8A               	movwf	3978,c	;volatile
  6586                           
  6587                           ;hd44780.h: 96: LATBbits.LATB6 = (command & 0b00000100) >> 2;
  6588  001C94  C003  F001         	movff	LcdCmd@command,??_LcdCmd
  6589  001C98  90D8               	bcf	status,0,c
  6590  001C9A  3201               	rrcf	??_LcdCmd,f,c
  6591  001C9C  90D8               	bcf	status,0,c
  6592  001C9E  3201               	rrcf	??_LcdCmd,f,c
  6593  001CA0  0E01               	movlw	1
  6594  001CA2  1601               	andwf	??_LcdCmd,f,c
  6595  001CA4  3A01               	swapf	??_LcdCmd,f,c
  6596  001CA6  4601               	rlncf	??_LcdCmd,f,c
  6597  001CA8  4601               	rlncf	??_LcdCmd,f,c
  6598  001CAA  508A               	movf	3978,w,c	;volatile
  6599  001CAC  1801               	xorwf	??_LcdCmd,w,c
  6600  001CAE  0BBF               	andlw	-65
  6601  001CB0  1801               	xorwf	??_LcdCmd,w,c
  6602  001CB2  6E8A               	movwf	3978,c	;volatile
  6603                           
  6604                           ;hd44780.h: 97: LATBbits.LATB5 = (command & 0b00000010) >> 1;
  6605  001CB4  C003  F001         	movff	LcdCmd@command,??_LcdCmd
  6606  001CB8  90D8               	bcf	status,0,c
  6607  001CBA  3201               	rrcf	??_LcdCmd,f,c
  6608  001CBC  0E01               	movlw	1
  6609  001CBE  1601               	andwf	??_LcdCmd,f,c
  6610  001CC0  3A01               	swapf	??_LcdCmd,f,c
  6611  001CC2  4601               	rlncf	??_LcdCmd,f,c
  6612  001CC4  508A               	movf	3978,w,c	;volatile
  6613  001CC6  1801               	xorwf	??_LcdCmd,w,c
  6614  001CC8  0BDF               	andlw	-33
  6615  001CCA  1801               	xorwf	??_LcdCmd,w,c
  6616  001CCC  6E8A               	movwf	3978,c	;volatile
  6617                           
  6618                           ;hd44780.h: 98: LATBbits.LATB4 = (command & 0b00000001);
  6619  001CCE  C003  F001         	movff	LcdCmd@command,??_LcdCmd
  6620  001CD2  0E01               	movlw	1
  6621  001CD4  1601               	andwf	??_LcdCmd,f,c
  6622  001CD6  3A01               	swapf	??_LcdCmd,f,c
  6623  001CD8  508A               	movf	3978,w,c	;volatile
  6624  001CDA  1801               	xorwf	??_LcdCmd,w,c
  6625  001CDC  0BEF               	andlw	-17
  6626  001CDE  1801               	xorwf	??_LcdCmd,w,c
  6627  001CE0  6E8A               	movwf	3978,c	;volatile
  6628                           
  6629                           ;hd44780.h: 99: LATBbits.LATB3 = 0;
  6630  001CE2  968A               	bcf	3978,3,c	;volatile
  6631                           
  6632                           ;hd44780.h: 100: _delay((unsigned long)((5)*(20000000/4000.0)));
  6633  001CE4  0E21               	movlw	33
  6634  001CE6  6E01               	movwf	??_LcdCmd& (0+255),c
  6635  001CE8  0E76               	movlw	118
  6636  001CEA                     u3777:
  6637  001CEA  2EE8               	decfsz	wreg,f,c
  6638  001CEC  D7FE               	goto	u3777
  6639  001CEE  2E01               	decfsz	??_LcdCmd& (0+255),f,c
  6640  001CF0  D7FC               	goto	u3777
  6641  001CF2  D000               	nop2	
  6642  001CF4  0012               	return	
  6643  001CF6                     __end_of_LcdCmd:
  6644                           	opt stack 0
  6645                           tblptru	equ	0xFF8
  6646                           tblptrh	equ	0xFF7
  6647                           tblptrl	equ	0xFF6
  6648                           tablat	equ	0xFF5
  6649                           prodh	equ	0xFF4
  6650                           prodl	equ	0xFF3
  6651                           postinc0	equ	0xFEE
  6652                           wreg	equ	0xFE8
  6653                           indf1	equ	0xFE7
  6654                           postdec1	equ	0xFE5
  6655                           fsr1h	equ	0xFE2
  6656                           fsr1l	equ	0xFE1
  6657                           indf2	equ	0xFDF
  6658                           postinc2	equ	0xFDE
  6659                           postdec2	equ	0xFDD
  6660                           fsr2h	equ	0xFDA
  6661                           fsr2l	equ	0xFD9
  6662                           status	equ	0xFD8
  6663                           
  6664 ;; *************** function _Init_lcd *****************
  6665 ;; Defined at:
  6666 ;;		line 52 in file "hd44780.h"
  6667 ;; Parameters:    Size  Location     Type
  6668 ;;		None
  6669 ;; Auto vars:     Size  Location     Type
  6670 ;;		None
  6671 ;; Return value:  Size  Location     Type
  6672 ;;		None               void
  6673 ;; Registers used:
  6674 ;;		wreg
  6675 ;; Tracked objects:
  6676 ;;		On entry : 0/0
  6677 ;;		On exit  : 0/0
  6678 ;;		Unchanged: 0/0
  6679 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6680 ;;      Params:         0       0       0       0       0       0       0       0       0
  6681 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6682 ;;      Temps:          1       0       0       0       0       0       0       0       0
  6683 ;;      Totals:         1       0       0       0       0       0       0       0       0
  6684 ;;Total ram usage:        1 bytes
  6685 ;; Hardware stack levels used:    1
  6686 ;; This function calls:
  6687 ;;		Nothing
  6688 ;; This function is called by:
  6689 ;;		_main
  6690 ;; This function uses a non-reentrant model
  6691 ;;
  6692                           
  6693                           	psect	text28
  6694  002828                     __ptext28:
  6695                           	opt stack 0
  6696  002828                     _Init_lcd:
  6697                           	opt stack 30
  6698                           
  6699                           ;hd44780.h: 55: TRISBbits.TRISB7 = 0;
  6700                           
  6701                           ;incstack = 0
  6702  002828  9E93               	bcf	3987,7,c	;volatile
  6703                           
  6704                           ;hd44780.h: 56: TRISBbits.TRISB6 = 0;
  6705  00282A  9C93               	bcf	3987,6,c	;volatile
  6706                           
  6707                           ;hd44780.h: 57: TRISBbits.TRISB5 = 0;
  6708  00282C  9A93               	bcf	3987,5,c	;volatile
  6709                           
  6710                           ;hd44780.h: 58: TRISBbits.TRISB4 = 0;
  6711  00282E  9893               	bcf	3987,4,c	;volatile
  6712                           
  6713                           ;hd44780.h: 59: TRISBbits.TRISB3 = 0;
  6714  002830  9693               	bcf	3987,3,c	;volatile
  6715                           
  6716                           ;hd44780.h: 60: TRISBbits.TRISB2 = 0;
  6717  002832  9493               	bcf	3987,2,c	;volatile
  6718                           
  6719                           ;hd44780.h: 63: LATBbits.LATB7 = 0;
  6720  002834  9E8A               	bcf	3978,7,c	;volatile
  6721                           
  6722                           ;hd44780.h: 64: LATBbits.LATB6 = 0;
  6723  002836  9C8A               	bcf	3978,6,c	;volatile
  6724                           
  6725                           ;hd44780.h: 65: LATBbits.LATB5 = 0;
  6726  002838  9A8A               	bcf	3978,5,c	;volatile
  6727                           
  6728                           ;hd44780.h: 66: LATBbits.LATB4 = 0;
  6729  00283A  988A               	bcf	3978,4,c	;volatile
  6730                           
  6731                           ;hd44780.h: 67: LATBbits.LATB3 = 0;
  6732  00283C  968A               	bcf	3978,3,c	;volatile
  6733                           
  6734                           ;hd44780.h: 68: LATBbits.LATB2 = 0;
  6735  00283E  948A               	bcf	3978,2,c	;volatile
  6736                           
  6737                           ;hd44780.h: 75: LATBbits.LATB3 = 1;
  6738  002840  868A               	bsf	3978,3,c	;volatile
  6739                           
  6740                           ;hd44780.h: 76: LATBbits.LATB7 = 0;
  6741  002842  9E8A               	bcf	3978,7,c	;volatile
  6742                           
  6743                           ;hd44780.h: 77: LATBbits.LATB6 = 0;
  6744  002844  9C8A               	bcf	3978,6,c	;volatile
  6745                           
  6746                           ;hd44780.h: 78: LATBbits.LATB5 = 1;
  6747  002846  8A8A               	bsf	3978,5,c	;volatile
  6748                           
  6749                           ;hd44780.h: 79: LATBbits.LATB4 = 0;
  6750  002848  988A               	bcf	3978,4,c	;volatile
  6751                           
  6752                           ;hd44780.h: 80: LATBbits.LATB3 = 0;
  6753  00284A  968A               	bcf	3978,3,c	;volatile
  6754                           
  6755                           ;hd44780.h: 81: _delay((unsigned long)((5)*(20000000/4000.0)));
  6756  00284C  0E21               	movlw	33
  6757  00284E  6E01               	movwf	??_Init_lcd& (0+255),c
  6758  002850  0E76               	movlw	118
  6759  002852                     u3787:
  6760  002852  2EE8               	decfsz	wreg,f,c
  6761  002854  D7FE               	goto	u3787
  6762  002856  2E01               	decfsz	??_Init_lcd& (0+255),f,c
  6763  002858  D7FC               	goto	u3787
  6764  00285A  D000               	nop2	
  6765  00285C  0012               	return	
  6766  00285E                     __end_of_Init_lcd:
  6767                           	opt stack 0
  6768                           tblptru	equ	0xFF8
  6769                           tblptrh	equ	0xFF7
  6770                           tblptrl	equ	0xFF6
  6771                           tablat	equ	0xFF5
  6772                           prodh	equ	0xFF4
  6773                           prodl	equ	0xFF3
  6774                           postinc0	equ	0xFEE
  6775                           wreg	equ	0xFE8
  6776                           indf1	equ	0xFE7
  6777                           postdec1	equ	0xFE5
  6778                           fsr1h	equ	0xFE2
  6779                           fsr1l	equ	0xFE1
  6780                           indf2	equ	0xFDF
  6781                           postinc2	equ	0xFDE
  6782                           postdec2	equ	0xFDD
  6783                           fsr2h	equ	0xFDA
  6784                           fsr2l	equ	0xFD9
  6785                           status	equ	0xFD8
  6786                           
  6787 ;; *************** function _Init_adxl345 *****************
  6788 ;; Defined at:
  6789 ;;		line 83 in file "adxl345_i2c.h"
  6790 ;; Parameters:    Size  Location     Type
  6791 ;;  x_offset        1    wreg     char 
  6792 ;;  y_offset        1    9[COMRAM] char 
  6793 ;;  z_offset        1   10[COMRAM] char 
  6794 ;;  range           1   11[COMRAM] char 
  6795 ;;  data_rate       1   12[COMRAM] unsigned char 
  6796 ;; Auto vars:     Size  Location     Type
  6797 ;;  x_offset        1   14[COMRAM] char 
  6798 ;; Return value:  Size  Location     Type
  6799 ;;		None               void
  6800 ;; Registers used:
  6801 ;;		wreg, status,2, status,0, cstack
  6802 ;; Tracked objects:
  6803 ;;		On entry : 0/0
  6804 ;;		On exit  : 0/0
  6805 ;;		Unchanged: 0/0
  6806 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6807 ;;      Params:         4       0       0       0       0       0       0       0       0
  6808 ;;      Locals:         1       0       0       0       0       0       0       0       0
  6809 ;;      Temps:          1       0       0       0       0       0       0       0       0
  6810 ;;      Totals:         6       0       0       0       0       0       0       0       0
  6811 ;;Total ram usage:        6 bytes
  6812 ;; Hardware stack levels used:    1
  6813 ;; Hardware stack levels required when called:    4
  6814 ;; This function calls:
  6815 ;;		_adxl345Write
  6816 ;;		_setRange
  6817 ;; This function is called by:
  6818 ;;		_main
  6819 ;; This function uses a non-reentrant model
  6820 ;;
  6821                           
  6822                           	psect	text29
  6823  001FAE                     __ptext29:
  6824                           	opt stack 0
  6825  001FAE                     _Init_adxl345:
  6826                           	opt stack 26
  6827                           
  6828                           ;incstack = 0
  6829                           ;Init_adxl345@x_offset stored from wreg
  6830  001FAE  6E0F               	movwf	Init_adxl345@x_offset,c
  6831                           
  6832                           ;adxl345_i2c.h: 84: setRange(range);
  6833  001FB0  500C               	movf	Init_adxl345@range,w,c
  6834  001FB2  EC49  F014         	call	_setRange
  6835                           
  6836                           ;adxl345_i2c.h: 85: _delay((unsigned long)((2)*(20000000/4000.0)));
  6837  001FB6  0E0D               	movlw	13
  6838  001FB8  6E0E               	movwf	??_Init_adxl345& (0+255),c
  6839  001FBA  0EFC               	movlw	252
  6840  001FBC                     u3797:
  6841  001FBC  2EE8               	decfsz	wreg,f,c
  6842  001FBE  D7FE               	goto	u3797
  6843  001FC0  2E0E               	decfsz	??_Init_adxl345& (0+255),f,c
  6844  001FC2  D7FC               	goto	u3797
  6845                           
  6846                           ;adxl345_i2c.h: 86: adxl345Write(0x2D,0x08);
  6847  001FC4  0E00               	movlw	0
  6848  001FC6  6E05               	movwf	adxl345Write@add+1,c
  6849  001FC8  0E2D               	movlw	45
  6850  001FCA  6E04               	movwf	adxl345Write@add,c
  6851  001FCC  0E00               	movlw	0
  6852  001FCE  6E07               	movwf	adxl345Write@data+1,c
  6853  001FD0  0E08               	movlw	8
  6854  001FD2  6E06               	movwf	adxl345Write@data,c
  6855  001FD4  EC2F  F014         	call	_adxl345Write	;wreg free
  6856                           
  6857                           ;adxl345_i2c.h: 87: _delay((unsigned long)((2)*(20000000/4000.0)));
  6858  001FD8  0E0D               	movlw	13
  6859  001FDA  6E0E               	movwf	??_Init_adxl345& (0+255),c
  6860  001FDC  0EFC               	movlw	252
  6861  001FDE                     u3807:
  6862  001FDE  2EE8               	decfsz	wreg,f,c
  6863  001FE0  D7FE               	goto	u3807
  6864  001FE2  2E0E               	decfsz	??_Init_adxl345& (0+255),f,c
  6865  001FE4  D7FC               	goto	u3807
  6866                           
  6867                           ;adxl345_i2c.h: 88: adxl345Write(0x1E, x_offset);
  6868  001FE6  0E00               	movlw	0
  6869  001FE8  6E05               	movwf	adxl345Write@add+1,c
  6870  001FEA  0E1E               	movlw	30
  6871  001FEC  6E04               	movwf	adxl345Write@add,c
  6872  001FEE  500F               	movf	Init_adxl345@x_offset,w,c
  6873  001FF0  6E06               	movwf	adxl345Write@data,c
  6874  001FF2  6A07               	clrf	adxl345Write@data+1,c
  6875  001FF4  BE06               	btfsc	adxl345Write@data,7,c
  6876  001FF6  0607               	decf	adxl345Write@data+1,f,c
  6877  001FF8  EC2F  F014         	call	_adxl345Write	;wreg free
  6878                           
  6879                           ;adxl345_i2c.h: 89: _delay((unsigned long)((2)*(20000000/4000.0)));
  6880  001FFC  0E0D               	movlw	13
  6881  001FFE  6E0E               	movwf	??_Init_adxl345& (0+255),c
  6882  002000  0EFC               	movlw	252
  6883  002002                     u3817:
  6884  002002  2EE8               	decfsz	wreg,f,c
  6885  002004  D7FE               	goto	u3817
  6886  002006  2E0E               	decfsz	??_Init_adxl345& (0+255),f,c
  6887  002008  D7FC               	goto	u3817
  6888                           
  6889                           ;adxl345_i2c.h: 90: adxl345Write(0x1F, y_offset);
  6890  00200A  0E00               	movlw	0
  6891  00200C  6E05               	movwf	adxl345Write@add+1,c
  6892  00200E  0E1F               	movlw	31
  6893  002010  6E04               	movwf	adxl345Write@add,c
  6894  002012  500A               	movf	Init_adxl345@y_offset,w,c
  6895  002014  6E06               	movwf	adxl345Write@data,c
  6896  002016  6A07               	clrf	adxl345Write@data+1,c
  6897  002018  BE06               	btfsc	adxl345Write@data,7,c
  6898  00201A  0607               	decf	adxl345Write@data+1,f,c
  6899  00201C  EC2F  F014         	call	_adxl345Write	;wreg free
  6900                           
  6901                           ;adxl345_i2c.h: 91: _delay((unsigned long)((2)*(20000000/4000.0)));
  6902  002020  0E0D               	movlw	13
  6903  002022  6E0E               	movwf	??_Init_adxl345& (0+255),c
  6904  002024  0EFC               	movlw	252
  6905  002026                     u3827:
  6906  002026  2EE8               	decfsz	wreg,f,c
  6907  002028  D7FE               	goto	u3827
  6908  00202A  2E0E               	decfsz	??_Init_adxl345& (0+255),f,c
  6909  00202C  D7FC               	goto	u3827
  6910                           
  6911                           ;adxl345_i2c.h: 92: adxl345Write(0x20, z_offset);
  6912  00202E  0E00               	movlw	0
  6913  002030  6E05               	movwf	adxl345Write@add+1,c
  6914  002032  0E20               	movlw	32
  6915  002034  6E04               	movwf	adxl345Write@add,c
  6916  002036  500B               	movf	Init_adxl345@z_offset,w,c
  6917  002038  6E06               	movwf	adxl345Write@data,c
  6918  00203A  6A07               	clrf	adxl345Write@data+1,c
  6919  00203C  BE06               	btfsc	adxl345Write@data,7,c
  6920  00203E  0607               	decf	adxl345Write@data+1,f,c
  6921  002040  EC2F  F014         	call	_adxl345Write	;wreg free
  6922                           
  6923                           ;adxl345_i2c.h: 93: _delay((unsigned long)((2)*(20000000/4000.0)));
  6924  002044  0E0D               	movlw	13
  6925  002046  6E0E               	movwf	??_Init_adxl345& (0+255),c
  6926  002048  0EFC               	movlw	252
  6927  00204A                     u3837:
  6928  00204A  2EE8               	decfsz	wreg,f,c
  6929  00204C  D7FE               	goto	u3837
  6930  00204E  2E0E               	decfsz	??_Init_adxl345& (0+255),f,c
  6931  002050  D7FC               	goto	u3837
  6932                           
  6933                           ;adxl345_i2c.h: 94: adxl345Write(0x2C, data_rate);
  6934  002052  0E00               	movlw	0
  6935  002054  6E05               	movwf	adxl345Write@add+1,c
  6936  002056  0E2C               	movlw	44
  6937  002058  6E04               	movwf	adxl345Write@add,c
  6938  00205A  C00D  F006         	movff	Init_adxl345@data_rate,adxl345Write@data
  6939  00205E  6A07               	clrf	adxl345Write@data+1,c
  6940  002060  EC2F  F014         	call	_adxl345Write	;wreg free
  6941                           
  6942                           ;adxl345_i2c.h: 95: _delay((unsigned long)((2)*(20000000/4000.0)));
  6943  002064  0E0D               	movlw	13
  6944  002066  6E0E               	movwf	??_Init_adxl345& (0+255),c
  6945  002068  0EFC               	movlw	252
  6946  00206A                     u3847:
  6947  00206A  2EE8               	decfsz	wreg,f,c
  6948  00206C  D7FE               	goto	u3847
  6949  00206E  2E0E               	decfsz	??_Init_adxl345& (0+255),f,c
  6950  002070  D7FC               	goto	u3847
  6951  002072  0012               	return	
  6952  002074                     __end_of_Init_adxl345:
  6953                           	opt stack 0
  6954                           tblptru	equ	0xFF8
  6955                           tblptrh	equ	0xFF7
  6956                           tblptrl	equ	0xFF6
  6957                           tablat	equ	0xFF5
  6958                           prodh	equ	0xFF4
  6959                           prodl	equ	0xFF3
  6960                           postinc0	equ	0xFEE
  6961                           wreg	equ	0xFE8
  6962                           indf1	equ	0xFE7
  6963                           postdec1	equ	0xFE5
  6964                           fsr1h	equ	0xFE2
  6965                           fsr1l	equ	0xFE1
  6966                           indf2	equ	0xFDF
  6967                           postinc2	equ	0xFDE
  6968                           postdec2	equ	0xFDD
  6969                           fsr2h	equ	0xFDA
  6970                           fsr2l	equ	0xFD9
  6971                           status	equ	0xFD8
  6972                           
  6973 ;; *************** function _setRange *****************
  6974 ;; Defined at:
  6975 ;;		line 98 in file "adxl345_i2c.h"
  6976 ;; Parameters:    Size  Location     Type
  6977 ;;  range           1    wreg     unsigned char 
  6978 ;; Auto vars:     Size  Location     Type
  6979 ;;  range           1    7[COMRAM] unsigned char 
  6980 ;;  format          1    8[COMRAM] unsigned char 
  6981 ;; Return value:  Size  Location     Type
  6982 ;;		None               void
  6983 ;; Registers used:
  6984 ;;		wreg, status,2, status,0, cstack
  6985 ;; Tracked objects:
  6986 ;;		On entry : 0/0
  6987 ;;		On exit  : 0/0
  6988 ;;		Unchanged: 0/0
  6989 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6990 ;;      Params:         0       0       0       0       0       0       0       0       0
  6991 ;;      Locals:         2       0       0       0       0       0       0       0       0
  6992 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6993 ;;      Totals:         2       0       0       0       0       0       0       0       0
  6994 ;;Total ram usage:        2 bytes
  6995 ;; Hardware stack levels used:    1
  6996 ;; Hardware stack levels required when called:    3
  6997 ;; This function calls:
  6998 ;;		_adxl345Read
  6999 ;;		_adxl345Write
  7000 ;; This function is called by:
  7001 ;;		_Init_adxl345
  7002 ;; This function uses a non-reentrant model
  7003 ;;
  7004                           
  7005                           	psect	text30
  7006  002892                     __ptext30:
  7007                           	opt stack 0
  7008  002892                     _setRange:
  7009                           	opt stack 26
  7010                           
  7011                           ;incstack = 0
  7012                           ;setRange@range stored from wreg
  7013  002892  6E08               	movwf	setRange@range,c
  7014                           
  7015                           ;adxl345_i2c.h: 99: unsigned char format = adxl345Read(0x31);
  7016  002894  0E00               	movlw	0
  7017  002896  6E05               	movwf	adxl345Read@add+1,c
  7018  002898  0E31               	movlw	49
  7019  00289A  6E04               	movwf	adxl345Read@add,c
  7020  00289C  EC90  F013         	call	_adxl345Read	;wreg free
  7021  0028A0  6E09               	movwf	setRange@format,c
  7022                           
  7023                           ;adxl345_i2c.h: 100: format &= ~0x0F;
  7024  0028A2  0EF0               	movlw	240
  7025  0028A4  1609               	andwf	setRange@format,f,c
  7026                           
  7027                           ;adxl345_i2c.h: 101: format |= range;
  7028  0028A6  5008               	movf	setRange@range,w,c
  7029  0028A8  1209               	iorwf	setRange@format,f,c
  7030                           
  7031                           ;adxl345_i2c.h: 102: format |= 0x08;
  7032  0028AA  8609               	bsf	setRange@format,3,c
  7033                           
  7034                           ;adxl345_i2c.h: 104: adxl345Write(0x31, format);
  7035  0028AC  0E00               	movlw	0
  7036  0028AE  6E05               	movwf	adxl345Write@add+1,c
  7037  0028B0  0E31               	movlw	49
  7038  0028B2  6E04               	movwf	adxl345Write@add,c
  7039  0028B4  C009  F006         	movff	setRange@format,adxl345Write@data
  7040  0028B8  6A07               	clrf	adxl345Write@data+1,c
  7041  0028BA  EC2F  F014         	call	_adxl345Write	;wreg free
  7042  0028BE  0012               	return	
  7043  0028C0                     __end_of_setRange:
  7044                           	opt stack 0
  7045                           tblptru	equ	0xFF8
  7046                           tblptrh	equ	0xFF7
  7047                           tblptrl	equ	0xFF6
  7048                           tablat	equ	0xFF5
  7049                           prodh	equ	0xFF4
  7050                           prodl	equ	0xFF3
  7051                           postinc0	equ	0xFEE
  7052                           wreg	equ	0xFE8
  7053                           indf1	equ	0xFE7
  7054                           postdec1	equ	0xFE5
  7055                           fsr1h	equ	0xFE2
  7056                           fsr1l	equ	0xFE1
  7057                           indf2	equ	0xFDF
  7058                           postinc2	equ	0xFDE
  7059                           postdec2	equ	0xFDD
  7060                           fsr2h	equ	0xFDA
  7061                           fsr2l	equ	0xFD9
  7062                           status	equ	0xFD8
  7063                           
  7064 ;; *************** function _adxl345Write *****************
  7065 ;; Defined at:
  7066 ;;		line 47 in file "adxl345_i2c.h"
  7067 ;; Parameters:    Size  Location     Type
  7068 ;;  add             2    3[COMRAM] int 
  7069 ;;  data            2    5[COMRAM] int 
  7070 ;; Auto vars:     Size  Location     Type
  7071 ;;		None
  7072 ;; Return value:  Size  Location     Type
  7073 ;;		None               void
  7074 ;; Registers used:
  7075 ;;		wreg, status,2, status,0, cstack
  7076 ;; Tracked objects:
  7077 ;;		On entry : 0/0
  7078 ;;		On exit  : 0/0
  7079 ;;		Unchanged: 0/0
  7080 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7081 ;;      Params:         4       0       0       0       0       0       0       0       0
  7082 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7083 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7084 ;;      Totals:         4       0       0       0       0       0       0       0       0
  7085 ;;Total ram usage:        4 bytes
  7086 ;; Hardware stack levels used:    1
  7087 ;; Hardware stack levels required when called:    2
  7088 ;; This function calls:
  7089 ;;		_IdleI2C
  7090 ;;		_WriteI2C
  7091 ;; This function is called by:
  7092 ;;		_Init_adxl345
  7093 ;;		_setRange
  7094 ;; This function uses a non-reentrant model
  7095 ;;
  7096                           
  7097                           	psect	text31
  7098  00285E                     __ptext31:
  7099                           	opt stack 0
  7100  00285E                     _adxl345Write:
  7101                           	opt stack 26
  7102                           
  7103                           ;adxl345_i2c.h: 49: IdleI2C();
  7104                           
  7105                           ;incstack = 0
  7106  00285E  ECCE  F014         	call	_IdleI2C	;wreg free
  7107                           
  7108                           ;adxl345_i2c.h: 50: SSPCON2bits.SEN=1;while(SSPCON2bits.SEN);
  7109  002862  80C5               	bsf	4037,0,c	;volatile
  7110  002864                     l25:
  7111  002864  B0C5               	btfsc	4037,0,c	;volatile
  7112  002866  D7FE               	goto	l25
  7113                           
  7114                           ;adxl345_i2c.h: 51: IdleI2C();
  7115  002868  ECCE  F014         	call	_IdleI2C	;wreg free
  7116                           
  7117                           ;adxl345_i2c.h: 52: WriteI2C(0xA6);
  7118  00286C  0EA6               	movlw	166
  7119  00286E  EC30  F013         	call	_WriteI2C
  7120                           
  7121                           ;adxl345_i2c.h: 53: IdleI2C();
  7122  002872  ECCE  F014         	call	_IdleI2C	;wreg free
  7123                           
  7124                           ;adxl345_i2c.h: 54: WriteI2C(add);
  7125  002876  5004               	movf	adxl345Write@add,w,c
  7126  002878  EC30  F013         	call	_WriteI2C
  7127                           
  7128                           ;adxl345_i2c.h: 55: IdleI2C();
  7129  00287C  ECCE  F014         	call	_IdleI2C	;wreg free
  7130                           
  7131                           ;adxl345_i2c.h: 56: WriteI2C(data);
  7132  002880  5006               	movf	adxl345Write@data,w,c
  7133  002882  EC30  F013         	call	_WriteI2C
  7134                           
  7135                           ;adxl345_i2c.h: 57: IdleI2C();
  7136  002886  ECCE  F014         	call	_IdleI2C	;wreg free
  7137                           
  7138                           ;adxl345_i2c.h: 58: SSPCON2bits.PEN=1;while(SSPCON2bits.PEN);
  7139  00288A  84C5               	bsf	4037,2,c	;volatile
  7140  00288C                     l28:
  7141  00288C  A4C5               	btfss	4037,2,c	;volatile
  7142  00288E  0012               	return	
  7143  002890  D7FD               	goto	l28
  7144  002892                     __end_of_adxl345Write:
  7145                           	opt stack 0
  7146                           tblptru	equ	0xFF8
  7147                           tblptrh	equ	0xFF7
  7148                           tblptrl	equ	0xFF6
  7149                           tablat	equ	0xFF5
  7150                           prodh	equ	0xFF4
  7151                           prodl	equ	0xFF3
  7152                           postinc0	equ	0xFEE
  7153                           wreg	equ	0xFE8
  7154                           indf1	equ	0xFE7
  7155                           postdec1	equ	0xFE5
  7156                           fsr1h	equ	0xFE2
  7157                           fsr1l	equ	0xFE1
  7158                           indf2	equ	0xFDF
  7159                           postinc2	equ	0xFDE
  7160                           postdec2	equ	0xFDD
  7161                           fsr2h	equ	0xFDA
  7162                           fsr2l	equ	0xFD9
  7163                           status	equ	0xFD8
  7164                           
  7165 ;; *************** function _adxl345Read *****************
  7166 ;; Defined at:
  7167 ;;		line 62 in file "adxl345_i2c.h"
  7168 ;; Parameters:    Size  Location     Type
  7169 ;;  add             2    3[COMRAM] int 
  7170 ;; Auto vars:     Size  Location     Type
  7171 ;;  retval          1    5[COMRAM] unsigned char 
  7172 ;; Return value:  Size  Location     Type
  7173 ;;                  1    wreg      unsigned char 
  7174 ;; Registers used:
  7175 ;;		wreg, status,2, status,0, cstack
  7176 ;; Tracked objects:
  7177 ;;		On entry : 0/0
  7178 ;;		On exit  : 0/0
  7179 ;;		Unchanged: 0/0
  7180 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7181 ;;      Params:         2       0       0       0       0       0       0       0       0
  7182 ;;      Locals:         1       0       0       0       0       0       0       0       0
  7183 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7184 ;;      Totals:         3       0       0       0       0       0       0       0       0
  7185 ;;Total ram usage:        3 bytes
  7186 ;; Hardware stack levels used:    1
  7187 ;; Hardware stack levels required when called:    2
  7188 ;; This function calls:
  7189 ;;		_IdleI2C
  7190 ;;		_ReadI2C
  7191 ;;		_WriteI2C
  7192 ;; This function is called by:
  7193 ;;		_setRange
  7194 ;;		_getX
  7195 ;;		_getY
  7196 ;;		_getZ
  7197 ;; This function uses a non-reentrant model
  7198 ;;
  7199                           
  7200                           	psect	text32
  7201  002720                     __ptext32:
  7202                           	opt stack 0
  7203  002720                     _adxl345Read:
  7204                           	opt stack 27
  7205                           
  7206                           ;adxl345_i2c.h: 63: unsigned char retval;
  7207                           ;adxl345_i2c.h: 64: IdleI2C();
  7208                           
  7209                           ;incstack = 0
  7210  002720  ECCE  F014         	call	_IdleI2C	;wreg free
  7211                           
  7212                           ;adxl345_i2c.h: 65: SSPCON2bits.SEN=1;while(SSPCON2bits.SEN);
  7213  002724  80C5               	bsf	4037,0,c	;volatile
  7214  002726                     l34:
  7215  002726  B0C5               	btfsc	4037,0,c	;volatile
  7216  002728  D7FE               	goto	l34
  7217                           
  7218                           ;adxl345_i2c.h: 66: IdleI2C();
  7219  00272A  ECCE  F014         	call	_IdleI2C	;wreg free
  7220                           
  7221                           ;adxl345_i2c.h: 67: WriteI2C(0xA6);
  7222  00272E  0EA6               	movlw	166
  7223  002730  EC30  F013         	call	_WriteI2C
  7224                           
  7225                           ;adxl345_i2c.h: 68: IdleI2C();
  7226  002734  ECCE  F014         	call	_IdleI2C	;wreg free
  7227                           
  7228                           ;adxl345_i2c.h: 69: WriteI2C(add);
  7229  002738  5004               	movf	adxl345Read@add,w,c
  7230  00273A  EC30  F013         	call	_WriteI2C
  7231                           
  7232                           ;adxl345_i2c.h: 70: IdleI2C();
  7233  00273E  ECCE  F014         	call	_IdleI2C	;wreg free
  7234                           
  7235                           ;adxl345_i2c.h: 72: SSPCON2bits.RSEN=1;while(SSPCON2bits.RSEN);
  7236  002742  82C5               	bsf	4037,1,c	;volatile
  7237  002744                     l37:
  7238  002744  B2C5               	btfsc	4037,1,c	;volatile
  7239  002746  D7FE               	goto	l37
  7240                           
  7241                           ;adxl345_i2c.h: 73: WriteI2C(0xA7);
  7242  002748  0EA7               	movlw	167
  7243  00274A  EC30  F013         	call	_WriteI2C
  7244                           
  7245                           ;adxl345_i2c.h: 74: IdleI2C();
  7246  00274E  ECCE  F014         	call	_IdleI2C	;wreg free
  7247                           
  7248                           ;adxl345_i2c.h: 75: retval = ReadI2C();
  7249  002752  EC75  F014         	call	_ReadI2C	;wreg free
  7250  002756  6E06               	movwf	adxl345Read@retval,c
  7251                           
  7252                           ;adxl345_i2c.h: 78: SSPCON2bits.ACKDT=1;SSPCON2bits.ACKEN=1;while(SSPCON2bits.ACKEN);
  7253  002758  8AC5               	bsf	4037,5,c	;volatile
  7254  00275A  88C5               	bsf	4037,4,c	;volatile
  7255  00275C                     l40:
  7256  00275C  B8C5               	btfsc	4037,4,c	;volatile
  7257  00275E  D7FE               	goto	l40
  7258                           
  7259                           ;adxl345_i2c.h: 79: SSPCON2bits.PEN=1;while(SSPCON2bits.PEN);
  7260  002760  84C5               	bsf	4037,2,c	;volatile
  7261  002762                     l43:
  7262  002762  B4C5               	btfsc	4037,2,c	;volatile
  7263  002764  D7FE               	goto	l43
  7264                           
  7265                           ;adxl345_i2c.h: 80: return retval;
  7266  002766  5006               	movf	adxl345Read@retval,w,c
  7267  002768  0012               	return	
  7268  00276A                     __end_of_adxl345Read:
  7269                           	opt stack 0
  7270                           tblptru	equ	0xFF8
  7271                           tblptrh	equ	0xFF7
  7272                           tblptrl	equ	0xFF6
  7273                           tablat	equ	0xFF5
  7274                           prodh	equ	0xFF4
  7275                           prodl	equ	0xFF3
  7276                           postinc0	equ	0xFEE
  7277                           wreg	equ	0xFE8
  7278                           indf1	equ	0xFE7
  7279                           postdec1	equ	0xFE5
  7280                           fsr1h	equ	0xFE2
  7281                           fsr1l	equ	0xFE1
  7282                           indf2	equ	0xFDF
  7283                           postinc2	equ	0xFDE
  7284                           postdec2	equ	0xFDD
  7285                           fsr2h	equ	0xFDA
  7286                           fsr2l	equ	0xFD9
  7287                           status	equ	0xFD8
  7288                           
  7289 ;; *************** function _WriteI2C *****************
  7290 ;; Defined at:
  7291 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\pic18\plib\i2c\i2c_writ.c"
  7292 ;; Parameters:    Size  Location     Type
  7293 ;;  data_out        1    wreg     unsigned char 
  7294 ;; Auto vars:     Size  Location     Type
  7295 ;;  data_out        1    2[COMRAM] unsigned char 
  7296 ;; Return value:  Size  Location     Type
  7297 ;;                  1    wreg      char 
  7298 ;; Registers used:
  7299 ;;		wreg, status,2, status,0, cstack
  7300 ;; Tracked objects:
  7301 ;;		On entry : 0/0
  7302 ;;		On exit  : 0/0
  7303 ;;		Unchanged: 0/0
  7304 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7305 ;;      Params:         0       0       0       0       0       0       0       0       0
  7306 ;;      Locals:         1       0       0       0       0       0       0       0       0
  7307 ;;      Temps:          1       0       0       0       0       0       0       0       0
  7308 ;;      Totals:         2       0       0       0       0       0       0       0       0
  7309 ;;Total ram usage:        2 bytes
  7310 ;; Hardware stack levels used:    1
  7311 ;; Hardware stack levels required when called:    1
  7312 ;; This function calls:
  7313 ;;		_IdleI2C
  7314 ;; This function is called by:
  7315 ;;		_adxl345Write
  7316 ;;		_adxl345Read
  7317 ;; This function uses a non-reentrant model
  7318 ;;
  7319                           
  7320                           	psect	text33
  7321  002660                     __ptext33:
  7322                           	opt stack 0
  7323  002660                     _WriteI2C:
  7324                           	opt stack 27
  7325                           
  7326                           ;incstack = 0
  7327                           ;WriteI2C@data_out stored from wreg
  7328  002660  6E03               	movwf	WriteI2C@data_out,c
  7329  002662  C003  FFC9         	movff	WriteI2C@data_out,4041	;volatile
  7330  002666  BEC6               	btfsc	4038,7,c	;volatile
  7331  002668  D02C               	goto	l286
  7332                           
  7333                           ;	Return value of _WriteI2C is never used
  7334  00266A  CFC6 F002          	movff	4038,??_WriteI2C	;volatile
  7335  00266E  0E0F               	movlw	15
  7336  002670  1602               	andwf	??_WriteI2C,f,c
  7337  002672  5002               	movf	??_WriteI2C,w,c
  7338  002674  0A08               	xorlw	8
  7339  002676  B4D8               	btfsc	status,2,c
  7340  002678  D00F               	goto	l2165
  7341  00267A  CFC6 F002          	movff	4038,??_WriteI2C	;volatile
  7342  00267E  0E0F               	movlw	15
  7343  002680  1602               	andwf	??_WriteI2C,f,c
  7344  002682  5002               	movf	??_WriteI2C,w,c
  7345  002684  0A0B               	xorlw	11
  7346  002686  B4D8               	btfsc	status,2,c
  7347  002688  D007               	goto	l2165
  7348  00268A  88C6               	bsf	4038,4,c	;volatile
  7349  00268C                     l289:
  7350  00268C  A69E               	btfss	3998,3,c	;volatile
  7351  00268E  D7FE               	goto	l289
  7352  002690  B4C7               	btfsc	4039,2,c	;volatile
  7353  002692  D017               	goto	l286
  7354  002694  50C7               	movf	4039,w,c	;volatile
  7355  002696  D015               	goto	l286
  7356  002698                     l2165:
  7357  002698  CFC6 F002          	movff	4038,??_WriteI2C	;volatile
  7358  00269C  0E0F               	movlw	15
  7359  00269E  1602               	andwf	??_WriteI2C,f,c
  7360  0026A0  5002               	movf	??_WriteI2C,w,c
  7361  0026A2  0A08               	xorlw	8
  7362  0026A4  B4D8               	btfsc	status,2,c
  7363  0026A6  D008               	goto	l298
  7364  0026A8  CFC6 F002          	movff	4038,??_WriteI2C	;volatile
  7365  0026AC  0E0F               	movlw	15
  7366  0026AE  1602               	andwf	??_WriteI2C,f,c
  7367  0026B0  5002               	movf	??_WriteI2C,w,c
  7368  0026B2  0A0B               	xorlw	11
  7369  0026B4  A4D8               	btfss	status,2,c
  7370  0026B6  D005               	goto	l286
  7371  0026B8                     l298:
  7372  0026B8  B0C7               	btfsc	4039,0,c	;volatile
  7373  0026BA  D7FE               	goto	l298
  7374  0026BC  ECCE  F014         	call	_IdleI2C	;wreg free
  7375  0026C0  50C5               	movf	4037,w,c	;volatile
  7376  0026C2                     l286:
  7377  0026C2  0012               	return	
  7378  0026C4                     __end_of_WriteI2C:
  7379                           	opt stack 0
  7380                           tblptru	equ	0xFF8
  7381                           tblptrh	equ	0xFF7
  7382                           tblptrl	equ	0xFF6
  7383                           tablat	equ	0xFF5
  7384                           prodh	equ	0xFF4
  7385                           prodl	equ	0xFF3
  7386                           postinc0	equ	0xFEE
  7387                           wreg	equ	0xFE8
  7388                           indf1	equ	0xFE7
  7389                           postdec1	equ	0xFE5
  7390                           fsr1h	equ	0xFE2
  7391                           fsr1l	equ	0xFE1
  7392                           indf2	equ	0xFDF
  7393                           postinc2	equ	0xFDE
  7394                           postdec2	equ	0xFDD
  7395                           fsr2h	equ	0xFDA
  7396                           fsr2l	equ	0xFD9
  7397                           status	equ	0xFD8
  7398                           
  7399 ;; *************** function _IdleI2C *****************
  7400 ;; Defined at:
  7401 ;;		line 24 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\pic18\plib\i2c\i2c_idle.c"
  7402 ;; Parameters:    Size  Location     Type
  7403 ;;		None
  7404 ;; Auto vars:     Size  Location     Type
  7405 ;;		None
  7406 ;; Return value:  Size  Location     Type
  7407 ;;		None               void
  7408 ;; Registers used:
  7409 ;;		wreg, status,2, status,0
  7410 ;; Tracked objects:
  7411 ;;		On entry : 0/0
  7412 ;;		On exit  : 0/0
  7413 ;;		Unchanged: 0/0
  7414 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7415 ;;      Params:         0       0       0       0       0       0       0       0       0
  7416 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7417 ;;      Temps:          1       0       0       0       0       0       0       0       0
  7418 ;;      Totals:         1       0       0       0       0       0       0       0       0
  7419 ;;Total ram usage:        1 bytes
  7420 ;; Hardware stack levels used:    1
  7421 ;; This function calls:
  7422 ;;		Nothing
  7423 ;; This function is called by:
  7424 ;;		_adxl345Write
  7425 ;;		_adxl345Read
  7426 ;;		_WriteI2C
  7427 ;; This function uses a non-reentrant model
  7428 ;;
  7429                           
  7430                           	psect	text34
  7431  00299C                     __ptext34:
  7432                           	opt stack 0
  7433  00299C                     _IdleI2C:
  7434                           	opt stack 27
  7435  00299C                     l2107:
  7436  00299C  CFC5 F001          	movff	4037,??_IdleI2C	;volatile
  7437  0029A0  0E1F               	movlw	31
  7438  0029A2  1601               	andwf	??_IdleI2C,f,c
  7439  0029A4  B4D8               	btfsc	status,2,c
  7440  0029A6  B4C7               	btfsc	4039,2,c	;volatile
  7441  0029A8  D7F9               	goto	l2107
  7442  0029AA  0012               	return	
  7443  0029AC                     __end_of_IdleI2C:
  7444                           	opt stack 0
  7445                           tblptru	equ	0xFF8
  7446                           tblptrh	equ	0xFF7
  7447                           tblptrl	equ	0xFF6
  7448                           tablat	equ	0xFF5
  7449                           prodh	equ	0xFF4
  7450                           prodl	equ	0xFF3
  7451                           postinc0	equ	0xFEE
  7452                           wreg	equ	0xFE8
  7453                           indf1	equ	0xFE7
  7454                           postdec1	equ	0xFE5
  7455                           fsr1h	equ	0xFE2
  7456                           fsr1l	equ	0xFE1
  7457                           indf2	equ	0xFDF
  7458                           postinc2	equ	0xFDE
  7459                           postdec2	equ	0xFDD
  7460                           fsr2h	equ	0xFDA
  7461                           fsr2l	equ	0xFD9
  7462                           status	equ	0xFD8
  7463                           
  7464 ;; *************** function _ReadI2C *****************
  7465 ;; Defined at:
  7466 ;;		line 11 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\pic18\plib\i2c\i2c_read.c"
  7467 ;; Parameters:    Size  Location     Type
  7468 ;;		None
  7469 ;; Auto vars:     Size  Location     Type
  7470 ;;		None
  7471 ;; Return value:  Size  Location     Type
  7472 ;;                  1    wreg      unsigned char 
  7473 ;; Registers used:
  7474 ;;		wreg, status,2, status,0
  7475 ;; Tracked objects:
  7476 ;;		On entry : 0/0
  7477 ;;		On exit  : 0/0
  7478 ;;		Unchanged: 0/0
  7479 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7480 ;;      Params:         0       0       0       0       0       0       0       0       0
  7481 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7482 ;;      Temps:          1       0       0       0       0       0       0       0       0
  7483 ;;      Totals:         1       0       0       0       0       0       0       0       0
  7484 ;;Total ram usage:        1 bytes
  7485 ;; Hardware stack levels used:    1
  7486 ;; This function calls:
  7487 ;;		Nothing
  7488 ;; This function is called by:
  7489 ;;		_adxl345Read
  7490 ;; This function uses a non-reentrant model
  7491 ;;
  7492                           
  7493                           	psect	text35
  7494  0028EA                     __ptext35:
  7495                           	opt stack 0
  7496  0028EA                     _ReadI2C:
  7497                           	opt stack 28
  7498                           
  7499                           ;incstack = 0
  7500  0028EA  CFC6 F001          	movff	4038,??_ReadI2C	;volatile
  7501  0028EE  0E0F               	movlw	15
  7502  0028F0  1601               	andwf	??_ReadI2C,f,c
  7503  0028F2  5001               	movf	??_ReadI2C,w,c
  7504  0028F4  0A08               	xorlw	8
  7505  0028F6  B4D8               	btfsc	status,2,c
  7506  0028F8  D007               	goto	l264
  7507  0028FA  CFC6 F001          	movff	4038,??_ReadI2C	;volatile
  7508  0028FE  0E0F               	movlw	15
  7509  002900  1601               	andwf	??_ReadI2C,f,c
  7510  002902  5001               	movf	??_ReadI2C,w,c
  7511  002904  0A0B               	xorlw	11
  7512  002906  B4D8               	btfsc	status,2,c
  7513  002908                     l264:
  7514  002908  86C5               	bsf	4037,3,c	;volatile
  7515  00290A                     l265:
  7516  00290A  A0C7               	btfss	4039,0,c	;volatile
  7517  00290C  D7FE               	goto	l265
  7518  00290E  50C9               	movf	4041,w,c	;volatile
  7519  002910  0012               	return	
  7520  002912                     __end_of_ReadI2C:
  7521                           	opt stack 0
  7522                           tblptru	equ	0xFF8
  7523                           tblptrh	equ	0xFF7
  7524                           tblptrl	equ	0xFF6
  7525                           tablat	equ	0xFF5
  7526                           prodh	equ	0xFF4
  7527                           prodl	equ	0xFF3
  7528                           postinc0	equ	0xFEE
  7529                           wreg	equ	0xFE8
  7530                           indf1	equ	0xFE7
  7531                           postdec1	equ	0xFE5
  7532                           fsr1h	equ	0xFE2
  7533                           fsr1l	equ	0xFE1
  7534                           indf2	equ	0xFDF
  7535                           postinc2	equ	0xFDE
  7536                           postdec2	equ	0xFDD
  7537                           fsr2h	equ	0xFDA
  7538                           fsr2l	equ	0xFD9
  7539                           status	equ	0xFD8
  7540                           tblptru	equ	0xFF8
  7541                           tblptrh	equ	0xFF7
  7542                           tblptrl	equ	0xFF6
  7543                           tablat	equ	0xFF5
  7544                           prodh	equ	0xFF4
  7545                           prodl	equ	0xFF3
  7546                           postinc0	equ	0xFEE
  7547                           wreg	equ	0xFE8
  7548                           indf1	equ	0xFE7
  7549                           postdec1	equ	0xFE5
  7550                           fsr1h	equ	0xFE2
  7551                           fsr1l	equ	0xFE1
  7552                           indf2	equ	0xFDF
  7553                           postinc2	equ	0xFDE
  7554                           postdec2	equ	0xFDD
  7555                           fsr2h	equ	0xFDA
  7556                           fsr2l	equ	0xFD9
  7557                           status	equ	0xFD8
  7558                           
  7559                           	psect	rparam
  7560  0000                     tblptru	equ	0xFF8
  7561                           tblptrh	equ	0xFF7
  7562                           tblptrl	equ	0xFF6
  7563                           tablat	equ	0xFF5
  7564                           prodh	equ	0xFF4
  7565                           prodl	equ	0xFF3
  7566                           postinc0	equ	0xFEE
  7567                           wreg	equ	0xFE8
  7568                           indf1	equ	0xFE7
  7569                           postdec1	equ	0xFE5
  7570                           fsr1h	equ	0xFE2
  7571                           fsr1l	equ	0xFE1
  7572                           indf2	equ	0xFDF
  7573                           postinc2	equ	0xFDE
  7574                           postdec2	equ	0xFDD
  7575                           fsr2h	equ	0xFDA
  7576                           fsr2l	equ	0xFD9
  7577                           status	equ	0xFD8


Data Sizes:
    Strings     31
    Constant    118
    Data        64
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     95      95
    BANK0           160     55     119
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_3(CODE[5]), STR_2(CODE[5]), STR_1(CODE[5]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 10
		 -> getZ@z(BANK0[10]), getY@y(BANK0[10]), getX@x(BANK0[10]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    S358$_cp	PTR const unsigned char  size(2) Largest target is 0

    _val._str._cp	PTR const unsigned char  size(2) Largest target is 0

    LcdText@text	PTR const unsigned char  size(2) Largest target is 14
		 -> STR_9(CODE[4]), STR_8(CODE[4]), STR_7(CODE[4]), STR_6(CODE[14]), 
		 -> STR_5(CODE[5]), STR_4(CODE[8]), getZ@z(BANK0[10]), getY@y(BANK0[10]), 
		 -> getX@x(BANK0[10]), 

    sp__getZ	PTR const unsigned char  size(2) Largest target is 10
		 -> getZ@z(BANK0[10]), 

    sp__getY	PTR const unsigned char  size(2) Largest target is 10
		 -> getY@y(BANK0[10]), 

    sp__getX	PTR const unsigned char  size(2) Largest target is 10
		 -> getX@x(BANK0[10]), 


Critical Paths under _main in COMRAM

    _main->_LcdText
    _getZ->_sprintf
    _getY->_sprintf
    _getX->_sprintf
    _sprintf->___ftsub
    _scale->___ftmul
    _fround->___ftmul
    ___wmul->___awdiv
    ___ftmul->___wmul
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___fttol->_scale
    ___ftsub->___ftadd
    ___ftadd->_fround
    ___awtoft->___ftpack
    _LcdText->_getX
    _LcdText->_getY
    _LcdText->_getZ
    _Init_adxl345->_setRange
    _setRange->_adxl345Write
    _adxl345Write->_WriteI2C
    _adxl345Read->_WriteI2C
    _WriteI2C->_IdleI2C

Critical Paths under _main in BANK0

    _main->_getX
    _main->_getY
    _main->_getZ
    _getZ->_sprintf
    _getY->_sprintf
    _getX->_sprintf
    _LcdText->_getX
    _LcdText->_getY
    _LcdText->_getZ

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 9     4      5  158808
                                             89 COMRAM     6     1      5
                                             52 BANK0      3     3      0
                       _Init_adxl345
                           _Init_lcd
                             _LcdCmd
                            _LcdText
                            _OpenI2C
                               _getX
                               _getY
                               _getZ
 ---------------------------------------------------------------------------------
 (1) _getZ                                                21    19      2   51406
                                             76 COMRAM     4     2      2
                                             35 BANK0     17    17      0
                           ___awtoft
                            ___ftmul
                        _adxl345Read
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _getY                                                21    19      2   51406
                                             76 COMRAM     4     2      2
                                             35 BANK0     17    17      0
                           ___awtoft
                            ___ftmul
                        _adxl345Read
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _getX                                                21    19      2   51406
                                             76 COMRAM     4     2      2
                                             35 BANK0     17    17      0
                           ___awtoft
                            ___ftmul
                        _adxl345Read
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             54    47      7   43728
                                             63 COMRAM    13     6      7
                                              0 BANK0     35    35      0
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _scale
 ---------------------------------------------------------------------------------
 (3) _scale                                               10     7      3   10504
                                             35 COMRAM     7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (3) _fround                                              13    10      3   10306
                                             35 COMRAM    10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4    2335
                                             14 COMRAM     6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftmul                                             15     9      6    4652
                                             20 COMRAM    15     9      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___awtoft (ARG)
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              6     2      4    1448
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4    1580
                                              6 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) __tdiv_to_l_                                         15     9      6     431
                                              0 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (3) __div_to_l_                                          16    10      6     574
                                              0 COMRAM    16    10      6
 ---------------------------------------------------------------------------------
 (3) ___lltoft                                             9     5      4    2181
                                              8 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___llmod                                              9     1      8     543
                                              0 COMRAM     9     1      8
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8     418
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (3) ___fttol                                             15    11      4     444
                                             42 COMRAM    15    11      4
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftsub                                              6     0      6    3521
                                             57 COMRAM     6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftadd                                             12     6      6    3246
                                             45 COMRAM    12     6      6
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftneg                                              3     0      3     109
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (3) ___ftge                                               9     3      6     520
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (2) ___awtoft                                             4     1      3    2331
                                              8 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) ___ftpack                                             8     3      5    2048
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (1) _OpenI2C                                              2     1      1     108
                                              0 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (1) _LcdText                                              9     6      3    1617
                                             80 COMRAM     9     6      3
                             _LcdCmd
                            _LcdData
                               _getX (ARG)
                               _getY (ARG)
                               _getZ (ARG)
 ---------------------------------------------------------------------------------
 (2) _LcdData                                              3     3      0     176
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) _LcdCmd                                               3     3      0     176
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _Init_lcd                                             1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Init_adxl345                                         6     2      4    2597
                                              9 COMRAM     6     2      4
                       _adxl345Write
                           _setRange
 ---------------------------------------------------------------------------------
 (2) _setRange                                             2     2      0    1397
                                              7 COMRAM     2     2      0
                        _adxl345Read
                       _adxl345Write
 ---------------------------------------------------------------------------------
 (3) _adxl345Write                                         4     0      4     834
                                              3 COMRAM     4     0      4
                            _IdleI2C
                           _WriteI2C
 ---------------------------------------------------------------------------------
 (2) _adxl345Read                                          3     1      2     515
                                              3 COMRAM     3     1      2
                            _IdleI2C
                            _ReadI2C
                           _WriteI2C
 ---------------------------------------------------------------------------------
 (3) _WriteI2C                                             2     2      0      22
                                              1 COMRAM     2     2      0
                            _IdleI2C
 ---------------------------------------------------------------------------------
 (4) _IdleI2C                                              1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _ReadI2C                                              1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Init_adxl345
     _adxl345Write
       _IdleI2C
       _WriteI2C
         _IdleI2C
     _setRange
       _adxl345Read
         _IdleI2C
         _ReadI2C
         _WriteI2C
           _IdleI2C
       _adxl345Write
         _IdleI2C
         _WriteI2C
           _IdleI2C
   _Init_lcd
   _LcdCmd
   _LcdText
     _LcdCmd
     _LcdData
     _getX (ARG)
       ___awtoft
         ___ftpack
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _adxl345Read
         _IdleI2C
         _ReadI2C
         _WriteI2C
           _IdleI2C
       _sprintf
         ___awdiv
           ___awmod (ARG)
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg
         ___ftsub
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv
         ___llmod
         ___lltoft
           ___ftpack
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_
         __tdiv_to_l_
         _fround
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit
         _scale
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
     _getY (ARG)
       ___awtoft
         ___ftpack
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _adxl345Read
         _IdleI2C
         _ReadI2C
         _WriteI2C
           _IdleI2C
       _sprintf
         ___awdiv
           ___awmod (ARG)
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg
         ___ftsub
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv
         ___llmod
         ___lltoft
           ___ftpack
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_
         __tdiv_to_l_
         _fround
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit
         _scale
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
     _getZ (ARG)
       ___awtoft
         ___ftpack
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _adxl345Read
         _IdleI2C
         _ReadI2C
         _WriteI2C
           _IdleI2C
       _sprintf
         ___awdiv
           ___awmod (ARG)
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg
         ___ftsub
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv
         ___llmod
         ___lltoft
           ___ftpack
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_
         __tdiv_to_l_
         _fround
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit
         _scale
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
   _OpenI2C
   _getX
     ___awtoft
       ___ftpack
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _adxl345Read
       _IdleI2C
       _ReadI2C
       _WriteI2C
         _IdleI2C
     _sprintf
       ___awdiv
         ___awmod (ARG)
       ___ftadd
         ___ftpack
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftge
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg
       ___ftsub
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___fttol
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lldiv
       ___llmod
       ___lltoft
         ___ftpack
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       __div_to_l_
       __tdiv_to_l_
       _fround
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _isdigit
       _scale
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
   _getY
     ___awtoft
       ___ftpack
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _adxl345Read
       _IdleI2C
       _ReadI2C
       _WriteI2C
         _IdleI2C
     _sprintf
       ___awdiv
         ___awmod (ARG)
       ___ftadd
         ___ftpack
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftge
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg
       ___ftsub
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___fttol
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lldiv
       ___llmod
       ___lltoft
         ___ftpack
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       __div_to_l_
       __tdiv_to_l_
       _fround
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _isdigit
       _scale
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
   _getZ
     ___awtoft
       ___ftpack
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _adxl345Read
       _IdleI2C
       _ReadI2C
       _WriteI2C
         _IdleI2C
     _sprintf
       ___awdiv
         ___awmod (ARG)
       ___ftadd
         ___ftpack
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftge
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg
       ___ftsub
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___fttol
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lldiv
       ___llmod
       ___lltoft
         ___ftpack
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       __div_to_l_
       __tdiv_to_l_
       _fround
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _isdigit
       _scale
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     37      77       5       74.4%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     5F      5F       1      100.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      D6      20        0.0%
DATA                 0      0      D6       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.33 build 59893 
Symbol Table                                                                                   Sun Feb 07 21:37:08 2016

            _SSPSTATbits 000FC7                       l40 275C                       l25 2864  
                     l34 2726                       l43 2762                       l28 288C  
                     l37 2744             ___awdiv@sign 000C      ___wmul@multiplicand 0011  
           ___ftadd@exp1 0039             ___ftadd@exp2 0038             ___ftadd@sign 0037  
                    l215 0E56                      l164 147C                      l264 2908  
                    l265 290A                      l286 26C2                      l289 268C  
                    l705 1DF4                      l298 26B8                      l714 1DE4  
                    l723 2576                      l803 264E                      l707 1D64  
                    l628 21C6                      l708 1D8C                      l680 17D6  
                    l665 16FE                      l729 1ED8                      l666 1862  
                    l739 2950                      l587 1AE2                      l596 1AD2  
                    l669 172A                      l749 1FAC                      l689 17F2  
                    l793 25E8             __CFG_BOR$OFF 000000             ___awmod@sign 0006  
                    wreg 000FE8              _sprintf$371 00A3        adxl345Read@retval 0006  
   __size_of_adxl345Read 004A             __CFG_LVP$OFF 000000             __CFG_WDT$OFF 000000  
                   l2121 2148                     l2107 299C                     l2131 21A4  
                   l2123 2166                     l2115 2130                     l2221 1768  
                   l2205 1738                     l2301 1EA0                     l2127 217C  
                   l2119 213E                     l2231 179C                     l3041 208C  
                   l2129 219A                     l2241 17D0                     l2233 17A4  
                   l3051 20C2                     l3043 2092                     l2227 178A  
                   l2331 2416                     l2323 23F8                     l2165 2698  
                   l3045 209C                     l2229 1794                     l2341 2436  
                   l2333 241A                     l2317 23D8                     l2247 180E  
                   l2239 17C6                     l3215 189E                     l3057 20F8  
                   l3049 20A6                     l2257 183E                     l2329 240E  
                   l2345 2440                     l2361 247C                     l2273 1E36  
                   l2433 1678                     l2425 15B8                     l2531 1DBC  
                   l2371 24AE                     l2291 1E78                     l2267 1E10  
                   l3251 1990                     l3227 18D2                     l2613 2548  
                   l2701 2618                     l2349 244E                     l2373 24B2  
                   l2381 24D0                     l2365 2498                     l2453 127C  
                   l2199 170C                     l2703 261C                     l2527 1DAC  
                   l2287 1E68                     l2471 145A                     l2447 11D8  
                   l2609 2518                     l2633 1EF4                     l2713 26CA  
                   l2553 1A06                     l2537 1DD4                     l2385 24DE  
                   l2377 24C6                     l2369 24A6                     l2297 1E90  
                   l2465 13AA                     l2457 128A                     l2619 2574  
                   l2651 1F4E                     l2707 2640                     l2715 26D6  
                   l2547 19DA                     l2539 1DE0                     l2483 2976  
                   l2811 0B94                     l2803 0B28                     l2661 1F76  
                   l2493 1D10                     l2733 08A6                     l2663 1F82  
                   l2655 1F5E                     l2575 1A78                     l2567 1A48  
                   l2911 0FE2                     l2903 0FBC                     l2823 0C20  
                   l2807 0B4E                     l2751 092E                     l2665 1F86  
                   l2681 25A6                     l2585 1A9A                     l2905 0FCA  
                   l2913 0FEE                     l2761 095C                     l2753 0944  
                   l2691 25DA                     l2683 25AA                     l2595 1AC2  
                   l2499 1D2A                     l2923 1030                     l2835 0C92  
                   l2819 0BFA                     l2763 0982                     l2747 08F4  
                   l2739 08C0                     l2669 1F9C                     l2597 1ACE  
                   l2589 1AAA                     l2853 0D46                     l2757 0956  
                   l2933 1088                     l2679 259A                     l2927 1060  
                   l2919 100C                     l2839 0CFA                     l2935 10A2  
                   l2881 0E5A                     l2769 099E                     l2699 260C  
                   l2875 0E26                     l2859 0D6A                     l2867 0E00  
                   l2795 0AC0                     l2779 0A02                     l2973 278E  
                   l2893 0ED8                     l2869 0E0E                     l2889 0E86  
                   STR_1 0885                     STR_2 0885                     STR_3 0885  
                   STR_4 087D                     STR_5 0880                     STR_6 0877  
                   STR_7 088A                     STR_8 088E                     STR_9 0892  
                   u2301 1E20                     u2310 1E28                     u2071 16C8  
                   u2081 16DC                     u3050 0A4E                     u3035 09DC  
                   u3055 0A44                     u3400 20E2                     u2281 1E06  
                   u3410 2118                     u3315 1BFC                     u2611 1D06  
                   u2700 19CC                     u3325 1C16                     u3335 1C3A  
                   u3407 20D8                     u2631 1D20                     u2720 19F8  
                   u3345 1AF2                     u3417 210E                     u2705 19C2  
                   u3355 1B0C                     u3365 1B30                     u2725 19EE  
                   u2831 1EEA                     u2680 1DC2                     u2850 1F12  
                   u2770 1AB0                     u3807 1FDE                     u2855 1F0A  
                   u2880 1F64                     u3817 2002                     u3737 188C  
                   u3827 2026                     u3747 1996                     u3837 204A  
                   u3757 20F0                     u3847 206A                     u3767 1BE2  
                   u3777 1CEA                     u3787 2852                     u3797 1FBC  
           __CFG_PWRT$ON 000000                     _getX 2310                     _getY 226C  
                   _getZ 21C8                     _main 1864             ___ftpack@arg 0001  
           ___ftpack@exp 0004                     fsr1h 000FE2                     fsr2h 000FDA  
                   indf1 000FE7                     fsr1l 000FE1                     indf2 000FDF  
                   fsr2l 000FD9                     prodh 000FF4                     prodl 000FF3  
                   start 0000          __end_of_IdleI2C 29AC          __end_of_LcdData 1BEE  
           _sprintf$1422 00A0          __end_of_LcdText 2120            __CFG_MCLRE$ON 000000  
           ___ftmul@cntr 0022             ___ftmul@sign 0023          __end_of_ReadI2C 2912  
        __end_of_OpenI2C 299C             ___fttol@exp1 0039    __size_of_adxl345Write 0034  
        adxl345Write@add 0004             ___fttol@lval 0035            __CFG_PLLDIV$5 000000  
                  ?_getX 004D                    ?_getY 004D                    ?_getZ 004D  
                  ?_main 005A          __end_of___awdiv 2458            ?_Init_adxl345 000A  
        __end_of___ftadd 1864          __end_of___awmod 24E8          __end_of___ftneg 295E  
        __end_of___lldiv 25FA          __end_of___ftmul 1EDA          ___awdiv@divisor 0009  
        __end_of___llmod 2660          __end_of___ftsub 2828          __end_of___fttol 1FAE  
        ___awdiv@counter 000B            __CFG_USBDIV$2 000000             ___lltoft@exp 0011  
          ___awtoft@sign 000C          __end_of_dpowers 0829                    _scale 10B0  
        __end_of_isdigit 297E                    getX@X 00D0                    getY@Y 00D0  
                  getZ@Z 00D0                    getX@x 00C3                    getY@y 00C3  
                  getZ@z 00C3            ___ftpack@sign 0005                    main@i 00D4  
                  tablat 000FF5                    status 000FD8          __end_of_sprintf 10B0  
           _adxl345Write 285E          __initialization 28C0             __end_of_getX 23B4  
           __end_of_getY 2310             __end_of_getZ 226C             __end_of_main 19AE  
       __end_of_Init_lcd 285E           ??_Init_adxl345 000E                   ??_getX 004F  
                 ??_getY 004F                   ??_getZ 004F         adxl345Write@data 0006  
                 ??_main 005F            ___fttol@sign1 0034            __activetblptr 000002  
   __size_of__tdiv_to_l_ 0100         ___llmod@dividend 0001                   ?_scale 0024  
       ___awdiv@dividend 0007         __end_of_WriteI2C 26C4         __end_of___awtoft 27B2  
       __end_of___ftpack 21C8         __end_of___lltoft 2720              OpenI2C@slew 0001  
              ??_IdleI2C 0001                ??_LcdData 0001                ??_LcdText 0054  
                 _SSPADD 000FC8                   _SSPBUF 000FC9                ??_ReadI2C 0001  
                 _LcdCmd 1BEE           __CFG_VREGEN$ON 000000                ??_OpenI2C 0002  
       __end_of__powers_ 0877                   ___ftge 24E8                   ___wmul 2912  
              ??___awdiv 000B                ??___ftadd 0034                ??___awmod 0005  
              ??___ftneg 0004                ??___lldiv 0009                ??___ftmul 001B  
              ??___llmod 0009                ??___ftsub 0040                ??___fttol 002F  
                 _fround 147E         ___awdiv@quotient 000D          ___awmod@divisor 0003  
          LcdCmd@command 0003                   getX@xf 00CD                   getY@yf 00CD  
                 getZ@zf 00CD          ___awmod@counter 0005         __end_of_setRange 28C0  
  ___ftmul@f3_as_product 001F                ??_isdigit 0001             __mediumconst 0000  
                 tblptrh 000FF7                   tblptrl 000FF6                   tblptru 000FF8  
              ??_sprintf 0047               __accesstop 0060  __end_of__initialization 28E0  
        __CFG_PBADEN$OFF 000000               ___ftadd@f1 002E               ___ftadd@f2 0031  
             ___ftge@ff1 0001               ___ftge@ff2 0004               ___ftneg@f1 0001  
             ___awtoft@c 0009               ___ftmul@f1 0015               ___ftmul@f2 0018  
             ___ftsub@f1 003A               ___ftsub@f2 003D               ___fttol@f1 002B  
         __pcstackCOMRAM 0001             __pidataBANK0 27B2               ___lltoft@c 0009  
          __end_of_scale 147E               __div_to_l_ 19AE          __div_to_l_@exp1 0010  
        __div_to_l_@cntr 000F             sprintf@integ 00B3                  ??_scale 0027  
        __div_to_l_@quot 000B                ?_Init_lcd 0001     __end_of_Init_adxl345 2074  
                ?_LcdCmd 0001            __div_to_l_@f1 0001            __div_to_l_@f2 0004  
                ?___ftge 0001                  ?___wmul 000F                  ?_fround 0024  
              ?_WriteI2C 0001                ?___awtoft 0009                ?___ftpack 0001  
              ?___lltoft 0009            ??_adxl345Read 0006                  _SSPCON1 000FC6  
                _SSPCON2 000FC5                  _SSPSTAT 000FC7                  _IdleI2C 299C  
                _LcdData 1AE4               ??_Init_lcd 0001                  _LcdText 2074  
                _ReadI2C 28EA          __size_of_LcdCmd 0108                  _OpenI2C 297E  
              ?_setRange 0001        __end_of__npowers_ 0850                  __Hparam 0000  
             _scale$1421 0027                  __Lparam 0000          __size_of___ftge 0090  
                ___awdiv 23B4                  ___ftadd 16B8                  ___awmod 2458  
                ___ftneg 2938                  ___lldiv 2578          __size_of___wmul 0026  
                ___ftmul 1DF6                  ___llmod 25FA                  ___ftsub 27F2  
                ___fttol 1EDA             __psmallconst 0800                  __pcinit 28C0  
             ??_WriteI2C 0002               ??___awtoft 000C               ??___ftpack 0006  
        __size_of_fround 023A                  __ramtop 0800               ??___lltoft 000D  
                __ptext0 1864                  __ptext1 21C8                  __ptext2 226C  
                __ptext3 2310                  __ptext4 0898                  __ptext5 10B0  
                __ptext6 295E                  __ptext7 147E                  __ptext8 2912  
                __ptext9 1DF6              ?__div_to_l_ 0001                  _dpowers 0801  
                _isdigit 295E         ___awmod@dividend 0001            setRange@range 0008  
                _sprintf 0898      __end_of_adxl345Read 276A     end_of_initialization 28E0  
          __Lmediumconst 0000          ___lldiv@divisor 0005               ??_setRange 0008  
        ___lldiv@counter 000D                  postdec1 000FE5                  postdec2 000FDD  
                postinc0 000FEE                  postinc2 000FDE           __tdiv_to_l_@f1 0001  
         __tdiv_to_l_@f2 0004            ??__tdiv_to_l_ 0007                _TRISBbits 000F93  
         adxl345Read@add 0004    __size_of_Init_adxl345 00C6      __size_of__div_to_l_ 0136  
         __end_of_LcdCmd 1CF6              ___ftmul@exp 001E           __end_of___ftge 2578  
         __end_of___wmul 2938           __end_of_fround 16B8             _Init_adxl345 1FAE  
            _adxl345Read 2720      start_initialization 28C0      __end_of__tdiv_to_l_ 1DF6  
       WriteI2C@data_out 0003          ___llmod@divisor 0005          ___llmod@counter 0009  
               ??_LcdCmd 0001        __size_of_Init_lcd 0036                 ??___ftge 0007  
               ??___wmul 0013            sprintf@vd_373 00AD              __pdataBANK0 0060  
               ??_fround 0027               fround@prec 002D        __size_of_WriteI2C 0064  
      __size_of___awtoft 0048        __size_of___ftpack 00A8        __size_of___lltoft 005C  
          __pcstackBANK0 00A0      __end_of__stringdata 0896             _isdigit$1166 0002  
               ?_IdleI2C 0001                 ?_LcdData 0001              sprintf@_val 00B6  
            sprintf@flag 00B1                 ?_LcdText 0051              sprintf@fval 00BF  
            sprintf@prec 00BD                 ?_ReadI2C 0001            ?_adxl345Write 0004  
               ?_OpenI2C 0001        __size_of_setRange 002E                 ?___awdiv 0007  
               ?___ftadd 002E                 ?___awmod 0001                 ?___ftneg 0001  
               ?___lldiv 0001                 ?___ftmul 0015                 ?___llmod 0001  
               ?___ftsub 003A                __npowers_ 0829                 ?___fttol 002B  
            __tdiv_to_l_ 1CF6             ??__div_to_l_ 0007              __smallconst 0800  
               ?_isdigit 0001                 ?_sprintf 0040           __size_of_scale 03CE  
         ??_adxl345Write 0008           ___wmul@product 0013                 _LATBbits 000F8A  
znaki_pl_i_stopien@F5130 0078  znaki_pl_i_stopien@F5132 0080  znaki_pl_i_stopien@F5124 0060  
znaki_pl_i_stopien@F5134 0088  znaki_pl_i_stopien@F5126 0068  znaki_pl_i_stopien@F5136 0090  
znaki_pl_i_stopien@F5128 0070  znaki_pl_i_stopien@F5138 0098                 _PIR1bits 000F9E  
     __end_of__div_to_l_ 1AE4                 LcdText@i 0058                 LcdText@x 0057  
               LcdText@y 0051              __stringdata 0877                main@i_311 00D6  
      ___wmul@multiplier 000F                copy_data0 28D4         OpenI2C@sync_mode 0002  
               _Init_lcd 2828         __size_of_IdleI2C 0010         __size_of_LcdData 010A  
       __size_of_LcdText 00AC         __size_of_ReadI2C 0028                 __Hrparam 0000  
       __size_of_OpenI2C 001E                 __Lrparam 0000              LcdData@data 0003  
       __size_of___awdiv 00A4         __size_of___ftadd 01AC         __size_of___awmod 0090  
       __size_of___ftneg 0026         __size_of___lldiv 0082         __size_of___ftmul 00E4  
       __size_of___llmod 0066         __size_of___ftsub 0036         __size_of___fttol 00D4  
               _WriteI2C 2660                 ___awtoft 276A                 ___ftpack 2120  
            _fround$1420 0027              _fround$1419 002A                 ___lltoft 26C4  
           ?_adxl345Read 0004               sprintf@exp 00BB         __size_of_isdigit 0020  
               __ptext10 2458                 __ptext11 23B4                 __ptext20 2938  
               __ptext12 1CF6                 __ptext21 24E8                 __ptext13 19AE  
               __ptext30 2892                 __ptext22 276A                 __ptext14 26C4  
               __ptext31 285E                 __ptext23 2120                 __ptext15 25FA  
               __ptext32 2720                 __ptext24 297E                 __ptext16 2578  
               __ptext33 2660                 __ptext25 2074                 __ptext17 1EDA  
               __ptext34 299C                 __ptext26 1AE4                 __ptext18 27F2  
               __ptext35 28EA                 __ptext27 1BEE                 __ptext19 16B8  
               __ptext28 2828                 __ptext29 1FAE                 __powers_ 0850  
       __size_of_sprintf 0818            __size_of_getX 00A4            __size_of_getY 00A4  
          __size_of_getZ 00A4            __size_of_main 014A           setRange@format 0009  
               _setRange 2892                 getX@data 00D2                 getY@data 00D2  
               getZ@data 00D2        Init_adxl345@range 000C                 main@argc 005A  
               main@argv 005C    __CFG_CPUDIV$OSC1_PLL2 000000     __end_of_adxl345Write 2892  
            LcdText@text 0052    Init_adxl345@data_rate 000D                 isdigit@c 0003  
               scale@scl 002A                sprintf@ap 00A7         __tdiv_to_l_@exp1 000F  
              sprintf@vd 00A9                sprintf@sp 0040         __tdiv_to_l_@cntr 000E  
       __tdiv_to_l_@quot 000A         ___lldiv@dividend 0001             ?__tdiv_to_l_ 0001  
               sprintf@c 00C2                 sprintf@f 0042         ___lldiv@quotient 0009  
            _SSPCON1bits 000FC6              _SSPCON2bits 000FC5       __CFG_FOSC$HSPLL_HS 000000  
   Init_adxl345@x_offset 000F     Init_adxl345@y_offset 000A     Init_adxl345@z_offset 000B  
